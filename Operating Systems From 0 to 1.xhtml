<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN" "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="GENERATOR" content="LyX 2.3.2" />
<meta http-equiv="Content-type" content="text/html;charset=UTF-8" />
<meta name="virwport" content="width=device-width, initial-scale=1.0" />
<title>Operating Systems:From 0 to 1</title>

<!-- Preamble Snippets -->
\title{Operating Systems:\protect \\
From 0 to 1}

\author{Tu, Do Hoang}

<link rel="Stylesheet" href="https://cdn.jsdelivr.net/gh/kognise/water.css/dist/light.css" />

<style type='text/css'>
/* LyX Provided Styles */
div.bibtexentry { margin-left: 2em; text-indent: -2em; }
span.bibtexlabel:before{ content: "["; }
span.bibtexlabel:after{ content: "] "; }

/* Layout-provided Styles */
dfn.lyxnoun {
  font-variant: small-caps;
}
h1.title {
font-size: x-large;
margin-bottom: 1ex;
text-align: center;

}
div.author {
font-size: large;
margin-top: 1.3ex;
margin-bottom: 0.7ex;
text-align: center;

}
div.standard {
	margin-bottom: 2ex;
}
h1.chapter_ {
font-weight: bold;
font-size: xx-large;
margin-top: 2ex;
margin-bottom: 0.8ex;
text-align: left;

}
ul.itemize {
margin-top: 0.7ex;
margin-bottom: 0.7ex;
margin-left: 3ex;
text-align: left;

}
h2.section_ {
font-weight: bold;
font-size: x-large;
margin-top: 1.3ex;
margin-bottom: 0.7ex;
text-align: left;

}
div.plain_layout {
text-align: left;

}
dl.description dt { font-weight: bold; }
h1.part {
font-weight: bold;
font-size: xx-large;
margin-top: 4ex;
margin-bottom: 4ex;
text-align: center;

}
div.chapter {
font-weight: bold;
font-size: xx-large;
margin-top: 2ex;
margin-bottom: 0.8ex;
text-align: left;

}
div.section {
font-weight: bold;
font-size: x-large;
margin-top: 1.3ex;
margin-bottom: 0.7ex;
text-align: left;

}
blockquote.quote {
margin-top: 0.5ex;
margin-bottom: 0.5ex;
margin-left: 3ex;
margin-right: 3ex;
text-align: left;

}
div.subsection {
font-weight: bold;
font-size: large;
margin-top: 0.9ex;
margin-bottom: 0.5ex;
text-align: left;

}
div.example {
font-style: normal;
font-variant: normal;
font-size: medium;
margin-top: 0.7ex;
margin-bottom: 0.7ex;
text-align: left;

}
span.example_label {
font-weight: bold;
font-style: normal;
font-variant: normal;
font-size: medium;

}
div.lyx_code {
font-family: monospace;
margin-top: 0.5ex;
margin-bottom: 0.5ex;
margin-left: 3ex;
margin-right: 3ex;
text-align: left;

}
div.full_width {
margin-top: 0.5ex;
margin-bottom: 0.5ex;
text-align: left;

}
div.exercise {
font-style: normal;
font-variant: normal;
font-size: medium;
margin-top: 0.7ex;
margin-bottom: 0.7ex;
text-align: left;

}
span.exercise_label {
font-weight: bold;
font-style: normal;
font-variant: normal;
font-size: medium;

}
ol.enumerate {
margin-top: 0.7ex;
margin-bottom: 0.7ex;
margin-left: 3ex;
text-align: left;

}
div.toc {
  margin: 2em 0em;
  border-style: solid;
  border-width: 2px 0px;
  padding: 1em 0em;
}
h2.tochead { font-size: x-large; font-weight: bold; }
div.lyxtoc-0 {
  margin: 2em 0em 0em 0em;
  font-size: xx-large;
  font-weight: bold;
}
div.lyxtoc-1 {
  margin: 1em 0em 0em 0em;
  font-size: x-large;
  font-weight: bold;
}
div.lyxtoc-2 {
  margin: 0em 0.1em 0em 1em;
  font-size: large;
  font-weight: normal;
}
div.lyxtoc-3 { margin: 0em 0.1em 0em 0.5em; font-size: medium; }
div.lyxtoc-4 { margin: 0em 0.1em 0em 0.5em; }
div.lyxtoc-5 { margin: 0em 0.1em 0em 0.5em; }
div.lyxtoc-6 { margin: 0em 0.1em 0em 0.5em; }
a.tocentry {
  text-decoration: none;
  color: black;
}
a.tocentry:visited { color: black; }
span.flex_url {
font-family: monospace;
}
span.flex_newthought {
font-style: normal;
font-variant: small-caps;
}
span.noun {
	font-family: sans-serif;
}
span.index {
font-size: small;
}
div.marginal {
	border: 2px solid black;
	padding: 1ex;
	margin: 1ex;
	background-color: #F0F0F0;
	float:right;
	font-size: small;
	font-weight: medium;
	font-family: serif;
	font-variant: normal;
	font-style: normal;
}
span.foot_label {
	vertical-align: super;
	font-size: smaller;
	font-weight: bold;
	text-decoration: underline;
}
div.foot {
	display: inline;
	font-size: small;
	font-weight: medium;
	font-family: serif;
	font-variant: normal;
	font-style: normal;
}
div.foot_inner { display: none; }
div.foot:hover div.foot_inner {
	display: block;
	border: 1px double black;
	margin: 0em 1em;
	padding: 1em;
}
div.float {
	border: 2px solid black;
	text-align: center;
}
div.float-caption {
	text-align: center;
	border: 2px solid black;
	padding: 1ex;
	margin: 1ex;
}
table {
	border-collapse: collapse;
	display: inline-block;
}
td {
	border: 1px solid black;
	padding: 0.5ex;
}
code.flex_code {
font-family: monospace;
}
div.float-listings {
	border: 2px solid black;
	padding: 1ex;
	margin: 1ex;
}
div.listings-caption {
	text-align: center;
	border: 2px solid black;
	padding: 1ex;
	margin: 1ex;
	}
strong.flex_strong {
font-weight: bold;
}


</style>
</head>
<body dir="auto">
<h1 class="title" id='magicparlabel-29111'>Operating Systems:
<br />

From 0 to 1</h1>
<div class="author" id='magicparlabel-29112'>Tu, Do Hoang</div>
<div class="standard" id='magicparlabel-29113'><br />
</div>




<div class='toc'><h2 class='tochead chapter'>Table of Contents</h2>

<div class='lyxtoc-1'><a href='#magicparlabel-29127' class='tocentry'><em>Preface</em></a>
</div>
</div>

<div class='lyxtoc-0'><a href='#magicparlabel-29224' class='tocentry'>Part I Preliminary</a>


<div class='lyxtoc-1'><a href='#magicparlabel-29225' class='tocentry'>Domain documents</a>
</div>

<div class='lyxtoc-1'><a href='#magicparlabel-30300' class='tocentry'>Computer Architecture</a>
</div>

<div class='lyxtoc-1'><a href='#magicparlabel-30777' class='tocentry'>x86 Assembly and C</a>
</div>

<div class='lyxtoc-1'><a href='#magicparlabel-39711' class='tocentry'>The Anatomy of a Program</a>
</div>

<div class='lyxtoc-1'><a href='#magicparlabel-42806' class='tocentry'>Runtime inspection and debug</a>
</div>
</div>

<div class='lyxtoc-0'><a href='#magicparlabel-45320' class='tocentry'>Part II Groundwork </a>


<div class='lyxtoc-1'><a href='#magicparlabel-45321' class='tocentry'>Bootloader</a>
</div>

<div class='lyxtoc-1'><a href='#magicparlabel-46507' class='tocentry'>Linking and loading on bare metal</a>
</div>
</div>

<div class='lyxtoc-0'><a href='#magicparlabel-49045' class='tocentry'>Part III Kernel Programming</a>


<div class='lyxtoc-1'><a href='#magicparlabel-49046' class='tocentry'>x86 Descriptors</a>
</div>

<div class='lyxtoc-1'><a href='#magicparlabel-49086' class='tocentry'>Process</a>
</div>

<div class='lyxtoc-1'><a href='#magicparlabel-49138' class='tocentry'>Interrupt</a>
</div>

<div class='lyxtoc-1'><a href='#magicparlabel-49139' class='tocentry'>Memory management</a>
</div>

<div class='lyxtoc-1'><a href='#magicparlabel-49151' class='tocentry'>File System</a>
</div>

<div class='lyxtoc-1'><a href='#magicparlabel-49163' class='tocentry'>Bibliography<!-- Output Error: Closing tag `a' when other tags are pending. Discarded pending tags:
&lt;em&gt;
 -->
</a>
</div>
</div>



<h1 class="chapter_" id='magicparlabel-29127'><em>Preface</em></h1>

<div class="standard" id='magicparlabel-29128'><br />

</div>

<div class="standard" style='text-align: left;' id='magicparlabel-29133'>Greetings!</div>

<div class="standard" id='magicparlabel-29134'>You've probably asked yourself at least once how an operating system is written from the ground up. You might even have years of programming experience under your belt, yet your understanding of operating systems may still be a collection of abstract concepts not grounded in actual implementation. To those who've never built one, an operating system may seem like magic: a mysterious thing that can control hardware while handling a programmer's requests via the API of their favorite programming language. Learning how to build an operating system seems intimidating and difficult; no matter how much you learn, it never feels like you know enough. You're probably reading this book right now to gain a better understanding of operating systems to be a better software engineer.</div>

<div class="standard" id='magicparlabel-29135'>If that is the case, this book is for you. By going through this book, you will be able to find the missing pieces that are essential and enable you to implement your own operating system from scratch! Yes, from scratch without going through any existing operating system layer to prove to yourself that you are an operating system developer. You may ask,&ldquo;Isn't it more practical to learn the internals of Linux?&rdquo;.</div>

<div class="standard" id='magicparlabel-29136'>Yes...</div>

<div class="standard" id='magicparlabel-29137'>and no.</div>

<div class="standard" id='magicparlabel-29138'>Learning Linux can help your workflow at your day job. However, if you follow that route, you still won't achieve the ultimate goal of writing an actual operating system. By writing your own operating system, you will gain knowledge that you will not be able to glean just from learning Linux.</div>

<div class="standard" id='magicparlabel-29139'>Here's a list of some benefits of writing your own OS:</div>

<ul class="itemize" id='magicparlabel-29140'><li class="itemize_item">You will learn how a computer works at the hardware level, and you will learn to write software to manage that hardware directly.</li>
<li class="itemize_item">You will learn the fundamentals of operating systems, allowing you to adapt to any operating system, not just Linux</li>
<li class="itemize_item">To hack on Linux internals suitably, you'll need to write at least one operating system on your own. This is just like applications programming: to write a large application, you'll need to start with simple ones.</li>
<li class="itemize_item">You will open pathways to various low-level programming domains such as reverse engineering, exploits, building virtual machines, game console emulation and more. Assembly language will become one of your most indispensable tools for low-level analysis. (But that does not mean you have to write your operating system in Assembly!)</li>
<li class="itemize_item">Writing an operating system is fun!</li>
</ul>
<h2 class="section_" id='magicparlabel-29145'><em>Why another book on Operating Systems?</em></h2>
<div class="standard" id='magicparlabel-29146'>There are many books and courses on this topic made by famous professors and experts out there already. Who am I to write a book on such an advanced topic? While it's true that many quality resources exist, I find them lacking. Do any of them show you how to compile your C code and the C runtime library independent of an existing operating system? Most books on operating system design and implementation only discuss the software side; how the operating system communicates with the hardware is skipped. Important hardware details are skipped, and it's difficult for a self-learner to find relevant resources on the Internet. The aim of this book is to bridge that gap: not only will you learn how to program hardware directly, but also how to read official documents from hardware vendors to program it. You no longer have to seek out resources to help yourself interpret hardware manuals and documentation: you can do it yourself. Lastly, I wrote this book from an autodidact's perspective. I made this book as self-contained as possible so you can spend more time learning and less time guessing or seeking out information on the Internet.</div>

<div class="standard" id='magicparlabel-29147'>One of the core focuses of this book is to guide you through the process of reading official documentation from vendors to implement your software. Official documents from hardware vendors like Intel are critical for implementing an operating system or any other software that directly controls the hardware. At a minimum, an operating system developer needs to be able to comprehend these documents and implement software based on a set of hardware requirements. Thus, the first chapter is dedicated to discussing relevant documents and their importance.</div>

<div class="standard" id='magicparlabel-29148'>Another distinct feature of this book is that it is &ldquo;Hello World&rdquo; centric. Most examples revolve around variants of a &ldquo;Hello World&rdquo; program, which will acquaint you with core concepts. These concepts must be learned before attempting to write an operating system. Anything beyond a simple &ldquo;Hello World&rdquo; example gets in the way of teaching the concepts, thus lengthening the time spent on getting started writing an operating system. </div>

<div class="standard" id='magicparlabel-29149'>Let's dive in. With this book, I hope to provide enough foundational knowledge that will open doors for you to make sense of other resources. This book is will be especially beneficial to students who've just finished their first C/C++ course. Imagine how cool it would be to show prospective employers that you've already built an operating system.</div>
<h2 class="section_" id='magicparlabel-29150'><em>Prerequisites</em></h2>

<ul class="itemize" id='magicparlabel-29151'><li class="itemize_item">Basic knowledge of circuits
<br />



<ul class="itemize" id='magicparlabel-29152'><li class="itemize_item">Basic Concepts of Electricity: atoms, electrons, proton, neutron, current flow.</li>
<li class="itemize_item">Ohm's law</li>
</ul>
<div class="standard" id='magicparlabel-29154'>If you are unfamiliar with these concepts, you can quickly learn them here: <span class="flex_url">http://www.allaboutcircuits.com/textbook/</span>, by reading chapter 1 and chapter 2.</div>
</li><li class="itemize_item">C programming. In particular:
<br />



<ul class="itemize" id='magicparlabel-29160'><li class="itemize_item">Variable and function declarations/definitions</li>
<li class="itemize_item">While and for loops</li>
<li class="itemize_item">Pointers and function pointers</li>
<li class="itemize_item">Fundamental algorithms and data structures in C</li>
</ul>
</li><li class="itemize_item">Linux basics: 
<br />



<ul class="itemize" id='magicparlabel-29165'><li class="itemize_item">Know how to navigate directory with the command line</li>
<li class="itemize_item">Know how to invoke a command with options</li>
<li class="itemize_item">Know how to pipe output to another program</li>
</ul>
</li><li class="itemize_item">Touch typing. Since we are going to use Linux, touch typing helps. I know typing speed does not relate to problem-solving, but at least your typing speed should be fast enough not to let it get in the way and degrade the learning experience.</li>
</ul>
<div class="standard" id='magicparlabel-29169'>In general, I assume that the reader has basic C programming knowledge, and can use an IDE to build and run a program.</div>
<h2 class="section_" id='magicparlabel-29170'><em>What you will learn in this book </em></h2>

<ul class="itemize" id='magicparlabel-29171'><li class="itemize_item">How to write an operating system from scratch by reading hardware datasheets. In the real world, you will not be able to consult Google for a quick answer. </li>
<li class="itemize_item">Write code independently. It's pointless to copy and paste code. Real learning happens when you solve problems on your own. Some examples are provided to help kick start your work, but most problems are yours to conquer. However, the solutions are available online for you after giving a good try.</li>
<li class="itemize_item">A big picture of how each layer of a computer related to each other, from hardware to software.</li>
<li class="itemize_item">How to use Linux as a development environment and common tools for low-level programming.</li>
<li class="itemize_item">How a program is structured so that an operating system can run.</li>
<li class="itemize_item">How to debug a program running directly on hardware with <span style='font-family:monospace;'>gdb</span> and QEMU.</li>
<li class="itemize_item">Linking and loading on bare metal x86_64, with pure C. No standard library. No runtime overhead.</li>
</ul>
<h2 class="section_" id='magicparlabel-29178'><em>What this book is not about</em></h2>

<ul class="itemize" id='magicparlabel-29179'><li class="itemize_item"><span class="flex_newthought">Electrical Engineering</span>: The book discusses some concepts from electronics and electrical engineering only to the extent of how software operates on bare metal.</li>
<li class="itemize_item"><span class='noun'>How to use Linux or any OS types of books</span>: Though Linux is used as a development environment and as a medium to demonstrate high-level operating system concepts, it is not the focus of this book.</li>
<li class="itemize_item"><span class='noun'>Linux Kernel development</span>: There are already many high-quality books out there on this subject.</li>
<li class="itemize_item"><span class='noun'>Operating system books focused on algorithms</span>: This book focuses more on actual hardware platform - Intel x86_64 - and how to write an OS that utilizes of OS support from the hardware platform.</li>
</ul>
<h2 class="section_" id='magicparlabel-29199'>The organization of the book</h2>

<dl class='description' id='magicparlabel-29200'><dt class="description_label">Part&nbsp;1</dt>
<dd class="description_item"> provides a foundation for learning operating system.
<br />



<ul class="itemize" id='magicparlabel-29201'><li class="itemize_item">Chapter 1 briefly explains the importance of domain documents. Documents are crucial for the learning experience, so they deserve a chapter.</li>
<li class="itemize_item">Chapter 2 explains the layers of abstractions from hardware to software. The idea is to provide insight into how code runs physically.</li>
<li class="itemize_item">Chapter 3 provides the general architecture of a computer, then introduces a sample computer model that you will use to write an operating system.</li>
<li class="itemize_item">Chapter 4 introduces the x86 assembly language through the use of the Intel manuals, along with commonly used instructions. This chapter gives detailed examples of how high-level syntax corresponds to low-level assembly, enabling you to read generated assembly code comfortably. It is necessary to read assembly code when debugging an operating system.</li>
<li class="itemize_item">Chapter 5 dissects ELF in detail. Only by understanding how the structure of a program at the binary level, you can build one that runs on bare metal.</li>
<li class="itemize_item">Chapter 6 introduces <span style='font-family:monospace;'>gdb</span> debugger with extensive examples for commonly used commands. After acquainting the reader with <span style='font-family:monospace;'>gdb</span>, it then provides insight on how a debugger works. This knowledge is essential for building a debuggable program on the bare metal. </li>
</ul>
</dd><dt class="description_label">Part&nbsp;2</dt>
<dd class="description_item"> presents how to write a bootloader to bootstrap a kernel. Hence the name <em>&ldquo;Groundwork&rdquo;</em>. After mastering this part, the reader can continue with the next part, which is a guide for writing an operating system. However, if the reader does not like the presentation, he or she can look elsewhere, such as OSDev Wiki: <span class="flex_url">http://wiki.osdev.org/</span>. 
<br />



<ul class="itemize" id='magicparlabel-29212'><li class="itemize_item">Chapter 7 introduces what the bootloader is, how to write one in assembly, and how to load it on QEMU, a hardware emulator. This process involves typing repetitive and long commands, so GNU Make is applied to improve productivity by automating the repetitive parts and simplifying the interaction with the project. This chapter also demonstrates the use of GNU Make in context.</li>
<li class="itemize_item">Chapter 8 introduces linking by explaining the relocation process when combining object files. In addition to a bootloader and an operating system written in C, this is the last piece of the puzzle required for building debuggable programs on bare metal, including the bootloader written in Assembly and an operating system written in C.</li>
</ul>
</dd><dt class="description_label">Part&nbsp;3</dt>
<dd class="description_item"> provides guidance on how to write an operating system, as you should implement an operating system on your own and be proud of your creation. The guidance consists of simpler and coherent explanations of necessary concepts, from hardware to software, to implement the features of an operating system. Without such guidance, you will waste time gathering information spread through various documents and the Internet. It then provides a plan on how to map the concepts to code.</dd>
</dl>
<h2 class="section_" id='magicparlabel-29215'><em>Acknowledgments</em></h2>
<div class="standard" id='magicparlabel-29216'>Thank you, my beloved family. Thank you, the contributors.</div>


<h1 class="part" id='magicparlabel-29224'><span class="part_label">Part I</span> Preliminary</h1>
<div class="chapter" id='magicparlabel-29225'>Domain documents</div>
<div class="section" id='magicparlabel-29226'>Problem domains</div>
<div class="standard" id='magicparlabel-29227'>In the real world, software engineering is not only focused on software, but also the problem domain it is trying to solve. </div>

<blockquote class="quote" id='magicparlabel-29228'><div class="quote_item">A <em><a id='magicparlabel-29232' />
<div class="marginal"><div class="plain_layout" id='magicparlabel-29236'><em><b>problem domain</b></em></div>
</div>problem domain</em> is <em>the part of the world</em> where the computer is to produce effects, together with the means available to produce them, directly or indirectly. (<a href='#LyXCite-Kovitz_psr'><span class="bib-abbrvciteauthor">Kovitz</span>, <span class="bib-year">1999</span></a>)</div>
</blockquote>
<div class="standard" id='magicparlabel-29237'>A <em>problem domain<a id='magicparlabel-29241' />
</em> is anything outside of programming that a software engineer needs to understand to produce correct code that can achieve the desired effects. &ldquo;Directly&rdquo; means include anything that the software can control to produce the desired effects, e.g. keyboards, printers, monitors, other software, etc. &ldquo;Indirectly&rdquo; means anything not part of the software but relevant to the problem domain e.g. appropriate people to be informed by the software when some event happens, students that move to correct classrooms according to the schedule generated by the software. To write a finance application, a software engineer needs to learn sufficient finance concepts to understand the <div class="marginal"><div class="plain_layout" id='magicparlabel-29245'><b>requirements</b></div>
</div><em><a id='magicparlabel-29249' />
requirements </em>of a customer and implement such requirements, correctly.</div>

<blockquote class="quote" id='magicparlabel-29250'><div class="quote_item">Requirements are the effects that the machine is to exert in the problem domain by virtue of its programming.</div>
</blockquote>
<div class="standard" id='magicparlabel-29251'>Programming alone is not too complicated; programming to solve a problem domain, is <div class="foot"><span class="foot_label">1</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-29255'>We refer to the concept of &ldquo;programming&rdquo; here as someone able to write code in a language, but not necessary know any or all software engineering knowledge.</div>
</div></div>. Not only a software engineer needs to understand how to implement the software, but also the problem domain that it tries to solve, which might require in-depth expert knowledge. The software engineer must also select the right programming techniques that apply to the problem domain he is trying to solve because many techniques that are effective in one domain might not be in another. For example, many types of applications do not require performant written code, but a short time to market. In this case, interpreted languages are widely popular because it can satisfy such need. However, for writing huge 3D games or operating system, compiled languages are dominant because it can generate the most efficient code required for such applications.</div>

<div class="standard" id='magicparlabel-29256'>Often, it is too much for a software engineer to learn non-trivial domains (that might require a bachelor degree or above to understand the domains). Also, it is easier for a <em><a id='magicparlabel-29260' />
domain expert</em> to learn enough programming to break down the problem domain into parts small enough for the software engineers to implement. Sometimes, domain experts implement the software themselves.</div>


<div class='float-figure'><div class="plain_layout" id='magicparlabel-29265'><span class='float-caption-Standard float-caption float-caption-standard'>Figure 0.1:  Problem domains: Software and Non-software.</span></div>

<div class="plain_layout" id='magicparlabel-29270'><img src='0_img_01_domains_general.png' alt='image: 0_img_01_domains_general.png' />
</div>
</div>


<div class="standard" id='magicparlabel-29271'>One example of such scenario is the domain that is presented in this book: <em>operating system</em>. A certain amount of electrical engineering (EE) knowledge is required to implement an operating system. If a computer science (CS) curriculum does not include minimum EE courses, students in the curriculum have little chance to implement a working operating system. Even if they can implement one, either they need to invest a significant amount of time to study on their own, or they fill code in a predefined framework just to understand high-level algorithms. For that reason, EE students have an easier time to implement an OS, as they only need to study a few core CS courses. In fact, only <em>&ldquo;C programming&rdquo;</em> and <em>&ldquo;Algorithms and Data Structures&rdquo;</em> classes are usually enough to get them started writing code for device drivers, and later generalize it into an <em>operating system.</em></div>




<div class='float-figure'><div class="plain_layout" id='magicparlabel-29277'><span class='float-caption-Standard float-caption float-caption-standard'>Figure 0.2:  Operating System domain.</span></div>

<div class="plain_layout" id='magicparlabel-29282'><img src='1_img_01_domains_os_example.png' alt='image: 1_img_01_domains_os_example.png' />
</div>
</div>


<div class="standard" id='magicparlabel-29283'>One thing to note is that software is its own problem domain. A problem domain does not necessarily divide between software and itself. Compilers, 3D graphics, games, cryptography, artificial intelligence, etc., are parts of software engineering domains (actually it is more of a computer science domain than a software engineering domain). In general, a software-exclusive domain creates software to be used by other software. Operating System is also a domain, but is overlapped with other domains such as electrical engineering. To effectively implement an operating system, it is required to learn enough of the external domain. How much learning is enough for a software engineer? At the minimum, a software engineer should be knowledgeable enough to understand the documents prepared by hardware engineers for using (i.e. programming) their devices.</div>

<div class="standard" id='magicparlabel-29284'>Learning a programming language, even C or Assembly, does not mean a software engineer can automatically be good at hardware programming or any related low-level programming domains. One can spend 10 years, 20 years or his entire life writing C/C++ code, and he still cannot write an operating system, simply because of the ignorance of relevant domain knowledge. Just like learning English does not mean a person automatically becomes good at reading Math books written in English. Much more than that is needed. Knowing one or two programming languages is not enough. If a programmer writes software for a living, he had better be specialized in one or two problem domains outside of software if he does not want his job taken by domain experts who learn programming in their spare time.</div>
<div class="section" id='magicparlabel-29285'>Documents for implementing a problem domain</div>
<div class="standard" id='magicparlabel-29286'>Documents are essential for learning a problem domain (and actually, anything) since information can be passed down in a reliable way. It is evident that this written text has been used for thousands of years to pass knowledge from generation to generation. Documents are integral parts of non-trivial projects. Without the documents:</div>

<ul class="itemize" id='magicparlabel-29287'><li class="itemize_item">New people will find it much harder to join a project.</li>
<li class="itemize_item">It is harder to maintain a project because people may forget important unresolved bugs or quirks in their system.</li>
<li class="itemize_item">It is challenging for customers to understand the product they are going to use. However, documents do not need to be written in book format. It can be anything from HTML format to database format to be displayed by a graphical user interface. Important information must be stored somewhere safe, readily accessible.</li>
</ul>
<div class="standard" id='magicparlabel-29290'>There are many types of documents. However, to facilitate the understanding of a problem domain, these two documents need to be written: <em>software requirement document</em> and <em>software specification</em>. </div>
<div class="subsection" id='magicparlabel-29291'>Software Requirement Document</div>
<div class="standard" id='magicparlabel-29292'><em><a id='magicparlabel-29296' />
<div class="marginal"><div class="plain_layout" id='magicparlabel-29300'><em><b>Software requirement</b></em></div>
</div>Software requirement document</em> includes both a list of requirements and a description of the problem domain (<a href='#LyXCite-Kovitz_psr'><span class="bib-abbrvciteauthor">Kovitz</span>, <span class="bib-year">1999</span></a>).</div>

<div class="standard" id='magicparlabel-29301'>A software solves a business problem. But, which problems to solve, are requested by a customer. Many of these requests make a list of requirements that our software needs to fulfill. However, an enumerated list of features is seldom useful in delivering software. As stated in the previous section, the tricky part is not programming alone but programming according to a problem domain. The bulk of software design and implementation depends upon the knowledge of the problem domain. The better understood the domain, the higher quality software can be. For example, building a house is practiced over thousands of years and is well understood, and it is easy to build a high-quality house; software is no different. Code that is difficult to understand is usually due to the author's ignorance of a problem domain. In the context of this book, we seek to understand the low-level working of various hardware devices.</div>

<div class="standard" id='magicparlabel-29302'>Because software quality depends upon the understanding of the problem domain, the amount of software requirement document should consist of problem domain description.</div>

<div class="standard" id='magicparlabel-29303'>Be aware that software requirements are not:</div>

<dl class='description' id='magicparlabel-29304'><dt class="description_label">What&nbsp;vs&nbsp;How
<br />

</dt>
<dd class="description_item">
<div class="standard" id='magicparlabel-29305'>&ldquo;what&rdquo; and &ldquo;how&rdquo; are vague terms. What is the &ldquo;what&rdquo;? Is it nouns only? If so, what if a customer requires his software to perform specific steps of operations, such as purchasing procedure for a customer on a website. Does it include &ldquo;verbs&rdquo; now? However, isn't the &ldquo;how&rdquo; supposed to be step by step operations? Anything can be the &ldquo;what&rdquo; and anything can be the &ldquo;how&rdquo;. </div>
</dd><dt class="description_label">Sketches
<br />

</dt>
<dd class="description_item">
<div class="standard" id='magicparlabel-29307'>Software requirement document is all about the problem domain. It should not be a high-level description of an implementation. Some problems might seem straightforward to map directly from its domain description to the structure of an implementation. For example:</div>

<ul class="itemize" id='magicparlabel-29308'><li class="itemize_item">Users are given a list of books in a <em><b>drop-down menu</b></em> to choose. </li>
<li class="itemize_item">Books are stored in a <em><b>linked list</b></em>&rdquo;. </li>
<li class="itemize_item">etc</li>
</ul>
<div class="standard" id='magicparlabel-29311'>In the future, instead of a drop-down menu, all books are listed directly on a page in thumbnails. Books might be reimplemented as a graph, and each node is a book for finding related books, as a recommender is going to be added in the next version. The requirement document needs updating again to remove all the outdated implementation details, thus required additional efforts to maintain the requirement document, and when the effort for syncing with the implementation is too much, the developers give up documentation, and everyone starts ranting how useless documentation is. </div>

<div class="standard" id='magicparlabel-29312'>More often than not there is no straightforward one-to-one mapping. For example, a regular computer user expects an OS to be something that runs some program with GUI, or their favorite computer games. But for such requirements, an operating system is implemented as multiple layers, each hiding the details from the upper layers. To implement an operating system, a large body of knowledge from multiple fields is required, especially if the operating system runs on non-PC devices. </div>

<div class="standard" id='magicparlabel-29313'>It's best to include information related to the problem domain in the requirement document. A good way to test the quality of a requirement document is to provide it to a domain expert for proofreading, to ensure he can understand the material thoroughly. A requirement document is also useful as a help document later, or for writing one much easier.</div>
</dd></dl>
<div class="subsection" id='magicparlabel-29314'>Software Specification</div>
<div class="standard" id='magicparlabel-29315'><em><a id='magicparlabel-29319' />
</em><div class="marginal"><div class="plain_layout" id='magicparlabel-29323'><em><b>Software specification</b></em></div>
</div><em>Software specification</em> document states rules relating desired behavior of the output devices to all possible behavior of the input devices, as well as any rules that other parts of the problem domain must obey.<a href='#LyXCite-Kovitz_psr'><span class="bib-abbrvciteauthor">Kovitz</span></a> (<span class="bib-year">1999</span>)</div>

<div class="standard" id='magicparlabel-29324'>Simply put, software specification is interface design, with constraints for the problem domain to follow e.g. the software can accept certain types of input such as the software is designed to accept English but no other language. For a hardware device, a specification is always needed, as software depends on its hardwired behaviors. And in fact, it is mostly the case that hardware specifications are well-defined, with the tiniest details in it. It needs to be that way because once hardware is physically manufactured, there's no going back, and if defects exist, it's a devastating damage to the company on both finance and reputation.</div>

<div class="standard" id='magicparlabel-29325'>Note that, similar to a requirement document, a specification only concerns interface design. If implementation details leak in, it is a burden to sync between the actual implementation and the specification, and soon to be abandoned.</div>

<div class="standard" id='magicparlabel-29326'>Another important remark is that, though a specification document is important, it does not have to be produced <em>before</em> the implementation. It can be prepared in any order: before or after a complete implementation; or at the same time with the implementation, when some part is done, and the interface is ready to be recorded in the specification. Regardless of methods, what matter is a complete specification at the end.</div>
<div class="section" id='magicparlabel-29327'>Documents for writing an x86 Operating System</div>
<div class="standard" id='magicparlabel-29328'>When problem domain is different from software domain, requirement document and specification are usually separated. However, if the problem domain is inside software, specification most often includes both, and content of both can be mixed with each other. As demonstrated by previous sections the importance of documents, to implement an OS, we will need to collects relevant documents to gain sufficient domain knowledge. These documents are as follow:</div>

<ul class="itemize" id='magicparlabel-29329'><li class="itemize_item">Intel® 64 and IA-32 Architectures Software Developer’s Manual (Volume 1, 2, 3)</li>
<li class="itemize_item">Intel® 3 Series Express Chipset Family Datasheet</li>
<li class="itemize_item">System V Application Binary Interface</li>
</ul>
<div class="standard" id='magicparlabel-29332'>Aside from the Intel's official website, the website of this book also hosts the documents for convenience<div class="foot"><span class="foot_label">2</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-29336'>Intel may change the links to the documents as they update their website, so this book doesn't contain any link to the documents to avoid confusion for readers.</div>
</div></div>.</div>

<div class="standard" id='magicparlabel-29337'>Intel documents divide the requirement and specification sections clearly, but call the sections with different names. The corresponding to the requirement document is a section called <em>&ldquo;Functional Description&rdquo;</em>, which consists mostly of domain description; for specification, <em>&ldquo;Register Description&rdquo;</em> section describes all programming interfaces. Both documents carry no unnecessary implementation details<div class="foot"><span class="foot_label">3</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-29341'>As it should be, those details are trade secret.</div>
</div></div>. Intel documents are also great examples of how to write well requirements/specifications, as explained in this chapter.</div>

<div class="standard" id='magicparlabel-29342'>Other than the Intel documents, other documents will be introduced in the relevant chapters.</div>



<div class="standard" id='magicparlabel-29348'>This chapter gives an intuition on how hardware and software connected together, and how software is represented physically.</div>
<div class="section" id='magicparlabel-29349'>The physical implementation of a bit</div>
<div class="standard" id='magicparlabel-29350'>All electronic devices, from simple to complex, manipulate this flow to achieve desired effects in the real world. Computers are no exception. When we write software, we indirectly manipulate electrical current at the physical level, in such a way that the underlying machine produces desired effects. To understand the process, we consider a simple light bulb. A light bulb can change two states between on and off with a switch, periodically: an off means number 0, and an on means 1.</div>
<div class='float-marginfigure'><div class="plain_layout" id='magicparlabel-29354'><span class='float-caption-Standard float-caption float-caption-standard'>MarginFigure 1:  A lightbulb</span></div>

<div class="plain_layout" id='magicparlabel-29359'><img style='width:15%;' src='2_img_02_bulb.svg' alt='image: 2_img_02_bulb.svg' />
</div>
</div>


<div class="standard" id='magicparlabel-29360'>However, one problem is that such a switch requires manual intervention from a human. What is required is an automatic switch based on the voltage level, as described above. To enable automatic switching of electrical signals, a device called <em>transistor</em>, invented by William Shockley, John Bardeen and Walter Brattain. This invention started the whole computer industry. </div>

<div class="standard" id='magicparlabel-29361'>At the core, a <em><div class="marginal"><div class="plain_layout" id='magicparlabel-29365'><em><b>transistor</b></em></div>
</div>transistor<a id='magicparlabel-29369' />
</em> is just a resistor whose values can vary based on an input voltage value. With this property, a transistor can be used as a current amplifier (more voltage, less resistance) or switch electrical signals off and on (block and unblock an electron flow) based on a voltage level. At 0&thinsp;v, no current can pass through a transistor, thus it acts like a circuit with an open switch (light bulb off) because the resistor value is enough to block the electrical flow. Similarly, at +3.5&thinsp;v, current can flow through a transistor because the resistor value is lessened, effectively enables electron flow, thus acts like a circuit with a closed switch.<div class="marginal"><div class="plain_layout" id='magicparlabel-29382'>If you want a deeper explanation of transistors e.g. how electrons move, you should look at the video &ldquo;How semiconductors work&rdquo; on Youtube, by Ben Eater.</div>
</div></div>
<div class='float-marginfigure'><div class="plain_layout" id='magicparlabel-29373'><span class='float-caption-Standard float-caption float-caption-standard'>MarginFigure 2:  Modern transistor</span></div>

<div class="plain_layout" id='magicparlabel-29378'><img style='width:25%;' src='3_img_02_transistor.svg' alt='image: 3_img_02_transistor.svg' />
</div>
</div>


<div class="standard" id='magicparlabel-29383'>A bit has two states: 0 and 1, which is the building block of all digital systems and software. Similar to a light bulb that can be turned on and off, bits are made out of this electrical stream from the power source: Bit 0 are represented with 0&thinsp;v (no electron flow), and bit 1 is +3.5&thinsp;v to +5&thinsp;v (electron flow). Transistor implements a bit correctly, as it can regulate the electron flow based on voltage level. </div>
<div class="subsection" id='magicparlabel-29384'>MOSFET transistors</div>
<div class="standard" id='magicparlabel-29385'>The classic transistors invented open a whole new world of micro digital devices. Prior to the invention, vacuum tubes - which are just fancier light bulbs - were used to present 0 and 1, and required human to turn it on and off. <div class="marginal"><div class="plain_layout" id='magicparlabel-29389'><em><b>MOSFET</b></em></div>
</div><em><a id='magicparlabel-29393' />
MOSFET</em>, or <em><b>M</b>etal–<b>O</b>xide–<b>S</b>emiconductor <b>F</b>ield-<b>E</b>ffect <b>T</b>ransistor</em>, invented in 1959 by Dawon Kahng and Martin M. (John) Atalla at Bell Labs, is an improved version of classic transistors that is more suitable for digital devices, as it requires shorter switching time between two states 0 and 1, more stable, consumes less power and easier to produce.</div>

<div class="standard" id='magicparlabel-29394'>There are also two types of MOSFETs analogous to two types of transistors: n-MOSFET and p-MOSFET. n-MOSFET and p-MOSFET are also called NMOS and PMOS transistors for short.</div>
<div class="section" id='magicparlabel-29395'>Beyond transistors: digital logic gates</div>
<div class="standard" id='magicparlabel-29396'>All digital devices are designed with logic gates. A <em><a id='magicparlabel-29400' />
</em><div class="marginal"><div class="plain_layout" id='magicparlabel-29404'><em><b>logic gate</b></em></div>
</div><em>logic gate</em> is a device that implements a boolean function. Each logic gate includes a number of inputs and an output. All computer operations are built from the combinations of logic gates, which are just combinations of boolean functions. </div>
<div class='float-marginfigure'><div class="plain_layout" id='magicparlabel-29408'><span class='float-caption-Standard float-caption float-caption-standard'>MarginFigure 3:  Example: NAND gate</span></div>

<div class="plain_layout" id='magicparlabel-29413'><img style='width:30%;' src='4_img_02_Nand-gate.svg' alt='image: 4_img_02_Nand-gate.svg' />
</div>


</div>

<div class="subsection" id='magicparlabel-29415'>The theory behind logic gates</div>
<div class="standard" id='magicparlabel-29416'>Logic gates accept only binary inputs<div class="foot"><span class="foot_label">4</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-29420'>Input that is either a 0 or 1.</div>
</div></div> and produce binary outputs. In other words, logic gates are functions that transform binary values. Fortunately, a branch of math that deals exclusively with binary values already existed, called <em>Boolean Algebra</em>, developed in the 19<sup class="script_superscript">th</sup>century by George Boole. With a sound mathematical theory as a foundation logic gates were created<em>. </em>As logic gates implement Boolean functions, a set of Boolean functions is <a id='magicparlabel-29428' />
<div class="marginal"><div class="plain_layout" id='magicparlabel-29432'><em><b>functionally complete</b></em></div>
</div><em>functionally complete</em>, if this set can construct all other Boolean functions can be constructed from. Later, Charles Sanders Peirce (during 1880 – 1881) proved that either Boolean function of NOR or NAND alone is enough to create all other Boolean logic functions. Thus NOR and NAND gates are functionally complete <a href='#LyXCite-Peirce'><span class="bib-abbrvciteauthor">Peirce</span></a> (<span class="bib-year">1933</span>). Gates are simply the implementations of Boolean logic functions, therefore NAND or NOR gate is enough to implement <em><b>all</b></em> other logic gates. The simplest gates CMOS circuit can implement are inverters (NOT gates) and from the inverters, comes NAND gates. With NAND gates, we are confident to implement everything else. This is why the inventions of transistors, then CMOS circuit revolutionized computer industry.<div class="marginal"><div class="plain_layout" id='magicparlabel-29436'>If you want to understand why and how from NAND gate we can create all Boolean functions and a computer, I suggest the course <em>Build a Modern Computer from First Principles: From Nand to Tetris </em>available on Coursera: <span class="flex_url">https://www.coursera.org/learn/build-a-computer</span>. Go even further, after the course, you should take the series <em>Computational Structures</em> on Edx.</div>
</div></div>

<div class="standard" id='magicparlabel-29441'>We should realize and appreciate how powerful boolean functions are available in all programming languages.</div>
<div class="subsection" id='magicparlabel-29442'>Logic Gate implementation: CMOS circuit</div>
<div class="standard" id='magicparlabel-29443'>Underlying every logic gate is a circuit called <em><b><div class="marginal"><div class="plain_layout" id='magicparlabel-29447'><em><b>CMOS</b></em></div>
</div>CMOS</b></em><a id='magicparlabel-29451' />
 - <em><b>C</b>omplementary <b>MOS</b>FET</em>. CMOS consists of two complementary transistors, <em>NMOS</em> and <em>PMOS. </em>The simplest CMOS circuit is an inverter or a <em>NOT</em> gate:</div>

<div class="standard" id='magicparlabel-29452'><div style='height:1em'></div></div>

<div class="standard" id='magicparlabel-29453'><br />
</div>



<div class="standard" id='magicparlabel-29464'>From NOT gate, a NAND gate can be created:</div>



<div class="standard" id='magicparlabel-29479'>From NAND gate, we have all other gates. As demonstrated, such a simple circuitry performs the logical operators in day-to-day program languages e.g. NOT operator <span style='font-family:monospace;'>~</span> is executed directly by an inverter circuit, and operator <span style='font-family:monospace;'>&amp;</span> is executed by an AND circuit and so on. Code does not run on a magic black box. In contrast, code execution is precise and transparent, often as simple as running some hardwired circuit. When we write software, we simply manipulate electrical current at the physical level to run appropriate circuits to produce desired outcomes. However, this whole process somehow does not relate to any thought involving electrical current. That is the real magic and will be explained soon.</div>

<div class="standard" id='magicparlabel-29480'>One interesting property of CMOS is that <em><b>a k-input gate uses k PMOS and k NMOS transistors</b></em> (<a href='#LyXCite-John_digital'><span class="bib-abbrvciteauthor">Wakerly</span>, <span class="bib-year">1999</span></a>). All logic gates are built by pairs of NMOS and PMOS transistors, and gates are the building blocks of all digital devices from simple to complex, including any computer. Thanks to this pattern, it is possible to separate between the actual physical circuit implementation and logical implementation. Digital designs are done by designing with logic gates then later be &ldquo;compiled&rdquo; into physical circuits. In fact, later we will see that logic gates become a language that describes how circuits operate. Understanding how CMOS works is important to understand how a computer is designed, and as a consequence, how a computer works<div class="foot"><span class="foot_label">5</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-29484'>Again, if you want to understand how logic gates make a computer, consider the suggested courses on Coursera and Edx earlier. </div>
</div></div>.</div>

<div class="standard" id='magicparlabel-29485'>Finally, an implemented circuit with its wires and transistors is stored physically in a package called a <em>chip</em>. A <em>chip<a id='magicparlabel-29489' />
</em> is a substrate that an integrated circuit is etched onto. However, a chip also refers to a completely packaged integrated circuit in consumer market. Depends on the context, it is understood differently.
<br />

</div>


<div class='float-marginfigure'><div class="plain_layout" id='magicparlabel-29494'><span class='float-caption-Standard float-caption float-caption-standard'>MarginFigure 4:  74HC00 chip physical view</span></div>

<div class="plain_layout" id='magicparlabel-29499'><img style='width:60%;' src='5_img_02_74hc00_nxp_physical.jpg' alt='image: 5_img_02_74hc00_nxp_physical.jpg' />
</div>
</div>


<div class="standard" style='text-align: left;' id='magicparlabel-29500'><hr />

</div>

<div class="example" id='magicparlabel-29501'><div class="example_item"><span class="example_label">Example 0.1.</span>
74HC00 is a chip with four 2-input NAND gates. The chip comes with 8 input pins and 4 output pins, 1 pin for connecting to a voltage source and 1 pin for connecting to the ground. This device is the physical implementation of NAND gates that we can physically touch and use. But instead of just a single gate, the chip comes with 4 gates that can be combined. Each combination enables a different logic function, effective creating other logic gates. This feature is what make the chip popular. 
<br />

</div>

<div class='float-figure'><div class="plain_layout" id='magicparlabel-29506'><span class='float-caption-Standard float-caption float-caption-standard'>Figure 0.3:  74HC00 logic diagrams (Source: 74HC00 datasheet, <span class="flex_url">http://www.scrpdf.com/pdf/Semiconductors_new/Logic/74HCT/74HC_HCT00.pdf</span>)</span></div>

<div class="plain_layout" id='magicparlabel-29515'></div>
<div class='float-figure'><div class="plain_layout" id='magicparlabel-29519'><span class='float-caption-Standard float-caption float-caption-standard'>Sub-Figure a:  Logic diagram of 74HC00</span></div>

<div class="plain_layout" id='magicparlabel-29524'><img src='6_img_02_7400_block_diagram.png' alt='image: 6_img_02_7400_block_diagram.png' />
</div>
</div>
<div class='float-figure'><div class="plain_layout" id='magicparlabel-29528'><span class='float-caption-Standard float-caption float-caption-standard'>Sub-Figure b:  Logic diagram of one NAND gate</span></div>

<div class="plain_layout" id='magicparlabel-29533'><img src='7_img_02_7400_logic_diagram.png' alt='image: 7_img_02_7400_logic_diagram.png' />
</div>
</div>

</div>


<div class="standard" id='magicparlabel-29534'>Each of the gates above is just a simple NAND circuit with the electron flows, as demonstrated earlier. Yet, many these NAND-gates chips combined can build a simple computer. Software, at the physical level, is just electron flows.</div>



<div class="standard" id='magicparlabel-29550'>How can the above gates be created with 74HC00? It is simple: as every gate has 2 input pins and 1 output pin, we can write the output of 1 NAND gate to an input of another NAND gate, thus chaining NAND gates together to produce the diagrams as above.
<br />

</div>
</div>
<div class="standard" style='text-align: left;' id='magicparlabel-29551'><hr />

</div>
<div class="section" id='magicparlabel-29552'>Beyond Logic Gates: Machine Language</div>
<div class="subsection" id='magicparlabel-29553'>Machine language</div>
<div class="standard" id='magicparlabel-29554'>Being built upon gates, as gates only accept a series of 0 and 1, a hardware device only understands 0 and 1. However, a device only takes 0 and 1 in a systematic way. <em><div class="marginal"><div class="plain_layout" id='magicparlabel-29558'><em><b>Machine language</b></em></div>
</div>Machine language<a id='magicparlabel-29562' />
</em> is a collection of unique bit patterns that a device can identify and perform a corresponding action. A <em>machine instruction</em> is a unique bit pattern that a device can identify. In a computer system, a device with its language is called <em><b>CPU</b> - <b>C</b>entral <b>P</b>rocessing <b>U</b>nit</em>, which controls all activities going inside a computer. For example, in the x86 architecture, the pattern <span style='font-family:monospace;'>10100000</span> means telling a CPU to add two numbers, or <span style='font-family:monospace;'>000000101</span> to halt a computer. In the early days of computers, people had to write completely in binary.</div>

<div class="standard" id='magicparlabel-29563'>Why does such a bit pattern cause a device to do something? The reason is that underlying each instruction is a small circuit that implements the instruction. Similar to how a function/subroutine in a computer program is called by its name, a bit pattern is a name of a little function inside a CPU that got executed when the CPU finds one.</div>

<div class="standard" id='magicparlabel-29564'>Note that CPU is not the only device with its language. CPU is just a name to indicate a hardware device that controls a computer system. A hardware device may not be a CPU but still has its language. A device with its own machine language is a <em>programmable device</em>, since a user can use the language to command the device to perform different actions. For example, a printer has its set of commands for instructing it how to prints a page.
<br />

</div>

<div class="standard" style='text-align: left;' id='magicparlabel-29565'><hr />

</div>

<div class="example" id='magicparlabel-29566'><div class="example_item"><span class="example_label">Example 0.2.</span>
<a id="exa_74HC00_chip_can" />
A user can use 74HC00 chip without knowing its internal, but only the interface for using the device. First, we need to know its layout:
<br />

</div>

<div class='float-figure'><div class="plain_layout" id='magicparlabel-29571'><span class='float-caption-Standard float-caption float-caption-standard'>Figure 0.4:  74HC00 Pin Layout (Source: 74HC00 datasheet, <span class="flex_url">http://www.nxp.com/documents/data_sheet/74HC_HCT00.pdf</span>)</span></div>

<div class="plain_layout" id='magicparlabel-29580'><img src='8_img_02_7400_pin_configuration.png' alt='image: 8_img_02_7400_pin_configuration.png' />
</div>
</div>


<div class="standard" id='magicparlabel-29581'>Then, the functionality of each pin:</div>


<div class='float-table'><div class="plain_layout" id='magicparlabel-29586'><span class='float-caption-Standard float-caption float-caption-standard'>Table 1:  Pin Description (Source: 74HC00 datasheet, <span class="flex_url">http://www.nxp.com/documents/data_sheet/74HC_HCT00.pdf</span>)</span></div>



<div class="plain_layout" id='magicparlabel-29595'><table><tbody><tr><td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29623'><b>Symbol</b></div>
</td>
<td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29626'><b>Pin</b></div>
</td>
<td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29629'><b>Description</b></div>
</td>
</tr><tr><td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29632'>1A to 4A</div>
</td>
<td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29635'>1, 4, 9, 12 </div>
</td>
<td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29638'>data input</div>
</td>
</tr><tr><td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29641'>1B to 4B</div>
</td>
<td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29644'>2, 5, 10, 13</div>
</td>
<td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29647'>data input</div>
</td>
</tr><tr><td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29650'>1Y to 4Y</div>
</td>
<td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29653'>3, 6, 8, 11</div>
</td>
<td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29656'>data output</div>
</td>
</tr><tr><td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29659'>GND</div>
</td>
<td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29662'>7</div>
</td>
<td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29665'>ground (0&thinsp;V)</div>
</td>
</tr><tr><td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29668'>V<sub class="script_subscript">cc</sub></div>
</td>
<td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29679'>14</div>
</td>
<td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29682'>supply voltage</div>
</td>
</tr></tbody>
</table>
</div>
</div>


<div class="standard" id='magicparlabel-29683'>Finally, how to use the pins:</div>


<div class='float-table'><div class="plain_layout" id='magicparlabel-29688'><span class='float-caption-Standard float-caption float-caption-standard'>Table 2:  Functional Description</span></div>



<div class="plain_layout" id='magicparlabel-29693'><table><tbody><tr><td style ="width: 3cm;" align='left' valign='top' colspan='2'>
<div class="plain_layout" id='magicparlabel-29718'><b>Input</b></div>
</td>
<td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29724'><b>Output</b></div>
</td>
</tr><tr><td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29727'><b>nA</b></div>
</td>
<td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29730'><b>nB</b></div>
</td>
<td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29733'><b>nY</b></div>
</td>
</tr><tr><td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29736'>L</div>
</td>
<td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29739'>X</div>
</td>
<td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29742'>H</div>
</td>
</tr><tr><td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29745'>X</div>
</td>
<td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29748'>L</div>
</td>
<td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29751'>H</div>
</td>
</tr><tr><td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29754'>H</div>
</td>
<td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29757'>H</div>
</td>
<td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29760'>L</div>
</td>
</tr></tbody>
</table>
</div>
</div>



<div class="standard" id='magicparlabel-29761'><div class="marginal"><ul class="itemize" id='magicparlabel-29765'><li class="itemize_item">n is a number, either 1, 2, 3, or 4</li>
<li class="itemize_item">H = HIGH voltage level; L = LOW voltage level; X = don’t care.</li>
</ul>
</div>The functional description provides a truth table with all possible pin inputs and outputs, which also describes the usage of all pins in the device. A user needs not to know the implementation, but on such a table to use the device. We can say that the truth table above is the machine language of the device. Since the device is digital, its language is a collection of binary strings:</div>

<ul class="itemize" id='magicparlabel-29767'><li class="itemize_item">The device has 8 input pins, and this means it accepts binary strings of 8 bits.</li>
<li class="itemize_item">The device has 4 output pins, and this means it produces binary strings of 4 bits from the 8-bit inputs.</li>
</ul>
<div class="standard" id='magicparlabel-29769'>The number of input strings is what the device understand, and the number of output strings is what the device can speak. Together, they make the language of the device. Even though this device is simple, yet the language it can accept contains quite many binary strings: <math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mrow>
   <msup>
    <mrow><mn>2</mn>
    </mrow>
    <mrow><mn>8</mn>
    </mrow>
   </msup><mo>+</mo>
   <msup>
    <mrow><mn>2</mn>
    </mrow>
    <mrow><mn>4</mn>
    </mrow>
   </msup><mo>=</mo><mn>272</mn>
  </mrow>
 </mrow></math>. However, the number is a tiny fraction of a complex device like a CPU, with hundreds of pins.</div>

<div class="standard" id='magicparlabel-29770'>When leaving as is, 74HC00 is simply a NAND device with two 4-bit inputs<div class="foot"><span class="foot_label">6</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-29774'>Or simply 4-bit NAND gate, as it can only accept 4 bits of input at the maximum.</div>
</div></div>. </div>



<div class="standard" id='magicparlabel-29775'><table><tbody><tr><td align='left' valign='top'>

</td>
<td align='center' valign='top' colspan='8'>
<div class="plain_layout" id='magicparlabel-29837'>Input</div>
</td>
<td align='center' valign='top' colspan='4'>
<div class="plain_layout" id='magicparlabel-29861'><b>Output</b></div>
</td>
</tr><tr><td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29873'><b>Pin</b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-29876'><b><span style='font-family:monospace;'>1A</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-29879'><b><span style='font-family:monospace;'>1B</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-29882'><b><span style='font-family:monospace;'>2A</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-29885'><b><span style='font-family:monospace;'>2B</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-29888'><b><span style='font-family:monospace;'>3A</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-29891'><b><span style='font-family:monospace;'>3B</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-29894'><b><span style='font-family:monospace;'>4A</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-29897'><b><span style='font-family:monospace;'>4B</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-29900'><b><span style='font-family:monospace;'>1Y</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-29903'><b><span style='font-family:monospace;'>2Y</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-29906'><b><span style='font-family:monospace;'>3Y</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-29909'><b><span style='font-family:monospace;'>4Y</span></b></div>
</td>
</tr><tr><td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-29912'><b>Value</b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-29915'><span style='font-family:monospace;'>1</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-29918'><span style='font-family:monospace;'>1</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-29921'><span style='font-family:monospace;'>0</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-29924'><span style='font-family:monospace;'>0</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-29927'><span style='font-family:monospace;'>1</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-29930'><span style='font-family:monospace;'>1</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-29933'><span style='font-family:monospace;'>0</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-29936'><span style='font-family:monospace;'>0</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-29939'><span style='font-family:monospace;'>0</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-29942'><span style='font-family:monospace;'>1</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-29945'><span style='font-family:monospace;'>0</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-29948'><span style='font-family:monospace;'>1</span></div>
</td>
</tr></tbody>
</table>
</div>

<div class="standard" id='magicparlabel-29949'><div style='height:3ex'></div></div>

<div class="standard" id='magicparlabel-29950'>The inputs and outputs as visually presented:</div>




<div class='float-figure'><div class="plain_layout" id='magicparlabel-29956'><span class='float-caption-Standard float-caption float-caption-standard'>Figure 0.5:  Pins when receiving digital signals that correspond to a binary string. Green signals are inputs; blue signals are outputs.</span><img src='9_img_02_7400_bin_string1.png' alt='image: 9_img_02_7400_bin_string1.png' />
</div>
</div>


<div class="standard" id='magicparlabel-29961'>On the other hand, if OR gate is implemented, we can only build a 2-input OR gate from 74HC00, as it requires 3 NAND gates: 2 input NAND gates and 1 output NAND gate. Each input NAND gate represents only a 1-bit input of the OR gate. In the following figure, the pins of each input NAND gates are always set to the same values (either both inputs are A or both inputs are B) to represent a single bit input for the final OR gate:</div>



<div class="standard" id='magicparlabel-29974'><div style='height:5ex'></div></div>
<div class='float-margintable'><div class="plain_layout" id='magicparlabel-29978'><span class='float-caption-Standard float-caption float-caption-standard'>MarginTable 1:  Truth table of OR logic diagram.</span></div>

<div class="plain_layout" id='magicparlabel-29983'>

<table><tbody><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30020'><b>A</b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30023'><b>B</b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30026'><b>C</b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30029'><b>D</b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30032'><b>Y</b></div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30035'><span style='font-family:monospace;'>0</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30038'><span style='font-family:monospace;'>0</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30041'><span style='font-family:monospace;'>1</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30044'><span style='font-family:monospace;'>1</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30047'>0</div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30050'><span style='font-family:monospace;'>0</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30053'><span style='font-family:monospace;'>1</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30056'><span style='font-family:monospace;'>1</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30059'><span style='font-family:monospace;'>0</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30062'>1</div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30065'><span style='font-family:monospace;'>1</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30068'><span style='font-family:monospace;'>0</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30071'><span style='font-family:monospace;'>0</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30074'><span style='font-family:monospace;'>1</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30077'>1</div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30080'><span style='font-family:monospace;'>1</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30083'><span style='font-family:monospace;'>1</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30086'><span style='font-family:monospace;'>0</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30089'><span style='font-family:monospace;'>0</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30092'>1</div>
</td>
</tr></tbody>
</table>
</div>
</div>

</div>
<div class="standard" style='text-align: left;' id='magicparlabel-30093'><hr />

</div>

<div class="standard" id='magicparlabel-30094'>To implement a 4-bit OR gate, we need a total of four of 74HC00 chips configured as OR gates, packaged as a single chip as in figure <a href="#or_chip_74hc00">I</a>.</div>


<div class='float-figure'><div class="plain_layout" id='magicparlabel-30099'><span class='float-caption-Standard float-caption float-caption-standard'>Figure 0.6:  4-bit OR chip made from four 74HC00 devices</span><a id="or_chip_74hc00" />
</div>

<div class="plain_layout" id='magicparlabel-30104'><img style='width:41%;' src='10_img_02_4-bit-or-gate-layout.png' alt='image: 10_img_02_4-bit-or-gate-layout.png' />
</div>
</div>

<div class="subsection" id='magicparlabel-30105'>Assembly Language</div>
<div class="standard" id='magicparlabel-30106'>Assembly language is the symbolic representation of binary machine code, by giving bit patterns mnemonic names. It was a vast improvement when programmers had to write 0 and 1. For example, instead of writing <span style='font-family:monospace;'>000000101</span>, a programmer simply write <span style='font-family:monospace;'>hlt</span> to stop a computer. Such an abstraction makes instructions executed by a CPU easier to remember, and thus more instructions could be memorized, less time spent looking up CPU manual to find instructions in bit forms and as a result, code was written faster.</div>

<div class="standard" id='magicparlabel-30107'>Understand assembly language is crucial for low-level programming domains, even to this day. The more instructions a programmer want to understand, the deeper understanding of machine architecture is required.</div>

<div class="example" id='magicparlabel-30108'><div class="example_item"><span class="example_label">Example 0.3.</span>
We can build a device with 2 assembly instructions:
<br />

</div>

<div class="lyx_code" id='magicparlabel-30109'><div class="lyx_code_item">or   &lt;op1&gt;, &lt;op2&gt;</div>
<div class="lyx_code_item">nand &lt;op1&gt;, &lt;op2&gt;</div>
</div>

<ul class="itemize" id='magicparlabel-30111'><li class="itemize_item"><span style='font-family:monospace;'>or</span> accepts two 4-bit operands. This corresponds to a 4-input OR gate device built from 4 74HC00 chips.</li>
<li class="itemize_item"><span style='font-family:monospace;'>nand</span> accepts two 4-bit operands. This corresponds to a single 74HC00 chips, leave as is.</li>
</ul>
<div class="standard" id='magicparlabel-30113'>Essentially, the gates in the example <a href="#exa_74HC00_chip_can">0.2</a> implements the instructions. Up to this point, we only specify input and output and manually feed it to a device. That is, to perform an operation:</div>

<ul class="itemize" id='magicparlabel-30114'><li class="itemize_item">Pick a device by hands.</li>
<li class="itemize_item">Manually put electrical signals into pins.</li>
</ul>
<div class="standard" id='magicparlabel-30116'>First, we want to automate the process of device selection. That is, we want to simply write assembly instruction and the device that implements the instruction is selected correctly. Solving this problem is easy:</div>

<ul class="itemize" id='magicparlabel-30117'><li class="itemize_item">Give each instruction an index in binary code, called <em>operation code</em> or <em>opcode</em> for short, and embed it as part of input. The value for each instruction is specified as in table <a href="#ex_ins_ops">Part \Roman{part}</a>.
<br />

<div class='float-margintable'><div class="plain_layout" id='magicparlabel-30121'><span class='float-caption-Standard float-caption float-caption-standard'>MarginTable 2:  Instruction-Opcode mapping.</span><a id="ex_ins_ops" />
</div>



<div class="plain_layout" style='text-align: center;' id='magicparlabel-30126'><table><tbody><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30141'><b>Instruction</b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30144'><b>Binary Code</b></div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30147'><span style='font-family:monospace;'>nand</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30150'><span style='font-family:monospace;'>00</span></div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30153'><span style='font-family:monospace;'>or</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-30156'><span style='font-family:monospace;'>01</span></div>
</td>
</tr></tbody>
</table>
</div>
</div>

<div class="standard" id='magicparlabel-30157'>Each input now contains additional data at the beginning: an opcode. For example, the instruction:</div>

<div class="lyx_code" id='magicparlabel-30158'><div class="lyx_code_item">nand 1100, 1100</div>
</div>
<div class="standard" id='magicparlabel-30159'>corresponds to the binary string: <span style='font-family:monospace;'>0011001100</span>. The first two bits <span style='font-family:monospace;'>00</span> encodes a <span style='font-family:monospace;'>nand</span> instruction, as listed in the table above.</div>
</li><li class="itemize_item">Add another device to select a device, based on a binary code peculiar to an instruction. </li>
</ul>
<div class="standard" id='magicparlabel-30161'>Such a device is called a <em>decoder</em>, an important component in a CPU that decides which circuit to use. In the above example, when feeding <span style='font-family:monospace;'>0011001100</span> to the decoder, because the opcode is <span style='font-family:monospace;'>00</span>, data are sent to NAND device for computing.</div>

<div class="standard" id='magicparlabel-30162'>Finally, writing assembly code is just an easier way to write binary strings that a device can understand. When we write assembly code and save in a text file, a program called an <em><div class="marginal"><div class="plain_layout" id='magicparlabel-30166'><em><b>assembler</b></em></div>
</div>assembler<a id='magicparlabel-30170' />
</em> translates the text file into binary strings that a device can understand. So, how can an assembler exist in the first place? Assume this is the first assembler in the world, then it is written in binary code. In the next version, life is easier: the programmers write the assembler in the assembly code, then use the first version to compile itself. These binary strings are then stored in another device that later can be retrieved and sent to a decoder. A<em> <a id='magicparlabel-30174' />
<div class="marginal"><div class="plain_layout" id='magicparlabel-30178'><em><b>storage device</b></em></div>
</div>storage device</em> is the device that stores machine instructions, which is an array of circuits for saving 0 and 1 states.</div>

<div class="standard" id='magicparlabel-30179'>A decoder is built out of logic gates similar to other digital devices. However, a storage device can be anything that can store 0 and 1 and is retrievable. A storage device can be a magnetized device that uses magnetism to store information, or it can be made out of electrical circuits using. Regardless of the technology used, as long as the device can store data and is accessible to retrieve data, it suffices. Indeed, the modern devices are so complex that it is impossible and unnecessary to understand every implementation detail. Instead, we only need to learn the interfaces, e.g. the pins, that the devices expose.</div>

<div class="standard" id='magicparlabel-30180'><div style='height:1em'></div></div>

<div class="standard" id='magicparlabel-30181'><br />
</div>

<div class="standard" id='magicparlabel-30189'>A computer essentially implements this process: </div>

<ul class="itemize" id='magicparlabel-30190'><li class="itemize_item"><em>Fetch</em> an instruction from a storage device.</li>
<li class="itemize_item"><em>Decode</em> the instruction.</li>
<li class="itemize_item"><em>Execute</em> the instruction.</li>
</ul>
<div class="standard" id='magicparlabel-30193'>Or in short, a <a id='magicparlabel-30197' />
fetch – decode – execute cycle. The above device is extremely rudimentary, but it already represents a computer with a <em>fetch</em> – <em>decode</em> – <em>execute</em> cycle. More instructions can be implemented by adding more devices and allocating more opcodes for the instructions, then update the decoder accordingly. The Apollo Guidance Computer, a digital computer produced for the Apollo space program from 1961 – 1972, was built entirely with NOR gates - the other choice to NAND gate for creating other logic gates. Similarly, if we keep improving our hypothetical device, it eventually becomes a full-fledge computer.</div>
</div>
<div class="subsection" id='magicparlabel-30198'>Programming Languages</div>
<div class="standard" id='magicparlabel-30199'>Assembly language is a step up from writing 0 and 1. As time goes by, people realized that many pieces of assembly code had repeating patterns of usages. It would be nice if instead of writing all the repeating blocks of code all over again in all places, we simply refer to such blocks of code with easier to use text forms. For example, a block of assembly code checks whether one variable is greater than another and if so, execute a block of code, else execute another block of code; in C, such block of assembly code is represented by an <code class="flex_code">if</code> statement that is close to human language. </div>


<div class='float-figure'><div class="plain_layout" id='magicparlabel-30208'><span class='float-caption-Standard float-caption float-caption-standard'>Figure 0.7:  Repeated assembly patterns are generalized into a new language.</span></div>

<div class="plain_layout" id='magicparlabel-30213'><img style='width:60%;' src='11_img_02_asm_to_proglang.png' alt='image: 11_img_02_asm_to_proglang.png' />
</div>
</div>


<div class="standard" id='magicparlabel-30214'>People created text forms to represent common blocks of assembly code, such as the <span style='font-family:monospace;'>if</span> syntax above, then write a program to translate the text forms into assembly code. The program that translates such text forms to machine code is called a <div class="marginal"><div class="plain_layout" id='magicparlabel-30218'><em><b>compiler</b></em></div>
</div><em>compiler</em><a id='magicparlabel-30222' />
:</div>



<div class="standard" id='magicparlabel-30232'>Any software logic a programming language can implement, hardware can also implement. The reverse is also true: any hardware logic that is implemented in a circuit can be reimplemented in a programming language. The simple reason is that programming languages, or assembly languages, or machine languages, or logic gates are just languages to express computations. It is impossible for software to implement something hardware is incapable of because programming language is just a simpler way to use the underlying hardware. At the end of the day, programming languages are translated to machine instructions that are valid to a CPU. Otherwise, code is not runnable, thus a useless software. In reverse, software can do everything hardware (that run the software) can, as programming languages are just an easier way to use the hardware.</div>

<div class="standard" id='magicparlabel-30233'>In reality, even though all languages are equivalent in power, not all of them are capable of express programs of each other. Programming languages vary between two ends of a spectrum: high level and low level. </div>

<div class="standard" id='magicparlabel-30234'>The higher level a programming language is, the more distant it becomes from the hardware. In some high-level programming languages, such as Python, a programmer cannot manipulate underlying hardware, despite being able to deliver the same computations as low-level programming languages. The reason is that high-level languages want to hide hardware details to free programmers from dealing with irrelevant details not related to current problem domains. Such convenience, however, is not free: it requires software to carry an extra code for managing hardware details (e.g. memory) thus making the code run slower, and it makes hardware programming difficult or impossible. The more abstractions a programming language imposes, the more difficult it is for writing low-level software, such as hardware drivers or an operating system. This is the reason why C is usually a language of choice for writing an operating system, since C is just a thin wrapper of the underlying hardware, making it easy to understand how exactly a hardware device runs when executing a certain piece of C code.</div>

<div class="standard" id='magicparlabel-30235'>Each programming language represents a way of thinking about programs. Higher-level programming languages help to focus on problem domains that are not related to hardware at all, and where programmer performance is more important than computer performance. Lower-level programming languages help to focus on the inner-working of a machine, thus are best suited for problem domains that are related to control hardware. That is why so many languages exist. Use the right tools for the right job to achieve the best results.</div>


<div class="section" id='magicparlabel-30241'>Abstraction</div>
<div class="standard" id='magicparlabel-30242'><em>Abstraction<a id='magicparlabel-30246' />
 </em>is a technique for hiding complexity that is irrelevant to the problem in context. For example, writing programs without any other layer except the lowest layer: with circuits. Not only a person needs an in-depth understanding of how circuits work, making it much more obscure to design a circuit because the designer must look at the raw circuits but think in higher-level such as logic gates. It is a distracting process, as a designer must constantly translate the idea into circuits. It is possible for a designer simply thinks his high-level ideas straight, and later translate the ideas into circuits. Not only it is more efficient, but it is also more accurate as a designer can focus all his efforts into verifying the design with high-level thinking. When a new designer arrives, he can easily understand the high-level designs, thus can continue to develop or maintain existing systems.</div>
<div class="subsection" id='magicparlabel-30247'>Why abstraction works</div>
<div class="standard" id='magicparlabel-30248'>In all the layers, abstractions manifest itself:</div>

<ul class="itemize" id='magicparlabel-30249'><li class="itemize_item">Logic gates abstract away the details of CMOS.</li>
<li class="itemize_item">Machine language abstracts away the details of logic gates.</li>
<li class="itemize_item">Assembly language abstracts away the details of machine languages.</li>
<li class="itemize_item">Programming language abstracts away the details of assembly languages.</li>
</ul>
<div class="standard" id='magicparlabel-30253'>We see repeating patterns of how lower-layers build upper-layers:</div>

<ul class="itemize" id='magicparlabel-30254'><li class="itemize_item">A lower layer has a recurring pattern. Then, this recurring pattern is taken out and built a language on top of it.</li>
<li class="itemize_item">A higher layer strips away layer-specific (non-recurring) details to focus on the recurring details.</li>
<li class="itemize_item">The recurring details are given a new and simpler language than the languages of the lower layers. </li>
</ul>
<div class="standard" id='magicparlabel-30257'>What to realize is that every layer is just<em> a more convenient language to <b>describe</b> the lower layer</em>. Only after a description is fully created with the language of the higher layer, it is then be <em>implemented</em> with the language of the lower layer.</div>

<ul class="itemize" id='magicparlabel-30258'><li class="itemize_item">CMOS layer has a recurring pattern that makes sure logic gates are reliably translated to CMOS circuits: <em><b>a k-input gate uses k PMOS and k NMOS transistors</b></em> (<a href='#LyXCite-John_digital'><span class="bib-abbrvciteauthor">Wakerly</span>, <span class="bib-year">1999</span></a>). Since digital devices use CMOS exclusively, a language arose to describe higher level ideas while hiding CMOS circuits: Logic Gates.</li>
<li class="itemize_item">Logic Gates hides the language of circuits and focuses on how to implement primitive Boolean functions and combine them to create new functions. All logic gates receive input and generate output as binary numbers. Thanks to this recurring patterns, logic gates are hidden away for the new language: Assembly, which is a set of predefined binary patterns that cause the underlying gates to perform an action.</li>
<li class="itemize_item">Soon, people realized that many recurring patterns arisen from within Assembly language. Repeated blocks of Assembly code appear in Assembly source files that express the same or similar idea. There were many such ideas that can be reliably translated into Assembly code. Thus, the ideas were extracted for building into the high level programming languages that everyone programmer learns today.</li>
</ul>
<div class="standard" id='magicparlabel-30261'>Recurring patterns are the key to abstraction. Recurring patterns are why abstraction works. Without them, no language can be built, and thus no abstraction. Fortunately, human already developed a systematic discipline for studying patterns: Mathematics. As quoted from the British mathematician G. H. Hardy (<a href='#LyXCite-Hardy'><span class="bib-year">2005</span></a>):</div>

<blockquote class="quote" id='magicparlabel-30262'><div class="quote_item">A mathematician, like a painter or a poet, is a maker of patterns. If his patterns are more permanent than theirs, it is because they are made with ideas.</div>
</blockquote>
<div class="standard" id='magicparlabel-30263'>Isn't that a mathematical formula a representation of a pattern? A variable represents values with the same properties given by constraints? Mathematics provides a formal system to identify and describe existing patterns in nature. For that reason, this system can certainly be applied in the digital world, which is just a subset of the real world. Mathematics can be used as a common language to help translation between layers easier, and help with the understanding of layers.</div>


<div class="subsection" id='magicparlabel-30274'>Why abstraction reduces complexity</div>
<div class="standard" id='magicparlabel-30275'>Abstraction by building language certainly leverages productivity by stripping irrelevant details to a problem. Imagine writing programs without any other layout except the lowest layer: with circuits. This is how complexity emerges: when high-level ideas are expressed with lower-level language, as the example above demonstrated. Unfortunately, this is the case with software as programming languages at the moment are more emphasized on software rather than the problem domains. That is, without prior knowledge, code written in a language is unable to express itself the knowledge of its target domain. In other words, <em>a language is expressive if its syntax is designed to express the problem domain it is trying to solve</em>. Consider this example: That is, the <em>what</em> it will do rather the <em>how</em> it will do.
<br />

</div>

<div class="standard" style='text-align: left;' id='magicparlabel-30276'><hr />

</div>

<div class="example" id='magicparlabel-30277'><div class="example_item"><span class="example_label">Example 0.4.</span>
Graphviz (<span class="flex_url">http://www.graphviz.org/</span>) is a visualization software that provides a language, called <span style='font-family:monospace;'>dot</span>, for describing graph:
<br />

</div>


<div class="standard" id='magicparlabel-30290'>As can be seen, the code perfectly expresses itself how the graph is connected. Even a non-programmer can understand and use such language easily. An implementation in C would be more troublesome, and that's assuming that the functions for drawing graphs are already available. To draw a line, in C we might write something like:</div>

<div class="lyx_code" id='magicparlabel-30291'><div class="lyx_code_item">draw_line(a, b);</div>
</div>
<div class="standard" id='magicparlabel-30292'>However, it is still verbose compared with:</div>

<div class="lyx_code" id='magicparlabel-30293'><div class="lyx_code_item">a -&gt; b;</div>
</div>
<div class="standard" id='magicparlabel-30294'>Also, <span style='font-family:monospace;'>a</span> and <span style='font-family:monospace;'>b</span> must be defined in C, compared to the implicit nodes in the <span style='font-family:monospace;'>dot</span> language. However, if we do not factor in the verbosity, then C still has a limitation: it cannot change its syntax to suit the problem domain. A domain-specific language might even be more verbose, but it makes a domain more understandable. If a problem domain must be expressed in C, then it is constraint by the syntax of C. Since C is not a specialized language for a problem domain that, but is a <em>general-purpose</em> programming language, the domain knowledge is buried within the implementation details. As a result, a C programmer is needed to decipher and extract the domain knowledge out. If the domain knowledge cannot be extracted, then the software cannot be further developed.</div>
</div>

<div class="standard" id='magicparlabel-30295'><br />

</div>

<div class="example" id='magicparlabel-30296'><div class="example_item"><span class="example_label">Example 0.5.</span>
Linux is full of applications controlled by many domain-specific languages and are placed in <span style='font-family:monospace;'>/etc</span> directory, such as a web server. Instead of reprogramming the software, a domain-agnostic language is made for it.</div>
</div>
<div class="standard" style='text-align: left;' id='magicparlabel-30297'><hr />

</div>

<div class="standard" id='magicparlabel-30298'>In general, code that can express a problem domain must be understandable by a domain expert. Even within the software domain, building a language out of repeated programming patterns is useful. It helps people aware the existence of such patterns in code and thus making software easier to maintain, as software structure is visible as a language. Only a programming language that is capable of morphing itself to suit a problem domain can achieve that goal. Such language is called a <em>programmable programming language</em>. Unfortunately, this approach of turning software structure visible is not favored among programmers, as a new language must be made out of it along with new toolchain to support it. Thus, software structure and domain knowledge are buried within code written in the syntax of a general-purpose language, and if a programmer is not familiar or even aware of the existence of a code pattern, then it is hopeless to understand the code. A prime example is reading C code that controls hardware, e.g. an operating system: if a programmer knows absolutely nothing about hardware, then it is impossible to read and write operating system code in C, even if he could have 20 years of writing application C code.</div>

<div class="standard" id='magicparlabel-30299'>With abstraction, a software engineer can also understand the inner-working of a device without specialized knowledge of physical circuit design, enables the software engineer to write code that controls a device. The separation between logical and physical implementation also entails that gate designs can be reused even when the underlying technologies changed. For example, in some distant future biological computer could be a reality, and gates might not be implemented as CMOS but some kind of biological cells e.g. as living cells; in either technology: electrical or biological, as long as logic gates are physically realized, the same computer design could be implemented.</div>
<div class="chapter" id='magicparlabel-30300'>Computer Architecture</div>
<div class="standard" id='magicparlabel-30301'>To write lower level code, a programmer must understand the architecture of a computer. It is similar to when one writes programs in a software framework, he must know what kinds of problems the framework solves, and how to use the framework by its provided software interfaces. But before getting to the definition of what computer architecture is, we must understand what exactly is a computer, as many people still think that a computer is a regular computer we put on a desk, or at best, a server. Computers come in various shapes and sizes and are devices that people never imagine they are computers, and that code can run on such devices. </div>
<div class="section" id='magicparlabel-30302'>What is a computer?</div>
<div class="standard" id='magicparlabel-30303'>A <em><div class="marginal"><div class="plain_layout" id='magicparlabel-30307'><em><b>computer</b></em></div>
</div>computer<a id='magicparlabel-30311' />
</em> is a hardware device that consists of at least a processor (CPU), a memory device and input/output interfaces. All the computers can be grouped into two types:</div>

<dl class='description' id='magicparlabel-30312'><dt class="description_label">Single-purpose&nbsp;computer</dt>
<dd class="description_item"> is a computer built at the <em>hardware level</em> for specific tasks. For example, dedicated application encoders/decoders , timer, image/video/sound processors.</dd>
<dt class="description_label">General-purpose&nbsp;computer</dt>
<dd class="description_item"> is a computer that can be programmed (without modifying its hardware) to emulate various features of single-purpose computers.</dd>
</dl>
<div class="subsection" id='magicparlabel-30314'>Server</div>
<div class="standard" id='magicparlabel-30315'>A <em><a id='magicparlabel-30319' />
<div class="marginal"><div class="plain_layout" id='magicparlabel-30323'><em><b>server</b></em></div>
</div>server</em> is a general-purpose high-performance computer with huge resources to provide large-scale services for a broad audience. The audience are people with their personal computer connected to a server.</div>


<div class='float-figure'><div class="plain_layout" id='magicparlabel-30328'><span class='float-caption-Standard float-caption float-caption-standard'>Figure 0.8:  Blade servers. Each blade server is a computer with a modular design optimize for the use of physical space and energy. The enclosure of blade servers is called a <em>chassis</em>.(Source: <a href="https://commons.wikimedia.org/wiki/File:Wikimedia_Foundation_Servers-8055_35.jpg">Wikimedia</a>, author: Victorgrigas)</span></div>

<div class="plain_layout" id='magicparlabel-30333'><img style='width:80%;' src='12_img_03_Wikimedia_Foundation_Servers-8055_35.jpg' alt='image: 12_img_03_Wikimedia_Foundation_Servers-8055_35.jpg' />
</div>
</div>

<div class="subsection" id='magicparlabel-30334'>Desktop Computer</div>
<div class="standard" id='magicparlabel-30335'>A <em><div class="marginal"><div class="plain_layout" id='magicparlabel-30339'><em><b>desktop computer</b></em></div>
</div>desktop computer<a id='magicparlabel-30343' />
</em> is a general-purpose computer with an input and output system designed for a human user, with moderate resources enough for regular use. The input system usually includes a mouse and a keyboard, while the output system usually consists of a monitor that can display a large mount of pixels. The computer is enclosed in a chassis large enough for putting various computer components such as a processor, a motherboard, a power supply, a hard drive, etc.</div>


<div class='float-figure'><div class="plain_layout" id='magicparlabel-30348'><span class='float-caption-Standard float-caption float-caption-standard'>Figure 0.9:  A typical desktop computer.</span></div>

<div class="plain_layout" id='magicparlabel-30353'><img style='width:50%;' src='13_img_03_computer-158675.svg' alt='image: 13_img_03_computer-158675.svg' />
</div>
</div>

<div class="subsection" id='magicparlabel-30354'>Mobile Computer</div>
<div class="standard" id='magicparlabel-30355'>A <em><a id='magicparlabel-30359' />
<div class="marginal"><div class="plain_layout" id='magicparlabel-30363'><em><b>mobile computer</b></em></div>
</div>mobile computer</em> is similar to a desktop computer with fewer resources but can be carried around.</div>


<div class="subsection" id='magicparlabel-30377'>Game Consoles</div>
<div class="standard" id='magicparlabel-30378'>Game consoles are similar to desktop computers but are optimized for gaming. Instead of a keyboard and a mouse, the input system of a game console are game controllers, which is a device with a few buttons for controlling on-screen objects; the output system is a television. The chassis is similar to a desktop computer but is smaller. Game consoles use custom processors and graphic processors but are similar to ones in desktop computers. For example, the first Xbox uses a custom Intel Pentium III processor.</div>



<div class="standard" id='magicparlabel-30393'>Handheld game consoles are similar to game consoles, but incorporate both the input and output systems along with the computer in a single package.</div>


<div class="subsection" id='magicparlabel-30405'>Embedded Computer</div>
<div class="standard" id='magicparlabel-30406'>An <em><div class="marginal"><div class="plain_layout" id='magicparlabel-30410'><em><b>embedded computer</b></em></div>
</div>embedded computer<a id='magicparlabel-30414' />
</em> is a single-board or single-chip computer with limited resources designed for integrating into larger hardware devices. </div>
<div class='float-marginfigure'><div class="plain_layout" id='magicparlabel-30418'><span class='float-caption-Standard float-caption float-caption-standard'>MarginFigure 5:  An Intel 82815 Graphics and Memory Controller Hub embedded on a PC motherboard. (Source: <a href="https://commons.wikimedia.org/wiki/File:Intel_82815_GMCH.jpg">Wikimedia</a>, author: Qurren)</span></div>

<div class="plain_layout" id='magicparlabel-30423'><img style='width:50%;' src='14_img_03_Intel_82815_GMCH.jpg' alt='image: 14_img_03_Intel_82815_GMCH.jpg' />
</div>
</div>
<div class='float-marginfigure'><div class="plain_layout" id='magicparlabel-30427'><span class='float-caption-Standard float-caption float-caption-standard'>MarginFigure 6:  A PIC microcontroller. (Soure: <a href="http://www.microchip.com/wwwproducts/en/PIC18F4620">Microchip</a>)</span></div>

<div class="plain_layout" id='magicparlabel-30432'><img style='width:50%;' src='15_img_03_medium-PIC18F4620-PDIP-40.png' alt='image: 15_img_03_medium-PIC18F4620-PDIP-40.png' />
</div>
</div>


<div class="standard" id='magicparlabel-30433'>A<em> <div class="marginal"><div class="plain_layout" id='magicparlabel-30437'><em><b>microcontroller</b></em></div>
</div>microcontroller<a id='magicparlabel-30441' />
</em> is an embedded computer designed for controlling other hardware devices. A microcontroller is mounted on a chip. Microcontrollers are general-purpose computers, but with limited resources so that it is only able to perform one or a few specialized tasks. These computers are used for a single purpose, but they are still general-purpose since it is possible to program them to perform different tasks, depends on the requirements, without changing the underlying hardware.</div>

<div class="standard" id='magicparlabel-30442'>Another type of embedded computer is <em>system-on-chip</em>. A<em> system-on-chip<a id='magicparlabel-30446' />
</em> is a full computer on a single chip. Though a microcontroller is housed on a chip, its purpose is different: to control some hardware. A microcontroller is usually simpler and more limited in hardware resources as it specializes only in one purpose when running, whereas a system-on-chip is a general-purpose computer that can serve multiple purposes. A system-on-chip can run like a regular desktop computer that is capable of loading an operating system and run various applications. A system-on-chip typically presents in a smartphone, such as Apple A5 SoC used in Ipad2 and iPhone 4S, or Qualcomm Snapdragon used in many Android phones.</div>


<div class='float-marginfigure'><div class="plain_layout" id='magicparlabel-30451'><span class='float-caption-Standard float-caption float-caption-standard'>MarginFigure 7:  Apple A5 SoC</span></div>

<div class="plain_layout" id='magicparlabel-30456'><img src='16_img_03_128px-Apple_A5_Chip.jpg' alt='image: 16_img_03_128px-Apple_A5_Chip.jpg' />
</div>
</div>


<div class="standard" id='magicparlabel-30457'>Be it a microcontroller or a system-on-chip, there must be an environment where these devices can connect to other devices. This environment is a circuit board called a <em><a id='magicparlabel-30461' />
PCB</em> – <em><a id='magicparlabel-30465' />
<b>P</b>rinted <b>C</b>ircuit <b>B</b>oard.</em> A <em>printed circuit board<a id='magicparlabel-30469' />
</em> is a physical board that contains lines and pads to enable electron flows between electrical and electronics components. Without a PCB, devices cannot be combined to create a larger device. As long as these devices are hidden inside a larger device and contribute to a larger device that operates at a higher level layer for a higher level purpose, they are embedded devices. Writing a program for an embedded device is therefore called <em><a id='magicparlabel-30473' />
embedded programming</em>. Embedded computers are used in automatically controlled devices including power tools, toys, implantable medical devices, office machines, engine control systems, appliances, remote controls and other types of embedded systems.</div>



<div class="standard" id='magicparlabel-30488'>The line between a microcontroller and a system-on-chip is blurry. If hardware keeps evolving more powerful, then a microcontroller can get enough resources to run a minimal operating system on it for multiple specialized purposes. In contrast, a system-on-chip is powerful enough to handle the job of a microcontroller. However, using a system-on-chip as a microcontroller would not be a wise choice as price will rise significantly, but we also waste hardware resources since the software written for a microcontroller requires little computing resources.</div>
<div class="subsection" id='magicparlabel-30489'>Field Gate Programmable Array</div>
<div class="standard" id='magicparlabel-30490'><em><div class="marginal"><div class="plain_layout" id='magicparlabel-30494'><em><b>Field Programmable Gate Array</b></em></div>
</div>Field Programmable Gate Array<a id='magicparlabel-30498' />
</em> (<em><a id='magicparlabel-30502' />
FPGA</em>) is a hardware an array of reconfigurable gates that makes circuit structure programmable after it is shipped away from the factory<div class="foot"><span class="foot_label">7</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-30506'>This is why it is called <em><b>Field</b></em> Gate Programmable Array. It is changeable &ldquo;in the field&rdquo; where it is applied.</div>
</div></div>. Recall that in the previous chapter, each 74HC00 chip can be configured as a gate, and a more sophisticated device can be built by combining multiple 74HC00 chips. In a similar manner, each FPGA device contains thousands of chips called <em>logic blocks</em>, which is a more complicated chip than a 74HC00 chip that can be configured to implement a Boolean logic function. These logic blocks can be chained together to create a high-level hardware feature. This high-level feature is usually a dedicated algorithm that needs high-speed processing.</div>


<div class='float-figure'><div class="plain_layout" id='magicparlabel-30511'><span class='float-caption-Standard float-caption float-caption-standard'>Figure 0.10:  FPGA Architecture (Source: <a href="http://www.ni.com/tutorial/6097/en/">National Instruments</a>)</span></div>

<div class="plain_layout" id='magicparlabel-30516'><img style='width:80%;' src='17_img_03_fpga_400x212.jpg' alt='image: 17_img_03_fpga_400x212.jpg' />
</div>
</div>


<div class="standard" id='magicparlabel-30517'>Digital devices can be designed by combining logic gates, without regarding actual circuit components, since the physical circuits are just multiples of CMOS circuits. Digital hardware, including various components in a computer, is designed by writing code, like a regular programmer, by using a language to describe how gates are wired together. This language is called a <em>Hardware Description Language<a id='magicparlabel-30521' />
</em>. Later the hardware description is compiled to a description of connected electronic components called a <em><a id='magicparlabel-30525' />
netlist</em>, which is a more detailed description of how gates are connected.</div>

<div class="standard" id='magicparlabel-30526'>The difference between FPGA and other embedded computers is that programs in FPGA are implemented at the digital logic level, while programs in embedded computers like microcontrollers or system-on-chip devices are implemented at assembly code level. An algorithm written for a FPGA device is a description of the algorithm in logic gates, which the FPGA device then follows the description to configure itself to run the algorithm. An algorithm written for a microcontroller is in assembly instructions that a processor can understand and act accordingly. </div>

<div class="standard" id='magicparlabel-30527'>FPGA is applied in the cases where the specialized operations are unsuitable and costly to run on a regular computer such as real-time medical image processing, cruise control system, circuit prototyping, video encoding/decoding, etc. These applications require high-speed processing that is not achievable with a regular processor because a processor wastes a significant amount of time in executing many non-specialized instructions - which might add up to thousands of instructions or more - to implement a specialized operation, thus more circuits at physical level to carry the same operation. A FPGA device carries no such overhead; instead, it runs a single specialized operation implemented in hardware directly.</div>
<div class="subsection" id='magicparlabel-30528'>Application-Specific Integrated Circuit</div>
<div class="standard" id='magicparlabel-30529'>An <em><a id='magicparlabel-30533' />
<b>A</b>pplication-<b>S</b>pecific <b>I</b>ntegrated <b>C</b>ircuit</em> (or <em>ASIC<b><a id='magicparlabel-30537' />
</b></em>) is a chip designed for a particular purpose rather than for general-purpose use. ASIC does not contain a generic array of logic blocks that can be reconfigured to adapt to any operation like an FPGA; instead, every logic block in an ASIC is made and optimized for the circuit itself. FPGA can be considered as the prototyping stage of an ASIC, and ASIC as the final stage of circuit production. ASIC is even more specialized than FPGA, so it can achieve even higher performance. However, ASICs are very costly to manufacture and once the circuits are made, if design errors happen, everything is thrown away, unlike the FPGA devices which can simply be reprogrammed because of the generic gate array.</div>
<div class="section" id='magicparlabel-30538'>Computer Architecture</div>
<div class="standard" id='magicparlabel-30539'>The previous section examined various classes of computers. Regardless of shapes and sizes, every computer is designed for an architect from high level to low level.</div>

<div class="standard" id='magicparlabel-30540'><math display="block" xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mrow><mi>C</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mspace width="6px" /><mi>A</mi><mi>r</mi><mi>c</mi><mi>h</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>e</mi><mo>=</mo><mi>I</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mspace width="6px" /><mi>S</mi><mi>e</mi><mi>t</mi><mspace width="6px" /><mi>A</mi><mi>r</mi><mi>c</mi><mi>h</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>e</mi><mo>+</mo><mi>C</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mspace width="6px" /><mi>O</mi><mi>r</mi><mi>g</mi><mi>a</mi><mi>n</mi><mi>i</mi><mi>z</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>+</mo><mi>H</mi><mi>a</mi><mi>r</mi><mi>d</mi><mi>w</mi><mi>a</mi><mi>r</mi><mi>e</mi>
  </mrow>
 </mrow></math></div>

<div class="standard" id='magicparlabel-30541'>At the highest-level is the Instruction Set Architecture.</div>

<div class="standard" id='magicparlabel-30542'>At the middle-level is the Computer Organization.</div>

<div class="standard" id='magicparlabel-30543'>At the lowest-level is the Hardware.</div>
<div class="subsection" id='magicparlabel-30544'>Instruction Set Architecture</div>
<div class="standard" id='magicparlabel-30545'>An <em>instruction set<a id='magicparlabel-30549' />
 </em>is the basic set of commands and instructions that a microprocessor understands and can carry out. </div>

<div class="standard" id='magicparlabel-30550'>An <em><b>I</b>nstruction <b>S</b>et <b>A</b>rchitecture</em><a id='magicparlabel-30554' />
, or <em><a id='magicparlabel-30558' />
<b>ISA</b></em>, is the design of an environment that implements an instruction set. Essentially, a runtime environment similar to those interpreters of high-level languages. The design includes all the instructions, registers, interrupts, memory models (how memory are arranged to be used by programs), addressing modes, I/O, etc., of a CPU. The more features (e.g. more instructions) a CPU has, the more circuits are required to implement it. </div>
<div class="subsection" id='magicparlabel-30559'>Computer organization</div>
<div class="standard" id='magicparlabel-30560'><em><div class="marginal"><div class="plain_layout" id='magicparlabel-30564'><em><b>Computer organization</b></em></div>
</div>Computer organization<a id='magicparlabel-30568' />
</em> is the functional view of the design of a computer. In this view, hardware components of a computer are presented as boxes with input and output that connects to each other and form the design of a computer. Two computers may have the same ISA, but different organizations. For example, both AMD and Intel processors implement x86 ISA, but the hardware components of each processor that make up the environments for the ISA are not the same.</div>

<div class="standard" id='magicparlabel-30569'>Computer organizations may vary depend on a manufacturer's design, but they are all originated from the Von Neumann architecture<div class="foot"><span class="foot_label">8</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-30573'><em>John von Neumann</em> was a mathematician and physicist who invented a computer architecture.</div>
</div></div>:</div>


<div class='float-figure'><div class="plain_layout" id='magicparlabel-30578'><span class='float-caption-Standard float-caption float-caption-standard'>Figure 0.11:  Von-Neumann Architecture</span></div>

<div class="plain_layout" id='magicparlabel-30583'> <img style='width:50%;' src='18_img_03_von_neumann_architecture.png' alt='image: 18_img_03_von_neumann_architecture.png' />
 </div>
</div>


<dl class='description' id='magicparlabel-30584'><dt class="description_label">CPU<a id='magicparlabel-30588' />
</dt>
<dd class="description_item"> fetches instructions continuously from main memory and execute.</dd>
<dt class="description_label">Memory<a id='magicparlabel-30593' />
</dt>
<dd class="description_item"> stores program code and data.</dd>
<dt class="description_label">Bus<a id='magicparlabel-30598' />
</dt>
<dd class="description_item"> are electrical wires for sending raw bits between the above components.</dd>
<dt class="description_label">I/O&nbsp;Devices<a id='magicparlabel-30603' />
</dt>
<dd class="description_item"> are devices that give input to a computer i.e. keyboard, mouse, sensor, etc, and takes the output from a computer i.e. monitor takes information sent from CPU to display it, LED turns on/off according to a pattern computed by CPU, etc.</dd>
</dl>
<div class="standard" id='magicparlabel-30604'>The Von-Neumann computer operates by storing its instructions in main memory, and CPU repeatedly fetches those instructions into its internal storage for executing, one after another. Data are transferred through a data bus between CPU, memory and I/O devices, and where to store in the devices is transferred through the address bus by the CPU. This architecture completely implements the <em><a id='magicparlabel-30608' />
fetch – decode – execute</em> cycle.</div>

<div class="standard" id='magicparlabel-30609'>The earlier computers were just the exact implementations of the Von Neumann architecture, with CPU and memory and I/O devices communicate through the same bus. Today, a computer has more buses, each is specialized in a type of traffic. However, at the core, they are still Von Neumann architecture. To write an OS for a Von Neumann computer, a programmer needs to be able to understand and write code that controls the cores components: CPU, memory, I/O devices, and bus.</div>

<div class="standard" id='magicparlabel-30610'><em><a id='magicparlabel-30614' />
<b>CPU</b></em>, or <em><b>C</b>entral <b>P</b>rocessing <b>U</b>nit</em><a id='magicparlabel-30618' />
, is the heart and brain of any computer system. Understand a CPU is essential to writing an OS from scratch:</div>

<ul class="itemize" id='magicparlabel-30619'><li class="itemize_item">To use these devices, a programmer needs to controls the CPU to use the programming interfaces of other devices. CPU is the only way, as CPU is the only direct device a programmer can use and the only device that understand code written by a programmer.</li>
<li class="itemize_item">In a CPU, many OS concepts are already implemented directly in hardware, e.g. task switching, paging. A kernel programmer needs to know how to use the hardware features, to avoid duplicating such concept in software, thus wasting computer resources.</li>
<li class="itemize_item">CPU built-in OS features boost both OS performance and developer productivity because those features are actual hardware, the lowest possible level, and developers are free to implement such features.</li>
<li class="itemize_item">To effectively use the CPU, a programmer needs to understand the documentation provided from CPU manufacturer. For example, <a href="[http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html">Intel® 64 and IA-32 Architectures Software Developer Manuals</a>.</li>
<li class="itemize_item">After understanding one CPU architecture well, it is easier to learn other CPU architectures.</li>
</ul>
<div class="standard" id='magicparlabel-30624'>A CPU is an implementation of an ISA, effectively the implementation of an assembly language (and depending on the CPU architecture, the language may vary). Assembly language is one of the interfaces that are provided for software engineers to control a CPU, thus control a computer. But how can every computer device be controlled with only the access to the CPU? The simple answer is that a CPU can communicate with other devices through these two interfaces, thus commanding them:</div>

<dl class='description' id='magicparlabel-30625'><dt class="description_label">Registers</dt>
<dd class="description_item"> <em><a id='magicparlabel-30629' />
<div class="marginal"><div class="plain_layout" id='magicparlabel-30633'><em><b>Registers</b></em></div>
</div></em>are a hardware component for high-speed data access and communication with other hardware devices. Registers allow software to control hardware directly by writing to registers of a device, or receive information from hardware device when reading from registers of a device.
<br />


<div class="standard" id='magicparlabel-30634'>Not all registers are used for communication with other devices. In a CPU, most registers are used as high-speed storage for temporary data. Other devices that a CPU can communicate always have a set of registers for interfacing with the CPU. </div>
</dd><dt class="description_label">Port</dt>
<dd class="description_item"> <em><a id='magicparlabel-30639' />
<div class="marginal"><div class="plain_layout" id='magicparlabel-30643'><em><b>Port</b></em></div>
</div></em>is a specialized register in a hardware device used for communication with other devices. When data are written to a port, it causes a hardware device to perform some operation according to values written to the port. The different between a port and a register is that port does not store data, but delegate data to some other circuit.</dd>
</dl>
<div class="standard" id='magicparlabel-30644'>These two interfaces are extremely important, as they are the only interfaces for controlling hardware with software. Writing device drivers is essentially learning the functionality of each register and how to use them properly to control the device.</div>

<div class="standard" id='magicparlabel-30645'><em><div class="marginal"><div class="plain_layout" id='magicparlabel-30649'><em><b>Memory</b></em></div>
</div>Memory<a id='magicparlabel-30653' />
</em> is a storage device that stores information. Memory consists of many cells. Each cell is a byte with its address number, so a CPU can use such address number to access an exact location in memory. Memory is where software instructions (in the form of machine language) is stored and retrieved to be executed by CPU; memory also stores data needed by some software. Memory in a Von Neumann machine does not distinguish between which bytes are data and which bytes are software instructions. It's up to the software to decide, and if somehow data bytes are fetched and executed as instructions, CPU still does it if such bytes represents valid instructions, but will produce undesirable results. To a CPU, there's no code and data; both are merely different types of data for it to act on: one tells it how to do something in a specific manner, and one is necessary materials for it to carry such action.</div>

<div class="standard" id='magicparlabel-30654'>The RAM is controlled by a device called a <em>memory controller<a id='magicparlabel-30658' />
</em>. Currently, most processors have this device embedded, so the CPU has a dedicated memory bus connecting the processor to the RAM. On older CPU<div class="foot"><span class="foot_label">9</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-30662'>Prior to the CPU's produced in 2009</div>
</div></div>, however, this device was located in a chip also known as <b>MCH</b> or <em><b>M</b>emory <b>C</b>ontroller <b>H</b>ub<a id='magicparlabel-30666' />
</em>. In this case, the CPU does not communicate directly to the RAM, but to the MCH chip, and this chip then accesses the memory to read or write data. The first option provides better performance since there is no middleman in the communications between the CPU and the memory.</div>



<div class="standard" id='magicparlabel-30679'>At the physical level, RAM is implemented as a grid of cells that each contain a transistor and an electrical device called a <em><div class="marginal"><div class="plain_layout" id='magicparlabel-30683'><em><b>capacitor</b></em></div>
</div>capacitor</em><a id='magicparlabel-30687' />
, which stores charge for short periods of time. The transistor controls access to the capacitor; when switched on, it allows a small charge to be read from or written to the capacitor. The charge on the capacitor slowly dissipates, requiring the inclusion of a refresh circuit to periodically read values from the cells and write them back after amplification from an external power source.</div>

<div class="standard" id='magicparlabel-30688'><em><a id='magicparlabel-30692' />
<div class="marginal"><div class="plain_layout" id='magicparlabel-30696'><em><b>Bus</b></em></div>
</div>Bus</em> is a subsystem that transfers data between computer components or between computers. Physically, buses are just electrical wires that connect all components together and each wire transfer a single big chunk of data. The total number of wires is called <em><a id='magicparlabel-30700' />
<div class="marginal"><div class="plain_layout" id='magicparlabel-30704'><em><b>bus width</b></em></div>
</div>bus width</em>, and is dependent on how many wires a CPU can support. If a CPU can only accept 16 bits at a time, then the bus has 16 wires connecting from a component to the CPU, which means the CPU can only retrieve 16 bits of data a time.</div>
<div class="subsection" id='magicparlabel-30705'>Hardware</div>
<div class="standard" id='magicparlabel-30706'>Hardware is a specific implementation of a computer. A line of processors implement the same instruction set architecture and use nearly identical organizations but differ in hardware implementation. For example, the Core i7 family provides a model for desktop computers that is more powerful but consumes more energy, while another model for laptops is less performant but more energy efficient. To write software for a hardware device, seldom we need to understand a hardware implementation if documents are available. Computer organization and especially the instruction set architecture are more relevant to an operating system programmer. For that reason, the next chapter is devoted to study the x86 instruction set architecture in depth.</div>
<div class="section" id='magicparlabel-30707'>x86 architecture</div>
<div class="standard" id='magicparlabel-30708'>A <em><a id='magicparlabel-30712' />
chipset</em> is a chip with multiple functions. Historically, a chipset is actually a set of individual chips, and each is responsible for a function, e.g. memory controller, graphic controllers, network controller, power controller, etc. As hardware progressed, the set of chips were incorporated into a single chip, thus more space, energy, and cost efficient. In a desktop computer, various hardware devices are connected to each other through a PCB called a <em><a id='magicparlabel-30716' />
motherboard</em>. Each CPU needs a compatible motherboard that can host it. Each motherboard is defined by its chipset model that determine the environment that a CPU can control. This environment typically consists of </div>

<ul class="itemize" id='magicparlabel-30717'><li class="itemize_item">a slot or more for CPU</li>
<li class="itemize_item">a chipset of two chips which are the Northbridge and Southbridge chips
<br />



<ul class="itemize" id='magicparlabel-30719'><li class="itemize_item">Northbridge chip is responsible for the high-performance communication between CPU, main memory and the graphic card. </li>
<li class="itemize_item">Southbridge chip is responsible for the communication with I/O devices and other devices that are not performance sensitive.</li>
</ul>
</li><li class="itemize_item">slots for memory sticks</li>
<li class="itemize_item">a slot or more for graphic cards. </li>
<li class="itemize_item">generic slots for other devices, e.g. network card, sound card.</li>
<li class="itemize_item">ports for I/O devices, e.g. keyboard, mouse, USB.</li>
</ul>

<div class='float-figure'><div class="plain_layout" id='magicparlabel-30729'><span class='float-caption-Standard float-caption float-caption-standard'>Figure 0.12:  Motherboard organization.</span><a id="mobo_organization" />
</div>

<div class="plain_layout" id='magicparlabel-30734'><img src='19_img_03_Motherboard_diagram.svg' alt='image: 19_img_03_Motherboard_diagram.svg' />
</div>
</div>


<div class="standard" id='magicparlabel-30735'>To write a complete operating system, a programmer needs to understand how to program these devices. After all, an operating system manages hardware automatically to free application programs doing so. However, of all the components, learning to program the CPU is the most important, as it is the component present in any computer, regardless of what type a computer is. For this reason, the primary focus of this book will be on how to program an x86 CPU. Even solely focused on this device, a reasonably good minimal operating system can be written. The reason is that not all computers include all the devices as in a normal desktop computer. For example, an embedded computer might only have a CPU and limited internal memory, with pins for getting input and producing an output; yet, operating systems were written for such devices. </div>

<div class="standard" id='magicparlabel-30736'>However, learning how to program an x86 CPU is a daunting task, with 3 primary manuals written for it: almost 500 pages for volume 1, over 2000 pages for volume 2 and over 1000 pages for volume 3. It is an impressive feat for a programmer to master every aspect of x86 CPU programming.</div>
<div class="section" id='magicparlabel-30737'>Intel Q35 Chipset</div>
<div class="standard" id='magicparlabel-30738'>Q35 is an Intel chipset released September 2007. Q35 is used as an example of a high-level computer organization because later we will use QEMU to emulate a Q35 system, which is latest Intel system that QEMU can emulate. Though released in 2007, Q35 is relatively modern to the current hardware, and the knowledge can still be reused for current chipset model. With a Q35 chipset, the emulated CPU is also relatively up-to-date with features presented in current day CPUs so we can use the latest software manuals from Intel.</div>

<div class="standard" id='magicparlabel-30739'>Figure <a href="#mobo_organization">I</a> is a typical current-day motherboard organization, in which Q35 shares similar organization.</div>
<div class="section" id='magicparlabel-30740'>x86 Execution Environment</div>
<div class="standard" id='magicparlabel-30741'>An <em>execution environment<a id='magicparlabel-30745' />
</em> is an environment that provides the facility to make code executable. The execution environment needs to address the following question:</div>

<ul class="itemize" id='magicparlabel-30746'><li class="itemize_item"><span class='noun'>Supported&nbsp;operations?</span> data transfer, arithmetic, control, floating-point, etc.</li>
<li class="itemize_item"><span class='noun'>Where are operands stored?</span> registers, memory, stack, accumulator</li>
<li class="itemize_item"><span class='noun'>How many explicit operands are there for each instruction?</span> 0, 1, 2, or 3</li>
<li class="itemize_item"><span class='noun'>How is the operand location specified?</span> register, immediate, indirect, etc.</li>
<li class="itemize_item"><span class='noun'>What type and size of operands are supported?</span> byte, int, float, double, string, vector, etc.</li>
<li class="itemize_item"><span class='noun'>etc.</span></li>
</ul>
<div class="standard" id='magicparlabel-30776'>For the remain of this chapter, please carry on the reading to chapter 3 in Intel Manual Volume 1, <em>&ldquo;Basic Execution Environment&rdquo;</em> .</div>
<div class="chapter" id='magicparlabel-30777'>x86 Assembly and C</div>
<div class="standard" id='magicparlabel-30778'>In this chapter, we will explore assembly language, and how it connects to C. But why should we do so? Isn't it better to trust the compiler, plus no one writes assembly anymore? </div>

<div class="standard" id='magicparlabel-30779'>Not quite. Surely, the compiler at its current state of the art is trustworthy, and we do not need to write code in assembly, <em>most of the time</em>. A compiler can generate code, but as mentioned previously, a high-level language is a collection of patterns of a lower-level language. It does not cover everything that a hardware platform provides. As a consequence, not every assembly instruction can be generated by a compiler, so we still need to write assembly code for these circumstances to access hardware-specific features. Since hardware-specific features require writing assembly code, debugging requires reading it. We might spend even more time reading than writing. Working with low-level code that interacts directly with hardware, assembly code is unavoidable. Also, understand how a compiler generates assembly code could improve a programmer's productivity. For example, if a job or school assignment requires us to write assembly code, we can simply write it in C, then let <span style='font-family:monospace;'>gcc</span> does the hard working of writing the assembly code for us. We merely collect the generated assembly code, modify as needed and be done with the assignment.</div>

<div class="standard" id='magicparlabel-30780'>We will learn <span style='font-family:monospace;'>objdump</span> extensively, along with how to use Intel documents to aid in understanding x86 assembly code.</div>
<div class="section" id='magicparlabel-30781'>objdump</div>
<div class="standard" id='magicparlabel-30782'><code class="flex_code">objdump<em><a id='magicparlabel-30790' />
</em></code> is a program that displays information about object files. It will be handy later to debug incorrect layout from manual linking. Now, we use <code class="flex_code">objdump</code> to examine how high level source code maps to assembly code. For now, we ignore the output and learn how to use the command first. It is simple to use <code class="flex_code">objdump</code> :</div>



<div class="standard" id='magicparlabel-30804'><span style='font-family:monospace;'>$ objdump -d hello</span></div>


<div class="standard" id='magicparlabel-30805'><br />

</div>

<div class="standard" style='text-align: left;' id='magicparlabel-30810'><code class="flex_code">-d</code> option only displays assembled contents of executable sections. A <em><a id='magicparlabel-30818' />
section</em> is a block of memory that contains either program code or data. A code section is executable by the CPU, while a data section is not executable. Non-executable sections, such as <code class="flex_code">.data</code> and <code class="flex_code">.bss</code> (for storing program data), debug sections, etc, are not displayed. We will learn more about section when studying ELF binary file format in chapter <a href="#chap_The_Anatomy_of_a_program">I</a> . On the other hand:</div>



<div class="standard" id='magicparlabel-30832'><span style='font-family:monospace;'>$ objdump -D hello</span></div>


<div class="standard" id='magicparlabel-30833'><br />

</div>

<div class="standard" style='text-align: left;' id='magicparlabel-30838'>where <code class="flex_code">-D</code> option displays assembly contents of all sections. If <code class="flex_code">-D</code>, <code class="flex_code">-d</code> is implicitly assumed. <code class="flex_code">objdump</code> is mostly used for inspecting assembly code, so <code class="flex_code">-d</code> is the most useful and thus is set by default.</div>

<div class="standard" id='magicparlabel-30859'>The output overruns the terminal screen. To make it easy for reading, send all the output to <code class="flex_code">less</code>:</div>



<div class="standard" id='magicparlabel-30869'><span style='font-family:monospace;'>$ objdump -d hello | less</span></div>



<div class="standard" id='magicparlabel-30875'>To intermix source code and assembly, the binary must be compiled with <code class="flex_code">-g</code> option to include source code in it, then add <code class="flex_code">-S</code> option:</div>



<div class="standard" id='magicparlabel-30889'><span style='font-family:monospace;'>$ objdump -S hello | less</span></div>



<div class="standard" id='magicparlabel-30895'>The default syntax used by <code class="flex_code">objdump</code> is AT&amp;T syntax. To change it to the familiar Intel syntax:</div>



<div class="standard" id='magicparlabel-30905'><span style='font-family:monospace;'>$ objdump -M intel -D hello | less</span></div>


<div class="standard" id='magicparlabel-30906'><br />

</div>

<div class="standard" style='text-align: left;' id='magicparlabel-30911'>When using <span style='font-family:monospace;'>-M</span> option, option <span style='font-family:monospace;'>-D</span> or <span style='font-family:monospace;'>-d</span> must be explicitly supplied. Next, we will use <code class="flex_code">objdump</code> to examine how compiled C data and code are represented in machine code.</div>

<div class="standard" id='magicparlabel-30916'>Finally, we will write a 32-bit kernel, therefore we will need to compile a 32-bit binary and examine it in 32-bit mode:</div>



<div class="standard" id='magicparlabel-30922'><span style='font-family:monospace;'>$ objdump -M i386,intel -D hello | less</span></div>


<div class="standard" id='magicparlabel-30923'><br />

</div>

<div class="standard" style='text-align: left;' id='magicparlabel-30928'><code class="flex_code">-M i386</code> tells objdump to display assembly content using 32-bit layout. Knowing the difference between 32-bit and 64-bit is crucial for writing kernel code. We will examine this matter later on when writing our kernel.</div>
<div class="section" id='magicparlabel-30933'>Reading the output</div>
<div class="standard" id='magicparlabel-30934'>At the start of the output displays the file format of the object file:
<br />

</div>

<div class="lyx_code" id='magicparlabel-30935'><div class="lyx_code" style='text-align: left;'>hello: file format elf64-x86-64</div>
</div>
<div class="standard" id='magicparlabel-30936'>After the line is a series of disassembled sections:
<br />

</div>

<div class="lyx_code" id='magicparlabel-30937'><div class="lyx_code" style='text-align: left;'>Disassembly of section .interp:</div>
<div class="lyx_code_item">...</div>
<div class="lyx_code_item">Disassembly of section .note.ABI-tag:</div>
<div class="lyx_code_item">...</div>
<div class="lyx_code_item">Disassembly of section .note.gnu.build-id:</div>
<div class="lyx_code_item">...</div>
<div class="lyx_code_item">...</div>
<div class="lyx_code_item">etc</div>
</div>
<div class="standard" id='magicparlabel-30945'>Finally, each disassembled section displays its actual content - which is a sequence of assembly instructions - with the following format:
<br />

</div>

<div class="lyx_code" id='magicparlabel-30946'><div class="lyx_code" style='text-align: left;'>4004d6:       55                      push   rbp</div>
</div>

<ul class="itemize" id='magicparlabel-30947'><li class="itemize_item">The first column is the address of an assembly instruction. In the above example, the address is <span style='font-family:monospace;'>0x4004d6</span>.</li>
<li class="itemize_item">The second column is assembly instruction in raw hex values. In the above example, the address is <span style='font-family:monospace;'>0x55</span>.</li>
<li class="itemize_item">The third column is the assembly instruction. Depends on the section, the assembly instruction might be meaningful or meaningless. For example, if the assembly instructions are in a <span style='font-family:monospace;'>.text</span> section, then the assembly instructions are actual program code. On the other hand, if the assembly instructions are displayed in a <span style='font-family:monospace;'>.data </span>section, then we can safely ignore the displayed instructions. The reason is that <code class="flex_code">objdump</code> doesn't know which hex values are code and which are data, so it blindly translates every hex values into assembly instructions. In the above example, the assembly instruction is <span style='font-family:monospace;'>push %rbp</span>. </li>
<li class="itemize_item">The optional fourth column is a comment - appears when there is a reference to an address - to inform where the address originates. For example, the comment in blue:
<br />



<div class="full_width" id='magicparlabel-30955'><div class="full_width_item"><span style='font-family:monospace;'>&nbsp;&nbsp;&nbsp;&nbsp;lea    r12,[rip+0x2008ee]        # 600e10 &lt;__frame_dummy_init_array_entry&gt;</span></div>
</div>
<div class="standard" id='magicparlabel-30956'>is to inform that the referenced address from <span style='font-family:monospace;'>[rip+0x2008ee]</span> is <span style='font-family:monospace;'>0x600e10</span>, where the variable <span style='font-family:monospace;'>__frame_dummy_init_array_entry</span> resides.</div>
</li></ul>
<div class="standard" id='magicparlabel-30957'>In a disassembled section, it may also contain <em>labels</em>. A label is a name given to an assembly instruction. The label denotes the purpose of an assembly block to a human reader, to make it easier to understand. For example, <span style='font-family:monospace;'>.text</span> section carries many of such labels to denote where code in a program start;<span style='font-family:monospace;'> .text</span> section below carries two functions: <span style='font-family:monospace;'>_start</span> and <span style='font-family:monospace;'>deregister_tm_clones</span>. The <span style='font-family:monospace;'>_start</span> function starts at address <span style='font-family:monospace;'>4003e0</span>, is annotated to the left of the function name. Right below <span style='font-family:monospace;'>_start </span>label is also the instruction at address <span style='font-family:monospace;'>4003e0</span>. This whole thing means that a label is simply a name of a memory address. The function <span style='font-family:monospace;'>deregister_tm_clones </span>also shares the same format as every function in the section.</div>

<div class="lyx_code" id='magicparlabel-30958'><div class="lyx_code_item">00000000004003e0 &lt;_start&gt;:</div>
<div class="lyx_code_item">  4003e0:       31 ed                   xor    ebp,ebp</div>
<div class="lyx_code_item">  4003e2:       49 89 d1                mov    r9,rdx</div>
<div class="lyx_code_item">  4003e5:       5e                      pop    rsi</div>
<div class="lyx_code_item">...more assembly code....</div>
<div class="lyx_code_item"></div>
<div class="lyx_code_item">0000000000400410 &lt;deregister_tm_clones&gt;:</div>
<div class="lyx_code_item">  400410:       b8 3f 10 60 00          mov    eax,0x60103f</div>
<div class="lyx_code_item">  400415:       55                      push   rbp</div>
<div class="lyx_code_item">  400416:       48 2d 38 10 60 00       sub    rax,0x601038</div>
<div class="lyx_code_item">...more assembly code....</div>
</div>
<div class="section" id='magicparlabel-30969'>Intel manuals</div>
<div class="standard" id='magicparlabel-30970'>The best way to understand and use assembly language properly is to understand precisely the underlying computer architecture and what each machine instruction does. To do so, the most reliable source is to refer to documents provided by vendors. After all, hardware vendors are the one who made their machines. To understand Intel's instruction set, we need the document &ldquo;<em>Intel 64 and IA-32 architectures software developer's manual combined volumes 2A, 2B, 2C, and 2D: Instruction set reference, A-Z</em>&rdquo;. The document can be retrieved here: <span class="flex_url">https://software.intel.com/en-us/articles/intel-sdm</span>.</div>

<ul class="itemize" id='magicparlabel-30975'><li class="itemize_item">Chapter 1 provides brief information about the manual, and the comment notations used in the book.</li>
<li class="itemize_item">Chapter 2 provides an in-depth explanation of the anatomy of an assembly instruction, which we will investigate in the next section.</li>
<li class="itemize_item">Chapter 3 - 5 provide the details of every instruction of the x86_64 architecture.</li>
<li class="itemize_item">Chapter 6 provides information about safer mode extensions. We won't need to use this chapter.</li>
</ul>
<div class="standard" id='magicparlabel-30979'>The first volume &ldquo;<em>Intel® 64 and IA-32 Architectures Software Developer’s Manual Volume 1: Basic Architecture</em>&rdquo; describes the basic architecture and programming environment of Intel processors. In the book, Chapter 5 gives the summary of all Intel instructions, by listing instructions into different categories. We only need to learn general-purpose instructions listed <em>chapter 5.1</em> for our OS. <em>Chapter 7</em> describes the purpose of each category. Gradually, we will learn all of these instructions.</div>

<div class="exercise" id='magicparlabel-30980'><div class="exercise_item"><span class="exercise_label">Exercise 0.1.</span>
Read section 1.3 in volume 2, exclude sections 1.3.5 and 1.3.7.</div>
</div>
<div class="section" id='magicparlabel-30981'>Experiment with assembly code </div>
<div class="standard" id='magicparlabel-30982'>The subsequent sections examine the anatomy of an assembly instruction. To fully understand, it is necessary to write code and see the code in its actual form displayed as hex numbers. For this purpose, we use <span style='font-family:monospace;'>nasm</span> assembler to write a few line of assembly code and see the generated code.
<br />

</div>

<div class="full_width" id='magicparlabel-30983'><div class="full_width" style='text-align: left;'><hr />

</div>
</div>

<div class="example" id='magicparlabel-30984'><div class="example_item"><span class="example_label">Example 0.6.</span>
Suppose we want to see the machine code generated for this instruction:
<br />

</div>

<div class="lyx_code" id='magicparlabel-30985'><div class="lyx_code_item">jmp eax</div>
</div>
<div class="standard" id='magicparlabel-30986'>Then, we use an editor e.g. Emacs, then create a new file, write the code and save it in a file, e.g. <span style='font-family:monospace;'>test.asm</span>. Then, in the terminal, run the command: </div>



<div class="standard" id='magicparlabel-30992'><span style='font-family:monospace;'>$ nasm -f bin test.asm -o test</span></div>


<div class="standard" id='magicparlabel-30993'><br />

</div>

<div class="standard" style='text-align: left;' id='magicparlabel-30998'><span style='font-family:monospace;'>-f</span> option specifies the file format, e.g. ELF, of the final output file. But in this case, the format is <span style='font-family:monospace;'>bin</span>, which means this file is just a flat binary output without any extra information. That is, the written assembly code is translated to machine code as is, without the overhead of the metadata from file format like ELF. Indeed, after compiling, we can examine the output using this command:</div>



<div class="standard" id='magicparlabel-31004'><span style='font-family:monospace;'>$ hd test</span></div>



<div class="standard" id='magicparlabel-31010'><span style='font-family:monospace;'>hd</span> (short for hexdump) is a program that displays the content of a file in hex format<div class="marginal"><div class="plain_layout" id='magicparlabel-31014'>Though its name is short for hexdump, <span style='font-family:monospace;'>hd </span>can display in different base, e.g. binary, other than hex. </div>
</div>.<span style='font-family:monospace;'> </span>And get the following output:</div>

<div class="lyx_code" id='magicparlabel-31015'><div class="lyx_code_item">00000000  66 ff e0                          |f..|</div>
<div class="lyx_code_item">00000003</div>
</div>
<div class="standard" id='magicparlabel-31017'>The file only consists of 3 bytes: <span style='font-family:monospace;'>66 ff e0</span>, which is equivalent to the instruction <span style='font-family:monospace;'>jmp eax</span>. 
<br />

</div>
</div>
<div class="standard" style='text-align: left;' id='magicparlabel-31018'><hr />

</div>


<div class="standard" id='magicparlabel-31019'><br />

</div>

<div class="example" id='magicparlabel-31020'><div class="example_item"><span class="example_label">Example 0.7.</span>
If we were to use <span style='font-family:monospace;'>elf</span> as file format:
<br />

</div>


<div class="standard" id='magicparlabel-31026'><span style='font-family:monospace;'>$ nasm -f elf test.asm -o test</span></div>


<div class="standard" id='magicparlabel-31027'><br />

</div>

<div class="standard" style='text-align: left;' id='magicparlabel-31032'>It would be more challenging to learn and understand assembly instructions with all the added noise<div class="foot"><span class="foot_label">10</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-31036'>The output from <span style='font-family:monospace;'>hd.</span></div>
</div></div>:</div>

<div class="lyx_code" id='magicparlabel-31037'><div class="lyx_code_item">00000000  7f 45 4c 46 01 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|</div>
<div class="lyx_code_item">00000010  01 00 03 00 01 00 00 00  00 00 00 00 00 00 00 00  |................|</div>
<div class="lyx_code_item">00000020  40 00 00 00 00 00 00 00  34 00 00 00 00 00 28 00  |@.......4.....(.|</div>
<div class="lyx_code_item">00000030  05 00 02 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</div>
<div class="lyx_code_item">00000040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</div>
<div class="lyx_code_item">*</div>
<div class="lyx_code_item">00000060  00 00 00 00 00 00 00 00  01 00 00 00 01 00 00 00  |................|</div>
<div class="lyx_code_item">00000070  06 00 00 00 00 00 00 00  10 01 00 00 02 00 00 00  |................|</div>
<div class="lyx_code_item">00000080  00 00 00 00 00 00 00 00  10 00 00 00 00 00 00 00  |................|</div>
<div class="lyx_code_item">00000090  07 00 00 00 03 00 00 00  00 00 00 00 00 00 00 00  |................|</div>
<div class="lyx_code_item">000000a0  20 01 00 00 21 00 00 00  00 00 00 00 00 00 00 00  | ...!...........|</div>
<div class="lyx_code_item">000000b0  01 00 00 00 00 00 00 00  11 00 00 00 02 00 00 00  |................|</div>
<div class="lyx_code_item">000000c0  00 00 00 00 00 00 00 00  50 01 00 00 30 00 00 00  |........P...0...|</div>
<div class="lyx_code_item">000000d0  04 00 00 00 03 00 00 00  04 00 00 00 10 00 00 00  |................|</div>
<div class="lyx_code_item">000000e0  19 00 00 00 03 00 00 00  00 00 00 00 00 00 00 00  |................|</div>
<div class="lyx_code_item">000000f0  80 01 00 00 0d 00 00 00  00 00 00 00 00 00 00 00  |................|</div>
<div class="lyx_code_item">00000100  01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</div>
<div class="lyx_code_item">00000110  ff e0 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</div>
<div class="lyx_code_item">00000120  00 2e 74 65 78 74 00 2e  73 68 73 74 72 74 61 62  |..text..shstrtab|</div>
<div class="lyx_code_item">00000130  00 2e 73 79 6d 74 61 62  00 2e 73 74 72 74 61 62  |..symtab..strtab|</div>
<div class="lyx_code_item">00000140  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</div>
<div class="lyx_code_item">*</div>
<div class="lyx_code_item">00000160  01 00 00 00 00 00 00 00  00 00 00 00 04 00 f1 ff  |................|</div>
<div class="lyx_code_item">00000170  00 00 00 00 00 00 00 00  00 00 00 00 03 00 01 00  |................|</div>
<div class="lyx_code_item">00000180  00 74 65 73 74 2e 61 73  6d 00 00 00 00 00 00 00  |.disp8-5.asm....|</div>
<div class="lyx_code_item">00000190</div>
</div>
<div class="standard" id='magicparlabel-31063'>Thus, it is better just to use flat binary format in this case, to experiment instruction by instruction.</div>
</div>
<div class="standard" id='magicparlabel-31064'>With such a simple workflow, we are ready to investigate the structure of every assembly instruction.</div>

<div class="standard" id='magicparlabel-31065'><b>Note: </b>Using the bin format puts <span style='font-family:monospace;'>nasm</span> by default into 16-bit mode. To enable 32-bit code to be generated, we must add this line at the beginning of an <span style='font-family:monospace;'>nasm</span> source file:</div>

<div class="lyx_code" id='magicparlabel-31066'><div class="lyx_code_item">bits 32</div>
</div>
<div class="section" id='magicparlabel-31067'>Anatomy of an Assembly Instruction</div>
<div class="standard" id='magicparlabel-31068'>Chapter 2 of the instruction reference manual provides an in-depth of view of instruction format. But, the information is too much that it can overwhelm beginners. This section provides an easier instruction before reading the actual chapter in the manual.</div>





<div class="standard" id='magicparlabel-31079'><img src='20_img_04_x86_instruction_format.png' alt='image: 20_img_04_x86_instruction_format.png' />
</div>



<div class="standard" id='magicparlabel-31085'>Recall that an assembly instruction is simply a fixed-size series of bits. The length of an instruction varies and depends on how complicated an instruction is. What every instruction shares is a common format described in the figure above that divides the bits of an instruction into smaller parts that encode different types of information. These parts are:</div>

<dl class='description' id='magicparlabel-31086'><dt class="description_label">Instruction&nbsp;Prefixes</dt>
<dd class="description_item"> appears at the beginning of an instruction. Prefixes are optional. A programmer can choose to use a prefix or not because in practice, a so-called prefix is just another assembly instruction to be inserted before another assembly instruction that such prefix is applicable. Instructions with 2 or 3-bytes opcodes include the prefixes by default.</dd>
<dt class="description_label">Opcode</dt>
<dd class="description_item"> is a unique number that identifies an instruction. Each opcode is given an mnemonic name that is human readable, e.g. one of the opcodes for instruction <span style='font-family:monospace;'>add </span>is <span style='font-family:monospace;'>04</span>. When a CPU sees the number <span style='font-family:monospace;'>04</span> in its instruction cache, it sees instruction <span style='font-family:monospace;'>add </span>and execute accordingly. Opcode can be 1,2 or 3 bytes long and includes an additional 3-bit field in the <span style='font-family:monospace;'>ModR/M</span> byte when needed.
<br />



<div class="example" id='magicparlabel-31088'><div class="example_item"><span class="example_label">Example 0.8.</span>
This instruction:</div>
</div>

<div class="lyx_code" id='magicparlabel-31089'><div class="lyx_code_item">jmp [0x1234]</div>
</div>
<div class="standard" style='text-align: left;' id='magicparlabel-31090'>generates the machine code:</div>

<div class="lyx_code" id='magicparlabel-31091'><div class="lyx_code_item">ff 26 34 12</div>
</div>
<div class="standard" style='text-align: left;' id='magicparlabel-31092'>The very first byte, <span style='font-family:monospace;'>0xff</span> is the opcode, which is unique to <span style='font-family:monospace;'>jmp</span> instruction.</div>
</dd><dt class="description_label">ModR/M</dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>specifies operands of an instruction. Operand can either be a register, a memory location or an immediate value. This component of an instruction consists of 3 smaller parts:
<br />



<ul class="itemize" id='magicparlabel-31094'><li class="itemize_item"><em><span style='font-family:monospace;'>mod</span> </em>field, or <em>modifier</em> field, is combined with <span style='font-family:monospace;'>r/m</span> field for a total of 5 bits of information to encode 32 possible values: 8 registers and 24 addressing modes.</li>
<li class="itemize_item"><em><span style='font-family:monospace;'>reg/opcode</span></em> field encodes either a register operand, or extends the <span style='font-family:monospace;'>Opcode</span> field with 3 more bits.</li>
<li class="itemize_item"><em><span style='font-family:monospace;'>r/m</span></em> field encodes either a register operand or can be combined with <span style='font-family:monospace;'>mod</span> field to encode an addressing mode.</li>
</ul>
<div class="standard" id='magicparlabel-31097'>The tables <a href="#mod_rm_16">3.</a> and <a href="#mod_rm_32">3.</a> list all possible 256 values of <span style='font-family:monospace;'>ModR/M</span> byte and how each value maps to an addressing mode and a register, in 16-bit and 32-bit modes.</div>
</dd></dl>



<div class="standard" id='magicparlabel-31105'><br />

</div>



<div class="standard" style='text-align: left;' id='magicparlabel-31110'><table><tbody><tr><td style ="width: 4cm;" align='left' valign='top' colspan='3'>
<div class="plain_layout" id='magicparlabel-31579'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>r8(/r)</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31588'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>AL</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31591'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>CL</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31594'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>DL</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31597'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>BL</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31600'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>AH</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31603'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>CH</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31606'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>DH</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31609'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>BH </span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top' colspan='3'>
<div class="plain_layout" id='magicparlabel-31612'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>r16(/r)</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31621'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>AX</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31624'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>CX </span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31627'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>DX </span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31630'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>BX</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31633'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>SP </span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31636'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>BP<sup class="script_superscript">1</sup></span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31643'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>SI</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31646'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>DI </span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top' colspan='3'>
<div class="plain_layout" id='magicparlabel-31649'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>r32(/r)</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31658'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>EAX</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31661'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>ECX</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31664'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>EDX </span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31667'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>EBX </span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31670'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>ESP</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31673'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>EBP</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31676'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>ESI</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31679'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>EDI</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top' colspan='3'>
<div class="plain_layout" id='magicparlabel-31682'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>mm(/r)</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31691'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>MM0</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31694'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>MM1</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31697'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>MM2</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31700'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>MM3</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31703'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>MM4</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31706'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>MM5</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31709'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>MM6</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31712'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>MM7</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top' colspan='3'>
<div class="plain_layout" id='magicparlabel-31715'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>xmm(/r) </span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31724'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>XMM0</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31727'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>XMM1</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31730'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>XMM2</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31733'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>XMM3</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31736'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>XMM4</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31739'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>XMM5</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31742'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>XMM6</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31745'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>XMM7</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top' colspan='3'>
<div class="plain_layout" id='magicparlabel-31748'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>(In decimal) /digit (Opcode)</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31757'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>0</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31760'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>1 </span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31763'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>2</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31766'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>3</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31769'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>4</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31772'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>5</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31775'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>6</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31778'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>7 </span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top' colspan='3'>
<div class="plain_layout" id='magicparlabel-31781'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>(In binary) REG =</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31790'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>000</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31793'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>001</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31796'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>010</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31799'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>011</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31802'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>100</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31805'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>101</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31808'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>110</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31811'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>111</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31814'><b><span style='font-family:sans-serif;'><span style='font-size:x-small;'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Effective Address</span></span></b></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31817'><b><span style='font-family:sans-serif;'><span style='font-size:x-small;'>&nbsp;&nbsp;Mod</span></span></b></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31820'><b><span style='font-family:sans-serif;'><span style='font-size:x-small;'>&nbsp;&nbsp;R/M</span></span></b></div>
</td>
<td style ="width: 1cm;" align='center' valign='top' colspan='8'>
<div class="plain_layout" id='magicparlabel-31823'><b><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Values of ModR/M Byte (In Hexadecimal)</span></span></b></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31847'><span style='font-family:monospace;'><span style='font-size:x-small;'>[BX + SI]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31850'><span style='font-family:monospace;'><span style='font-size:x-small;'>00</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31853'><span style='font-family:monospace;'><span style='font-size:x-small;'>000</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31856'><span style='font-family:monospace;'><span style='font-size:x-small;'>00</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31859'><span style='font-family:monospace;'><span style='font-size:x-small;'>08</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31862'><span style='font-family:monospace;'><span style='font-size:x-small;'>10</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31865'><span style='font-family:monospace;'><span style='font-size:x-small;'>18</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31868'><span style='font-family:monospace;'><span style='font-size:x-small;'>20</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31871'><span style='font-family:monospace;'><span style='font-size:x-small;'>28</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31874'><span style='font-family:monospace;'><span style='font-size:x-small;'>30</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31877'><span style='font-family:monospace;'><span style='font-size:x-small;'>38</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31880'><span style='font-family:monospace;'><span style='font-size:x-small;'>[BX + DI]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31886'><span style='font-family:monospace;'><span style='font-size:x-small;'>001</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31889'><span style='font-family:monospace;'><span style='font-size:x-small;'>01</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31892'><span style='font-family:monospace;'><span style='font-size:x-small;'>09</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31895'><span style='font-family:monospace;'><span style='font-size:x-small;'>11</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31898'><span style='font-family:monospace;'><span style='font-size:x-small;'>19</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31901'><span style='font-family:monospace;'><span style='font-size:x-small;'>21</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31904'><span style='font-family:monospace;'><span style='font-size:x-small;'>29</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31907'><span style='font-family:monospace;'><span style='font-size:x-small;'>31</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31910'><span style='font-family:monospace;'><span style='font-size:x-small;'>39</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31913'><span style='font-family:monospace;'><span style='font-size:x-small;'>[BP + SI] </span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31919'><span style='font-family:monospace;'><span style='font-size:x-small;'>010</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31922'><span style='font-family:monospace;'><span style='font-size:x-small;'>02</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31925'><span style='font-family:monospace;'><span style='font-size:x-small;'>0A</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31928'><span style='font-family:monospace;'><span style='font-size:x-small;'>12</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31931'><span style='font-family:monospace;'><span style='font-size:x-small;'>1A</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31934'><span style='font-family:monospace;'><span style='font-size:x-small;'>22</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31937'><span style='font-family:monospace;'><span style='font-size:x-small;'>2A</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31940'><span style='font-family:monospace;'><span style='font-size:x-small;'>32</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31943'><span style='font-family:monospace;'><span style='font-size:x-small;'>3A</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31946'><span style='font-family:monospace;'><span style='font-size:x-small;'>[BP + DI] </span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31952'><span style='font-family:monospace;'><span style='font-size:x-small;'>011</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31955'><span style='font-family:monospace;'><span style='font-size:x-small;'>03</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31958'><span style='font-family:monospace;'><span style='font-size:x-small;'>0B</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31961'><span style='font-family:monospace;'><span style='font-size:x-small;'>13</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31964'><span style='font-family:monospace;'><span style='font-size:x-small;'>1B</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31967'><span style='font-family:monospace;'><span style='font-size:x-small;'>23</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31970'><span style='font-family:monospace;'><span style='font-size:x-small;'>2B</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31973'><span style='font-family:monospace;'><span style='font-size:x-small;'>33</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31976'><span style='font-family:monospace;'><span style='font-size:x-small;'>3B</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31979'><span style='font-family:monospace;'><span style='font-size:x-small;'>[SI] </span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31985'><span style='font-family:monospace;'><span style='font-size:x-small;'>100</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31988'><span style='font-family:monospace;'><span style='font-size:x-small;'>04</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31991'><span style='font-family:monospace;'><span style='font-size:x-small;'>0C</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31994'><span style='font-family:monospace;'><span style='font-size:x-small;'>14</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-31997'><span style='font-family:monospace;'><span style='font-size:x-small;'>1C</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32000'><span style='font-family:monospace;'><span style='font-size:x-small;'>24</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32003'><span style='font-family:monospace;'><span style='font-size:x-small;'>2C</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32006'><span style='font-family:monospace;'><span style='font-size:x-small;'>34</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32009'><span style='font-family:monospace;'><span style='font-size:x-small;'>3C</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32012'><span style='font-family:monospace;'><span style='font-size:x-small;'>[DI] </span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32018'><span style='font-family:monospace;'><span style='font-size:x-small;'>101</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32021'><span style='font-family:monospace;'><span style='font-size:x-small;'>05</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32024'><span style='font-family:monospace;'><span style='font-size:x-small;'>0D</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32027'><span style='font-family:monospace;'><span style='font-size:x-small;'>15</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32030'><span style='font-family:monospace;'><span style='font-size:x-small;'>1D</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32033'><span style='font-family:monospace;'><span style='font-size:x-small;'>25</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32036'><span style='font-family:monospace;'><span style='font-size:x-small;'>2D</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32039'><span style='font-family:monospace;'><span style='font-size:x-small;'>35</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32042'><span style='font-family:monospace;'><span style='font-size:x-small;'>3D</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32045'><span style='font-family:monospace;'><span style='font-size:x-small;'>disp16<sup class="script_superscript">2</sup></span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32055'><span style='font-family:monospace;'><span style='font-size:x-small;'>110</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32058'><span style='font-family:monospace;'><span style='font-size:x-small;'>06</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32061'><span style='font-family:monospace;'><span style='font-size:x-small;'>0E</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32064'><span style='font-family:monospace;'><span style='font-size:x-small;'>16</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32067'><span style='font-family:monospace;'><span style='font-size:x-small;'>1E</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32070'><span style='font-family:monospace;'><span style='font-size:x-small;'>26</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32073'><span style='font-family:monospace;'><span style='font-size:x-small;'>2E</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32076'><span style='font-family:monospace;'><span style='font-size:x-small;'>36</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32079'><span style='font-family:monospace;'><span style='font-size:x-small;'>3E</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32082'><span style='font-family:monospace;'><span style='font-size:x-small;'>[BX]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32088'><span style='font-family:monospace;'><span style='font-size:x-small;'>111</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32091'><span style='font-family:monospace;'><span style='font-size:x-small;'>07</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32094'><span style='font-family:monospace;'><span style='font-size:x-small;'>0F</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32097'><span style='font-family:monospace;'><span style='font-size:x-small;'>17</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32100'><span style='font-family:monospace;'><span style='font-size:x-small;'>1F</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32103'><span style='font-family:monospace;'><span style='font-size:x-small;'>27</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32106'><span style='font-family:monospace;'><span style='font-size:x-small;'>2F</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32109'><span style='font-family:monospace;'><span style='font-size:x-small;'>37</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32112'><span style='font-family:monospace;'><span style='font-size:x-small;'>3F</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32115'><span style='font-family:monospace;'><span style='font-size:x-small;'>[BX + SI] + disp8<sup class="script_superscript">3</sup></span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32122'><span style='font-family:monospace;'><span style='font-size:x-small;'>01</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32125'><span style='font-family:monospace;'><span style='font-size:x-small;'>000</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32128'><span style='font-family:monospace;'><span style='font-size:x-small;'>40</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32131'><span style='font-family:monospace;'><span style='font-size:x-small;'>48</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32134'><span style='font-family:monospace;'><span style='font-size:x-small;'>50</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32137'><span style='font-family:monospace;'><span style='font-size:x-small;'>58</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32140'><span style='font-family:monospace;'><span style='font-size:x-small;'>60</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32143'><span style='font-family:monospace;'><span style='font-size:x-small;'>68</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32146'><span style='font-family:monospace;'><span style='font-size:x-small;'>70</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32149'><span style='font-family:monospace;'><span style='font-size:x-small;'>78</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32152'><span style='font-family:monospace;'><span style='font-size:x-small;'>[BX + DI] + disp8</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32158'><span style='font-family:monospace;'><span style='font-size:x-small;'>001</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32161'><span style='font-family:monospace;'><span style='font-size:x-small;'>41</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32164'><span style='font-family:monospace;'><span style='font-size:x-small;'>49</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32167'><span style='font-family:monospace;'><span style='font-size:x-small;'>51</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32170'><span style='font-family:monospace;'><span style='font-size:x-small;'>59</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32173'><span style='font-family:monospace;'><span style='font-size:x-small;'>61</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32176'><span style='font-family:monospace;'><span style='font-size:x-small;'>69</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32179'><span style='font-family:monospace;'><span style='font-size:x-small;'>71</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32182'><span style='font-family:monospace;'><span style='font-size:x-small;'>79</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32185'><span style='font-family:monospace;'><span style='font-size:x-small;'>[BP + SI] + disp8</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32191'><span style='font-family:monospace;'><span style='font-size:x-small;'>010</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32194'><span style='font-family:monospace;'><span style='font-size:x-small;'>42</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32197'><span style='font-family:monospace;'><span style='font-size:x-small;'>4A</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32200'><span style='font-family:monospace;'><span style='font-size:x-small;'>52</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32203'><span style='font-family:monospace;'><span style='font-size:x-small;'>5A</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32206'><span style='font-family:monospace;'><span style='font-size:x-small;'>62</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32209'><span style='font-family:monospace;'><span style='font-size:x-small;'>6A</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32212'><span style='font-family:monospace;'><span style='font-size:x-small;'>72</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32215'><span style='font-family:monospace;'><span style='font-size:x-small;'>7A</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32218'><span style='font-family:monospace;'><span style='font-size:x-small;'>[BP + DI] + disp8</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32224'><span style='font-family:monospace;'><span style='font-size:x-small;'>011</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32227'><span style='font-family:monospace;'><span style='font-size:x-small;'>43</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32230'><span style='font-family:monospace;'><span style='font-size:x-small;'>4B</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32233'><span style='font-family:monospace;'><span style='font-size:x-small;'>53</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32236'><span style='font-family:monospace;'><span style='font-size:x-small;'>5B</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32239'><span style='font-family:monospace;'><span style='font-size:x-small;'>63</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32242'><span style='font-family:monospace;'><span style='font-size:x-small;'>6B</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32245'><span style='font-family:monospace;'><span style='font-size:x-small;'>73</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32248'><span style='font-family:monospace;'><span style='font-size:x-small;'>7B</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32251'><span style='font-family:monospace;'><span style='font-size:x-small;'>[SI] + disp8</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32257'><span style='font-family:monospace;'><span style='font-size:x-small;'>100</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32260'><span style='font-family:monospace;'><span style='font-size:x-small;'>44</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32263'><span style='font-family:monospace;'><span style='font-size:x-small;'>4C</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32266'><span style='font-family:monospace;'><span style='font-size:x-small;'>54</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32269'><span style='font-family:monospace;'><span style='font-size:x-small;'>5C</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32272'><span style='font-family:monospace;'><span style='font-size:x-small;'>64</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32275'><span style='font-family:monospace;'><span style='font-size:x-small;'>6C</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32278'><span style='font-family:monospace;'><span style='font-size:x-small;'>74</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32281'><span style='font-family:monospace;'><span style='font-size:x-small;'>7C</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32284'><span style='font-family:monospace;'><span style='font-size:x-small;'>[DI] + disp8</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32290'><span style='font-family:monospace;'><span style='font-size:x-small;'>101</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32293'><span style='font-family:monospace;'><span style='font-size:x-small;'>45</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32296'><span style='font-family:monospace;'><span style='font-size:x-small;'>4D</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32299'><span style='font-family:monospace;'><span style='font-size:x-small;'>55</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32302'><span style='font-family:monospace;'><span style='font-size:x-small;'>5D</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32305'><span style='font-family:monospace;'><span style='font-size:x-small;'>65</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32308'><span style='font-family:monospace;'><span style='font-size:x-small;'>6D</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32311'><span style='font-family:monospace;'><span style='font-size:x-small;'>75</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32314'><span style='font-family:monospace;'><span style='font-size:x-small;'>7D</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32317'><span style='font-family:monospace;'><span style='font-size:x-small;'>[BP] + disp8</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32323'><span style='font-family:monospace;'><span style='font-size:x-small;'>110</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32326'><span style='font-family:monospace;'><span style='font-size:x-small;'>46</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32329'><span style='font-family:monospace;'><span style='font-size:x-small;'>4E</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32332'><span style='font-family:monospace;'><span style='font-size:x-small;'>56</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32335'><span style='font-family:monospace;'><span style='font-size:x-small;'>5E</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32338'><span style='font-family:monospace;'><span style='font-size:x-small;'>66</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32341'><span style='font-family:monospace;'><span style='font-size:x-small;'>6E</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32344'><span style='font-family:monospace;'><span style='font-size:x-small;'>76</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32347'><span style='font-family:monospace;'><span style='font-size:x-small;'>7E</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32350'><span style='font-family:monospace;'><span style='font-size:x-small;'>[BX] + disp8</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32356'><span style='font-family:monospace;'><span style='font-size:x-small;'>111</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32359'><span style='font-family:monospace;'><span style='font-size:x-small;'>47</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32362'><span style='font-family:monospace;'><span style='font-size:x-small;'>4F</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32365'><span style='font-family:monospace;'><span style='font-size:x-small;'>57</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32368'><span style='font-family:monospace;'><span style='font-size:x-small;'>5F</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32371'><span style='font-family:monospace;'><span style='font-size:x-small;'>67</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32374'><span style='font-family:monospace;'><span style='font-size:x-small;'>6F</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32377'><span style='font-family:monospace;'><span style='font-size:x-small;'>77</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32380'><span style='font-family:monospace;'><span style='font-size:x-small;'>7F</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32383'><span style='font-family:monospace;'><span style='font-size:x-small;'>[BX + SI] + disp16</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32386'><span style='font-family:monospace;'><span style='font-size:x-small;'>10</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32389'><span style='font-family:monospace;'><span style='font-size:x-small;'>000</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32392'><span style='font-family:monospace;'><span style='font-size:x-small;'>80</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32395'><span style='font-family:monospace;'><span style='font-size:x-small;'>88</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32398'><span style='font-family:monospace;'><span style='font-size:x-small;'>90</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32401'><span style='font-family:monospace;'><span style='font-size:x-small;'>98</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32404'><span style='font-family:monospace;'><span style='font-size:x-small;'>A0</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32407'><span style='font-family:monospace;'><span style='font-size:x-small;'>A8</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32410'><span style='font-family:monospace;'><span style='font-size:x-small;'>B0</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32413'><span style='font-family:monospace;'><span style='font-size:x-small;'>B8</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32416'><span style='font-family:monospace;'><span style='font-size:x-small;'>[BX + DI] + disp16</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32422'><span style='font-family:monospace;'><span style='font-size:x-small;'>001</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32425'><span style='font-family:monospace;'><span style='font-size:x-small;'>81</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32428'><span style='font-family:monospace;'><span style='font-size:x-small;'>89</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32431'><span style='font-family:monospace;'><span style='font-size:x-small;'>91</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32434'><span style='font-family:monospace;'><span style='font-size:x-small;'>99</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32437'><span style='font-family:monospace;'><span style='font-size:x-small;'>A1</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32440'><span style='font-family:monospace;'><span style='font-size:x-small;'>A9</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32443'><span style='font-family:monospace;'><span style='font-size:x-small;'>B1</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32446'><span style='font-family:monospace;'><span style='font-size:x-small;'>B9</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32449'><span style='font-family:monospace;'><span style='font-size:x-small;'>[BP + SI] + disp16</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32455'><span style='font-family:monospace;'><span style='font-size:x-small;'>010</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32458'><span style='font-family:monospace;'><span style='font-size:x-small;'>82</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32461'><span style='font-family:monospace;'><span style='font-size:x-small;'>8A</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32464'><span style='font-family:monospace;'><span style='font-size:x-small;'>92</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32467'><span style='font-family:monospace;'><span style='font-size:x-small;'>9A</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32470'><span style='font-family:monospace;'><span style='font-size:x-small;'>A2</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32473'><span style='font-family:monospace;'><span style='font-size:x-small;'>AA</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32476'><span style='font-family:monospace;'><span style='font-size:x-small;'>B2</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32479'><span style='font-family:monospace;'><span style='font-size:x-small;'>BA</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32482'><span style='font-family:monospace;'><span style='font-size:x-small;'>[BP + DI] + disp16</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32488'><span style='font-family:monospace;'><span style='font-size:x-small;'>011</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32491'><span style='font-family:monospace;'><span style='font-size:x-small;'>83</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32494'><span style='font-family:monospace;'><span style='font-size:x-small;'>8B</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32497'><span style='font-family:monospace;'><span style='font-size:x-small;'>93</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32500'><span style='font-family:monospace;'><span style='font-size:x-small;'>9B</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32503'><span style='font-family:monospace;'><span style='font-size:x-small;'>A3</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32506'><span style='font-family:monospace;'><span style='font-size:x-small;'>AB</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32509'><span style='font-family:monospace;'><span style='font-size:x-small;'>B3</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32512'><span style='font-family:monospace;'><span style='font-size:x-small;'>BB</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32515'><span style='font-family:monospace;'><span style='font-size:x-small;'>[SI] + disp16</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32521'><span style='font-family:monospace;'><span style='font-size:x-small;'>100</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32524'><span style='font-family:monospace;'><span style='font-size:x-small;'>84</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32527'><span style='font-family:monospace;'><span style='font-size:x-small;'>8C</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32530'><span style='font-family:monospace;'><span style='font-size:x-small;'>94</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32533'><span style='font-family:monospace;'><span style='font-size:x-small;'>9C</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32536'><span style='font-family:monospace;'><span style='font-size:x-small;'>A4</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32539'><span style='font-family:monospace;'><span style='font-size:x-small;'>AC</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32542'><span style='font-family:monospace;'><span style='font-size:x-small;'>B4</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32545'><span style='font-family:monospace;'><span style='font-size:x-small;'>BC</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32548'><span style='font-family:monospace;'><span style='font-size:x-small;'>[DI] + disp16</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32554'><span style='font-family:monospace;'><span style='font-size:x-small;'>101</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32557'><span style='font-family:monospace;'><span style='font-size:x-small;'>85</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32560'><span style='font-family:monospace;'><span style='font-size:x-small;'>8D</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32563'><span style='font-family:monospace;'><span style='font-size:x-small;'>95</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32566'><span style='font-family:monospace;'><span style='font-size:x-small;'>9D</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32569'><span style='font-family:monospace;'><span style='font-size:x-small;'>A5</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32572'><span style='font-family:monospace;'><span style='font-size:x-small;'>AD</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32575'><span style='font-family:monospace;'><span style='font-size:x-small;'>B5</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32578'><span style='font-family:monospace;'><span style='font-size:x-small;'>BD</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32581'><span style='font-family:monospace;'><span style='font-size:x-small;'>[BP] + disp16</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32587'><span style='font-family:monospace;'><span style='font-size:x-small;'>110</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32590'><span style='font-family:monospace;'><span style='font-size:x-small;'>86</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32593'><span style='font-family:monospace;'><span style='font-size:x-small;'>8E</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32596'><span style='font-family:monospace;'><span style='font-size:x-small;'>96</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32599'><span style='font-family:monospace;'><span style='font-size:x-small;'>9E</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32602'><span style='font-family:monospace;'><span style='font-size:x-small;'>A6</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32605'><span style='font-family:monospace;'><span style='font-size:x-small;'>AE</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32608'><span style='font-family:monospace;'><span style='font-size:x-small;'>B6</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32611'><span style='font-family:monospace;'><span style='font-size:x-small;'>BE</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32614'><span style='font-family:monospace;'><span style='font-size:x-small;'>[BX] + disp16</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32620'><span style='font-family:monospace;'><span style='font-size:x-small;'>111</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32623'><span style='font-family:monospace;'><span style='font-size:x-small;'>87</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32626'><span style='font-family:monospace;'><span style='font-size:x-small;'>8F</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32629'><span style='font-family:monospace;'><span style='font-size:x-small;'>97</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32632'><span style='font-family:monospace;'><span style='font-size:x-small;'>9F</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32635'><span style='font-family:monospace;'><span style='font-size:x-small;'>A7</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32638'><span style='font-family:monospace;'><span style='font-size:x-small;'>AF</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32641'><span style='font-family:monospace;'><span style='font-size:x-small;'>B7</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32644'><span style='font-family:monospace;'><span style='font-size:x-small;'>BF</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32647'><span style='font-family:monospace;'><span style='font-size:x-small;'>EAX/AX/AL/MM0/XMM0</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32650'><span style='font-family:monospace;'><span style='font-size:x-small;'>11</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32653'><span style='font-family:monospace;'><span style='font-size:x-small;'>000</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32656'><span style='font-family:monospace;'><span style='font-size:x-small;'>C0</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32659'><span style='font-family:monospace;'><span style='font-size:x-small;'>C8</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32662'><span style='font-family:monospace;'><span style='font-size:x-small;'>D0</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32665'><span style='font-family:monospace;'><span style='font-size:x-small;'>D8</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32668'><span style='font-family:monospace;'><span style='font-size:x-small;'>E0</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32671'><span style='font-family:monospace;'><span style='font-size:x-small;'>E8</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32674'><span style='font-family:monospace;'><span style='font-size:x-small;'>F0</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32677'><span style='font-family:monospace;'><span style='font-size:x-small;'>F8</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32680'><span style='font-family:monospace;'><span style='font-size:x-small;'>ECX/CX/CL/MM1/XMM1</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32686'><span style='font-family:monospace;'><span style='font-size:x-small;'>001</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32689'><span style='font-family:monospace;'><span style='font-size:x-small;'>C1</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32692'><span style='font-family:monospace;'><span style='font-size:x-small;'>C9</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32695'><span style='font-family:monospace;'><span style='font-size:x-small;'>D1</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32698'><span style='font-family:monospace;'><span style='font-size:x-small;'>D9</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32701'><span style='font-family:monospace;'><span style='font-size:x-small;'>E1</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32704'><span style='font-family:monospace;'><span style='font-size:x-small;'>E9</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32707'><span style='font-family:monospace;'><span style='font-size:x-small;'>F1</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32710'><span style='font-family:monospace;'><span style='font-size:x-small;'>F9</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32713'><span style='font-family:monospace;'><span style='font-size:x-small;'>EDX/DX/DL/MM2/XMM2</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32719'><span style='font-family:monospace;'><span style='font-size:x-small;'>010</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32722'><span style='font-family:monospace;'><span style='font-size:x-small;'>C2</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32725'><span style='font-family:monospace;'><span style='font-size:x-small;'>CA</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32728'><span style='font-family:monospace;'><span style='font-size:x-small;'>D2</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32731'><span style='font-family:monospace;'><span style='font-size:x-small;'>DA</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32734'><span style='font-family:monospace;'><span style='font-size:x-small;'>E2</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32737'><span style='font-family:monospace;'><span style='font-size:x-small;'>EA</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32740'><span style='font-family:monospace;'><span style='font-size:x-small;'>F2</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32743'><span style='font-family:monospace;'><span style='font-size:x-small;'>FA</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32746'><span style='font-family:monospace;'><span style='font-size:x-small;'>EBX/BX/BL/MM3/XMM3</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32752'><span style='font-family:monospace;'><span style='font-size:x-small;'>011</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32755'><span style='font-family:monospace;'><span style='font-size:x-small;'>C3</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32758'><span style='font-family:monospace;'><span style='font-size:x-small;'>CB</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32761'><span style='font-family:monospace;'><span style='font-size:x-small;'>D3</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32764'><span style='font-family:monospace;'><span style='font-size:x-small;'>DB</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32767'><span style='font-family:monospace;'><span style='font-size:x-small;'>E3</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32770'><span style='font-family:monospace;'><span style='font-size:x-small;'>EB</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32773'><span style='font-family:monospace;'><span style='font-size:x-small;'>F3</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32776'><span style='font-family:monospace;'><span style='font-size:x-small;'>FB</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32779'><span style='font-family:monospace;'><span style='font-size:x-small;'>ESP/SP/AHMM4/XMM4</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32785'><span style='font-family:monospace;'><span style='font-size:x-small;'>100</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32788'><span style='font-family:monospace;'><span style='font-size:x-small;'>C4</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32791'><span style='font-family:monospace;'><span style='font-size:x-small;'>CC</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32794'><span style='font-family:monospace;'><span style='font-size:x-small;'>D4</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32797'><span style='font-family:monospace;'><span style='font-size:x-small;'>DC</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32800'><span style='font-family:monospace;'><span style='font-size:x-small;'>E4</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32803'><span style='font-family:monospace;'><span style='font-size:x-small;'>EC</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32806'><span style='font-family:monospace;'><span style='font-size:x-small;'>F4</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32809'><span style='font-family:monospace;'><span style='font-size:x-small;'>FC</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32812'><span style='font-family:monospace;'><span style='font-size:x-small;'>EBP/BP/CH/MM5/XMM5</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32818'><span style='font-family:monospace;'><span style='font-size:x-small;'>101</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32821'><span style='font-family:monospace;'><span style='font-size:x-small;'>C5</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32824'><span style='font-family:monospace;'><span style='font-size:x-small;'>CD</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32827'><span style='font-family:monospace;'><span style='font-size:x-small;'>D5</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32830'><span style='font-family:monospace;'><span style='font-size:x-small;'>DD</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32833'><span style='font-family:monospace;'><span style='font-size:x-small;'>E5</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32836'><span style='font-family:monospace;'><span style='font-size:x-small;'>ED</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32839'><span style='font-family:monospace;'><span style='font-size:x-small;'>F5</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32842'><span style='font-family:monospace;'><span style='font-size:x-small;'>FD</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32845'><span style='font-family:monospace;'><span style='font-size:x-small;'>ESI/SI/DH/MM6/XMM6</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32851'><span style='font-family:monospace;'><span style='font-size:x-small;'>110</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32854'><span style='font-family:monospace;'><span style='font-size:x-small;'>C6</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32857'><span style='font-family:monospace;'><span style='font-size:x-small;'>CE</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32860'><span style='font-family:monospace;'><span style='font-size:x-small;'>D6</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32863'><span style='font-family:monospace;'><span style='font-size:x-small;'>DE</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32866'><span style='font-family:monospace;'><span style='font-size:x-small;'>E6</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32869'><span style='font-family:monospace;'><span style='font-size:x-small;'>EE</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32872'><span style='font-family:monospace;'><span style='font-size:x-small;'>F6</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32875'><span style='font-family:monospace;'><span style='font-size:x-small;'>FE</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32878'><span style='font-family:monospace;'><span style='font-size:x-small;'>EDI/DI/BH/MM7/XMM7</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32884'><span style='font-family:monospace;'><span style='font-size:x-small;'>111</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32887'><span style='font-family:monospace;'><span style='font-size:x-small;'>C7</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32890'><span style='font-family:monospace;'><span style='font-size:x-small;'>CF</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32893'><span style='font-family:monospace;'><span style='font-size:x-small;'>D7</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32896'><span style='font-family:monospace;'><span style='font-size:x-small;'>DF</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32899'><span style='font-family:monospace;'><span style='font-size:x-small;'>E7</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32902'><span style='font-family:monospace;'><span style='font-size:x-small;'>EF</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32905'><span style='font-family:monospace;'><span style='font-size:x-small;'>F7</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-32908'><span style='font-family:monospace;'><span style='font-size:x-small;'>FF</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top' colspan='11'>

<ol class="enumerate" id='magicparlabel-32911'><li class="enumerate_item"><span style='font-family:sans-serif;'><span style='font-size:x-small;'>The default segment register is SS for the effective addresses containing a BP index, DS for other effective addresses.</span></span></li>
<li class="enumerate_item"><span style='font-family:sans-serif;'><span style='font-size:x-small;'>The disp16 nomenclature denotes a 16-bit displacement that follows the ModR/M byte and that is added to the index.</span></span></li>
<li class="enumerate_item"><span style='font-family:sans-serif;'><span style='font-size:x-small;'>The disp8 nomenclature denotes an 8-bit displacement that follows the ModR/M byte and that is sign-extended and added to the index.</span></span></li>
</ol>
</td>
</tr></tbody>
</table>
<a id="mod_rm_16" />
</div>







<div class="standard" id='magicparlabel-32958'><table><tbody><tr><td style ="width: 4cm;" align='left' valign='top' colspan='3'>
<div class="plain_layout" id='magicparlabel-33427'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>r8(/r)</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33436'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>AL</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33439'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>CL</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33442'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>DL</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33445'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>BL</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33448'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>AH</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33451'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>CH</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33454'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>DH</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33457'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>BH </span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top' colspan='3'>
<div class="plain_layout" id='magicparlabel-33460'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>r16(/r)</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33469'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>AX</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33472'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>CX </span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33475'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>DX </span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33478'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>BX</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33481'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>SP </span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33484'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>BP</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33487'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>SI</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33490'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>DI </span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top' colspan='3'>
<div class="plain_layout" id='magicparlabel-33493'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>r32(/r)</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33502'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>EAX</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33505'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>ECX</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33508'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>EDX </span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33511'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>EBX </span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33514'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>ESP</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33517'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>EBP</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33520'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>ESI</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33523'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>EDI</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top' colspan='3'>
<div class="plain_layout" id='magicparlabel-33526'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>mm(/r)</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33535'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>MM0</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33538'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>MM1</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33541'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>MM2</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33544'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>MM3</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33547'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>MM4</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33550'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>MM5</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33553'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>MM6</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33556'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>MM7</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top' colspan='3'>
<div class="plain_layout" id='magicparlabel-33559'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>xmm(/r) </span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33568'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>XMM0</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33571'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>XMM1</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33574'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>XMM2</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33577'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>XMM3</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33580'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>XMM4</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33583'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>XMM5</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33586'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>XMM6</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33589'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>XMM7</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top' colspan='3'>
<div class="plain_layout" id='magicparlabel-33592'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>(In decimal) /digit (Opcode)</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33601'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>0</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33604'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>1 </span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33607'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>2</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33610'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>3</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33613'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>4</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33616'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>5</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33619'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>6</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33622'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>7 </span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top' colspan='3'>
<div class="plain_layout" id='magicparlabel-33625'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>(In binary) REG =</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33634'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>000</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33637'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>001</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33640'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>010</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33643'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>011</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33646'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>100</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33649'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>101</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33652'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>110</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33655'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>111</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33658'><b><span style='font-family:sans-serif;'><span style='font-size:x-small;'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Effective Address</span></span></b></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33661'><b><span style='font-family:sans-serif;'><span style='font-size:x-small;'>&nbsp;&nbsp;Mod</span></span></b></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33664'><b><span style='font-family:sans-serif;'><span style='font-size:x-small;'>&nbsp;&nbsp;R/M</span></span></b></div>
</td>
<td style ="width: 1cm;" align='center' valign='top' colspan='8'>
<div class="plain_layout" id='magicparlabel-33667'><b><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Values of ModR/M Byte (In Hexadecimal)</span></span></b></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33691'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EAX]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33694'><span style='font-family:monospace;'><span style='font-size:x-small;'>00</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33697'><span style='font-family:monospace;'><span style='font-size:x-small;'>000</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33700'><span style='font-family:monospace;'><span style='font-size:x-small;'>00</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33703'><span style='font-family:monospace;'><span style='font-size:x-small;'>08</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33706'><span style='font-family:monospace;'><span style='font-size:x-small;'>10</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33709'><span style='font-family:monospace;'><span style='font-size:x-small;'>18</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33712'><span style='font-family:monospace;'><span style='font-size:x-small;'>20</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33715'><span style='font-family:monospace;'><span style='font-size:x-small;'>28</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33718'><span style='font-family:monospace;'><span style='font-size:x-small;'>30</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33721'><span style='font-family:monospace;'><span style='font-size:x-small;'>38</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33724'><span style='font-family:monospace;'><span style='font-size:x-small;'>[ECX]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33730'><span style='font-family:monospace;'><span style='font-size:x-small;'>001</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33733'><span style='font-family:monospace;'><span style='font-size:x-small;'>01</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33736'><span style='font-family:monospace;'><span style='font-size:x-small;'>09</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33739'><span style='font-family:monospace;'><span style='font-size:x-small;'>11</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33742'><span style='font-family:monospace;'><span style='font-size:x-small;'>19</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33745'><span style='font-family:monospace;'><span style='font-size:x-small;'>21</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33748'><span style='font-family:monospace;'><span style='font-size:x-small;'>29</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33751'><span style='font-family:monospace;'><span style='font-size:x-small;'>31</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33754'><span style='font-family:monospace;'><span style='font-size:x-small;'>39</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33757'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EDX]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33763'><span style='font-family:monospace;'><span style='font-size:x-small;'>010</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33766'><span style='font-family:monospace;'><span style='font-size:x-small;'>02</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33769'><span style='font-family:monospace;'><span style='font-size:x-small;'>0A</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33772'><span style='font-family:monospace;'><span style='font-size:x-small;'>12</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33775'><span style='font-family:monospace;'><span style='font-size:x-small;'>1A</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33778'><span style='font-family:monospace;'><span style='font-size:x-small;'>22</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33781'><span style='font-family:monospace;'><span style='font-size:x-small;'>2A</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33784'><span style='font-family:monospace;'><span style='font-size:x-small;'>32</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33787'><span style='font-family:monospace;'><span style='font-size:x-small;'>3A</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33790'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EBX]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33796'><span style='font-family:monospace;'><span style='font-size:x-small;'>011</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33799'><span style='font-family:monospace;'><span style='font-size:x-small;'>03</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33802'><span style='font-family:monospace;'><span style='font-size:x-small;'>0B</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33805'><span style='font-family:monospace;'><span style='font-size:x-small;'>13</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33808'><span style='font-family:monospace;'><span style='font-size:x-small;'>1B</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33811'><span style='font-family:monospace;'><span style='font-size:x-small;'>23</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33814'><span style='font-family:monospace;'><span style='font-size:x-small;'>2B</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33817'><span style='font-family:monospace;'><span style='font-size:x-small;'>33</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33820'><span style='font-family:monospace;'><span style='font-size:x-small;'>3B</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33823'><span style='font-family:monospace;'><span style='font-size:x-small;'>[-][-]<sup class="script_superscript">1</sup></span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33841'><span style='font-family:monospace;'><span style='font-size:x-small;'>100</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33844'><span style='font-family:monospace;'><span style='font-size:x-small;'>04</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33847'><span style='font-family:monospace;'><span style='font-size:x-small;'>0C</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33850'><span style='font-family:monospace;'><span style='font-size:x-small;'>14</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33853'><span style='font-family:monospace;'><span style='font-size:x-small;'>1C</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33856'><span style='font-family:monospace;'><span style='font-size:x-small;'>24</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33859'><span style='font-family:monospace;'><span style='font-size:x-small;'>2C</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33862'><span style='font-family:monospace;'><span style='font-size:x-small;'>34</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33865'><span style='font-family:monospace;'><span style='font-size:x-small;'>3C</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33868'><span style='font-family:monospace;'><span style='font-size:x-small;'>disp32<sup class="script_superscript">2</sup></span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33878'><span style='font-family:monospace;'><span style='font-size:x-small;'>101</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33881'><span style='font-family:monospace;'><span style='font-size:x-small;'>05</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33884'><span style='font-family:monospace;'><span style='font-size:x-small;'>0D</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33887'><span style='font-family:monospace;'><span style='font-size:x-small;'>15</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33890'><span style='font-family:monospace;'><span style='font-size:x-small;'>1D</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33893'><span style='font-family:monospace;'><span style='font-size:x-small;'>25</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33896'><span style='font-family:monospace;'><span style='font-size:x-small;'>2D</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33899'><span style='font-family:monospace;'><span style='font-size:x-small;'>35</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33902'><span style='font-family:monospace;'><span style='font-size:x-small;'>3D</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33905'><span style='font-family:monospace;'><span style='font-size:x-small;'>[ESI]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33911'><span style='font-family:monospace;'><span style='font-size:x-small;'>110</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33914'><span style='font-family:monospace;'><span style='font-size:x-small;'>06</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33917'><span style='font-family:monospace;'><span style='font-size:x-small;'>0E</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33920'><span style='font-family:monospace;'><span style='font-size:x-small;'>16</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33923'><span style='font-family:monospace;'><span style='font-size:x-small;'>1E</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33926'><span style='font-family:monospace;'><span style='font-size:x-small;'>26</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33929'><span style='font-family:monospace;'><span style='font-size:x-small;'>2E</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33932'><span style='font-family:monospace;'><span style='font-size:x-small;'>36</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33935'><span style='font-family:monospace;'><span style='font-size:x-small;'>3E</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33938'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EDI]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33944'><span style='font-family:monospace;'><span style='font-size:x-small;'>111</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33947'><span style='font-family:monospace;'><span style='font-size:x-small;'>07</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33950'><span style='font-family:monospace;'><span style='font-size:x-small;'>0F</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33953'><span style='font-family:monospace;'><span style='font-size:x-small;'>17</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33956'><span style='font-family:monospace;'><span style='font-size:x-small;'>1F</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33959'><span style='font-family:monospace;'><span style='font-size:x-small;'>27</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33962'><span style='font-family:monospace;'><span style='font-size:x-small;'>2F</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33965'><span style='font-family:monospace;'><span style='font-size:x-small;'>37</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33968'><span style='font-family:monospace;'><span style='font-size:x-small;'>3F</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33971'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EAX] + disp8<sup class="script_superscript"><span style='font-family:sans-serif;'><span style='font-size:x-small;'>3</span></span></sup></span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33978'><span style='font-family:monospace;'><span style='font-size:x-small;'>01</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33981'><span style='font-family:monospace;'><span style='font-size:x-small;'>000</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33984'><span style='font-family:monospace;'><span style='font-size:x-small;'>40</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33987'><span style='font-family:monospace;'><span style='font-size:x-small;'>48</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33990'><span style='font-family:monospace;'><span style='font-size:x-small;'>50</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33993'><span style='font-family:monospace;'><span style='font-size:x-small;'>58</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33996'><span style='font-family:monospace;'><span style='font-size:x-small;'>60</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-33999'><span style='font-family:monospace;'><span style='font-size:x-small;'>68</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34002'><span style='font-family:monospace;'><span style='font-size:x-small;'>70</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34005'><span style='font-family:monospace;'><span style='font-size:x-small;'>78</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34008'><span style='font-family:monospace;'><span style='font-size:x-small;'>[ECX] + disp8</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34014'><span style='font-family:monospace;'><span style='font-size:x-small;'>001</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34017'><span style='font-family:monospace;'><span style='font-size:x-small;'>41</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34020'><span style='font-family:monospace;'><span style='font-size:x-small;'>49</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34023'><span style='font-family:monospace;'><span style='font-size:x-small;'>51</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34026'><span style='font-family:monospace;'><span style='font-size:x-small;'>59</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34029'><span style='font-family:monospace;'><span style='font-size:x-small;'>61</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34032'><span style='font-family:monospace;'><span style='font-size:x-small;'>69</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34035'><span style='font-family:monospace;'><span style='font-size:x-small;'>71</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34038'><span style='font-family:monospace;'><span style='font-size:x-small;'>79</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34041'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EDX] + disp8</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34047'><span style='font-family:monospace;'><span style='font-size:x-small;'>010</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34050'><span style='font-family:monospace;'><span style='font-size:x-small;'>42</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34053'><span style='font-family:monospace;'><span style='font-size:x-small;'>4A</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34056'><span style='font-family:monospace;'><span style='font-size:x-small;'>52</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34059'><span style='font-family:monospace;'><span style='font-size:x-small;'>5A</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34062'><span style='font-family:monospace;'><span style='font-size:x-small;'>62</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34065'><span style='font-family:monospace;'><span style='font-size:x-small;'>6A</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34068'><span style='font-family:monospace;'><span style='font-size:x-small;'>72</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34071'><span style='font-family:monospace;'><span style='font-size:x-small;'>7A</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34074'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EBX] + disp8</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34080'><span style='font-family:monospace;'><span style='font-size:x-small;'>011</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34083'><span style='font-family:monospace;'><span style='font-size:x-small;'>43</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34086'><span style='font-family:monospace;'><span style='font-size:x-small;'>4B</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34089'><span style='font-family:monospace;'><span style='font-size:x-small;'>53</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34092'><span style='font-family:monospace;'><span style='font-size:x-small;'>5B</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34095'><span style='font-family:monospace;'><span style='font-size:x-small;'>63</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34098'><span style='font-family:monospace;'><span style='font-size:x-small;'>6B</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34101'><span style='font-family:monospace;'><span style='font-size:x-small;'>73</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34104'><span style='font-family:monospace;'><span style='font-size:x-small;'>7B</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34107'><span style='font-family:monospace;'><span style='font-size:x-small;'>[-][-] + disp8</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34121'><span style='font-family:monospace;'><span style='font-size:x-small;'>100</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34124'><span style='font-family:monospace;'><span style='font-size:x-small;'>44</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34127'><span style='font-family:monospace;'><span style='font-size:x-small;'>4C</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34130'><span style='font-family:monospace;'><span style='font-size:x-small;'>54</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34133'><span style='font-family:monospace;'><span style='font-size:x-small;'>5C</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34136'><span style='font-family:monospace;'><span style='font-size:x-small;'>64</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34139'><span style='font-family:monospace;'><span style='font-size:x-small;'>6C</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34142'><span style='font-family:monospace;'><span style='font-size:x-small;'>74</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34145'><span style='font-family:monospace;'><span style='font-size:x-small;'>7C</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34148'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EBP] + disp8</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34154'><span style='font-family:monospace;'><span style='font-size:x-small;'>101</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34157'><span style='font-family:monospace;'><span style='font-size:x-small;'>45</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34160'><span style='font-family:monospace;'><span style='font-size:x-small;'>4D</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34163'><span style='font-family:monospace;'><span style='font-size:x-small;'>55</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34166'><span style='font-family:monospace;'><span style='font-size:x-small;'>5D</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34169'><span style='font-family:monospace;'><span style='font-size:x-small;'>65</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34172'><span style='font-family:monospace;'><span style='font-size:x-small;'>6D</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34175'><span style='font-family:monospace;'><span style='font-size:x-small;'>75</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34178'><span style='font-family:monospace;'><span style='font-size:x-small;'>7D</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34181'><span style='font-family:monospace;'><span style='font-size:x-small;'>[ESI] + disp8</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34187'><span style='font-family:monospace;'><span style='font-size:x-small;'>110</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34190'><span style='font-family:monospace;'><span style='font-size:x-small;'>46</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34193'><span style='font-family:monospace;'><span style='font-size:x-small;'>4E</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34196'><span style='font-family:monospace;'><span style='font-size:x-small;'>56</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34199'><span style='font-family:monospace;'><span style='font-size:x-small;'>5E</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34202'><span style='font-family:monospace;'><span style='font-size:x-small;'>66</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34205'><span style='font-family:monospace;'><span style='font-size:x-small;'>6E</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34208'><span style='font-family:monospace;'><span style='font-size:x-small;'>76</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34211'><span style='font-family:monospace;'><span style='font-size:x-small;'>7E</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34214'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EDI] + disp8</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34220'><span style='font-family:monospace;'><span style='font-size:x-small;'>111</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34223'><span style='font-family:monospace;'><span style='font-size:x-small;'>47</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34226'><span style='font-family:monospace;'><span style='font-size:x-small;'>4F</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34229'><span style='font-family:monospace;'><span style='font-size:x-small;'>57</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34232'><span style='font-family:monospace;'><span style='font-size:x-small;'>5F</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34235'><span style='font-family:monospace;'><span style='font-size:x-small;'>67</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34238'><span style='font-family:monospace;'><span style='font-size:x-small;'>6F</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34241'><span style='font-family:monospace;'><span style='font-size:x-small;'>77</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34244'><span style='font-family:monospace;'><span style='font-size:x-small;'>7F</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34247'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EAX] + disp32</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34250'><span style='font-family:monospace;'><span style='font-size:x-small;'>10</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34253'><span style='font-family:monospace;'><span style='font-size:x-small;'>000</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34256'><span style='font-family:monospace;'><span style='font-size:x-small;'>80</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34259'><span style='font-family:monospace;'><span style='font-size:x-small;'>88</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34262'><span style='font-family:monospace;'><span style='font-size:x-small;'>90</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34265'><span style='font-family:monospace;'><span style='font-size:x-small;'>98</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34268'><span style='font-family:monospace;'><span style='font-size:x-small;'>A0</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34271'><span style='font-family:monospace;'><span style='font-size:x-small;'>A8</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34274'><span style='font-family:monospace;'><span style='font-size:x-small;'>B0</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34277'><span style='font-family:monospace;'><span style='font-size:x-small;'>B8</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34280'><span style='font-family:monospace;'><span style='font-size:x-small;'>[ECX] + disp32</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34286'><span style='font-family:monospace;'><span style='font-size:x-small;'>001</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34289'><span style='font-family:monospace;'><span style='font-size:x-small;'>81</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34292'><span style='font-family:monospace;'><span style='font-size:x-small;'>89</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34295'><span style='font-family:monospace;'><span style='font-size:x-small;'>91</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34298'><span style='font-family:monospace;'><span style='font-size:x-small;'>99</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34301'><span style='font-family:monospace;'><span style='font-size:x-small;'>A1</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34304'><span style='font-family:monospace;'><span style='font-size:x-small;'>A9</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34307'><span style='font-family:monospace;'><span style='font-size:x-small;'>B1</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34310'><span style='font-family:monospace;'><span style='font-size:x-small;'>B9</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34313'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EDX] + disp32</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34319'><span style='font-family:monospace;'><span style='font-size:x-small;'>010</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34322'><span style='font-family:monospace;'><span style='font-size:x-small;'>82</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34325'><span style='font-family:monospace;'><span style='font-size:x-small;'>8A</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34328'><span style='font-family:monospace;'><span style='font-size:x-small;'>92</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34331'><span style='font-family:monospace;'><span style='font-size:x-small;'>9A</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34334'><span style='font-family:monospace;'><span style='font-size:x-small;'>A2</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34337'><span style='font-family:monospace;'><span style='font-size:x-small;'>AA</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34340'><span style='font-family:monospace;'><span style='font-size:x-small;'>B2</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34343'><span style='font-family:monospace;'><span style='font-size:x-small;'>BA</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34346'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EBX] + disp32</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34352'><span style='font-family:monospace;'><span style='font-size:x-small;'>011</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34355'><span style='font-family:monospace;'><span style='font-size:x-small;'>83</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34358'><span style='font-family:monospace;'><span style='font-size:x-small;'>8B</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34361'><span style='font-family:monospace;'><span style='font-size:x-small;'>93</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34364'><span style='font-family:monospace;'><span style='font-size:x-small;'>9B</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34367'><span style='font-family:monospace;'><span style='font-size:x-small;'>A3</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34370'><span style='font-family:monospace;'><span style='font-size:x-small;'>AB</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34373'><span style='font-family:monospace;'><span style='font-size:x-small;'>B3</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34376'><span style='font-family:monospace;'><span style='font-size:x-small;'>BB</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34379'><span style='font-family:monospace;'><span style='font-size:x-small;'>[-][-] + disp32</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34393'><span style='font-family:monospace;'><span style='font-size:x-small;'>100</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34396'><span style='font-family:monospace;'><span style='font-size:x-small;'>84</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34399'><span style='font-family:monospace;'><span style='font-size:x-small;'>8C</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34402'><span style='font-family:monospace;'><span style='font-size:x-small;'>94</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34405'><span style='font-family:monospace;'><span style='font-size:x-small;'>9C</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34408'><span style='font-family:monospace;'><span style='font-size:x-small;'>A4</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34411'><span style='font-family:monospace;'><span style='font-size:x-small;'>AC</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34414'><span style='font-family:monospace;'><span style='font-size:x-small;'>B4</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34417'><span style='font-family:monospace;'><span style='font-size:x-small;'>BC</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34420'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EBP] + disp32</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34426'><span style='font-family:monospace;'><span style='font-size:x-small;'>101</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34429'><span style='font-family:monospace;'><span style='font-size:x-small;'>85</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34432'><span style='font-family:monospace;'><span style='font-size:x-small;'>8D</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34435'><span style='font-family:monospace;'><span style='font-size:x-small;'>95</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34438'><span style='font-family:monospace;'><span style='font-size:x-small;'>9D</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34441'><span style='font-family:monospace;'><span style='font-size:x-small;'>A5</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34444'><span style='font-family:monospace;'><span style='font-size:x-small;'>AD</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34447'><span style='font-family:monospace;'><span style='font-size:x-small;'>B5</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34450'><span style='font-family:monospace;'><span style='font-size:x-small;'>BD</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34453'><span style='font-family:monospace;'><span style='font-size:x-small;'>[ESI] + disp32</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34459'><span style='font-family:monospace;'><span style='font-size:x-small;'>110</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34462'><span style='font-family:monospace;'><span style='font-size:x-small;'>86</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34465'><span style='font-family:monospace;'><span style='font-size:x-small;'>8E</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34468'><span style='font-family:monospace;'><span style='font-size:x-small;'>96</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34471'><span style='font-family:monospace;'><span style='font-size:x-small;'>9E</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34474'><span style='font-family:monospace;'><span style='font-size:x-small;'>A6</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34477'><span style='font-family:monospace;'><span style='font-size:x-small;'>AE</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34480'><span style='font-family:monospace;'><span style='font-size:x-small;'>B6</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34483'><span style='font-family:monospace;'><span style='font-size:x-small;'>BE</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34486'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EDI] + disp32</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34492'><span style='font-family:monospace;'><span style='font-size:x-small;'>111</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34495'><span style='font-family:monospace;'><span style='font-size:x-small;'>87</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34498'><span style='font-family:monospace;'><span style='font-size:x-small;'>8F</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34501'><span style='font-family:monospace;'><span style='font-size:x-small;'>97</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34504'><span style='font-family:monospace;'><span style='font-size:x-small;'>9F</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34507'><span style='font-family:monospace;'><span style='font-size:x-small;'>A7</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34510'><span style='font-family:monospace;'><span style='font-size:x-small;'>AF</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34513'><span style='font-family:monospace;'><span style='font-size:x-small;'>B7</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34516'><span style='font-family:monospace;'><span style='font-size:x-small;'>BF</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34519'><span style='font-family:monospace;'><span style='font-size:x-small;'>EAX/AX/AL/MM0/XMM0</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34522'><span style='font-family:monospace;'><span style='font-size:x-small;'>11</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34525'><span style='font-family:monospace;'><span style='font-size:x-small;'>000</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34528'><span style='font-family:monospace;'><span style='font-size:x-small;'>C0</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34531'><span style='font-family:monospace;'><span style='font-size:x-small;'>C8</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34534'><span style='font-family:monospace;'><span style='font-size:x-small;'>D0</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34537'><span style='font-family:monospace;'><span style='font-size:x-small;'>D8</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34540'><span style='font-family:monospace;'><span style='font-size:x-small;'>E0</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34543'><span style='font-family:monospace;'><span style='font-size:x-small;'>E8</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34546'><span style='font-family:monospace;'><span style='font-size:x-small;'>F0</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34549'><span style='font-family:monospace;'><span style='font-size:x-small;'>F8</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34552'><span style='font-family:monospace;'><span style='font-size:x-small;'>ECX/CX/CL/MM/XMM1</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34558'><span style='font-family:monospace;'><span style='font-size:x-small;'>001</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34561'><span style='font-family:monospace;'><span style='font-size:x-small;'>C1</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34564'><span style='font-family:monospace;'><span style='font-size:x-small;'>C9</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34567'><span style='font-family:monospace;'><span style='font-size:x-small;'>D1</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34570'><span style='font-family:monospace;'><span style='font-size:x-small;'>D9</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34573'><span style='font-family:monospace;'><span style='font-size:x-small;'>E1</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34576'><span style='font-family:monospace;'><span style='font-size:x-small;'>E9</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34579'><span style='font-family:monospace;'><span style='font-size:x-small;'>F1</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34582'><span style='font-family:monospace;'><span style='font-size:x-small;'>F9</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34585'><span style='font-family:monospace;'><span style='font-size:x-small;'>EDX/DX/DL/MM2/XMM2</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34591'><span style='font-family:monospace;'><span style='font-size:x-small;'>010</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34594'><span style='font-family:monospace;'><span style='font-size:x-small;'>C2</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34597'><span style='font-family:monospace;'><span style='font-size:x-small;'>CA</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34600'><span style='font-family:monospace;'><span style='font-size:x-small;'>D2</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34603'><span style='font-family:monospace;'><span style='font-size:x-small;'>DA</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34606'><span style='font-family:monospace;'><span style='font-size:x-small;'>E2</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34609'><span style='font-family:monospace;'><span style='font-size:x-small;'>EA</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34612'><span style='font-family:monospace;'><span style='font-size:x-small;'>F2</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34615'><span style='font-family:monospace;'><span style='font-size:x-small;'>FA</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34618'><span style='font-family:monospace;'><span style='font-size:x-small;'>EBX/BX/BL/MM3/XMM3</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34624'><span style='font-family:monospace;'><span style='font-size:x-small;'>011</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34627'><span style='font-family:monospace;'><span style='font-size:x-small;'>C3</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34630'><span style='font-family:monospace;'><span style='font-size:x-small;'>CB</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34633'><span style='font-family:monospace;'><span style='font-size:x-small;'>D3</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34636'><span style='font-family:monospace;'><span style='font-size:x-small;'>DB</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34639'><span style='font-family:monospace;'><span style='font-size:x-small;'>E3</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34642'><span style='font-family:monospace;'><span style='font-size:x-small;'>EB</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34645'><span style='font-family:monospace;'><span style='font-size:x-small;'>F3</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34648'><span style='font-family:monospace;'><span style='font-size:x-small;'>FB</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34651'><span style='font-family:monospace;'><span style='font-size:x-small;'>ESP/SP/AH/MM4/XMM4</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34657'><span style='font-family:monospace;'><span style='font-size:x-small;'>100</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34660'><span style='font-family:monospace;'><span style='font-size:x-small;'>C4</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34663'><span style='font-family:monospace;'><span style='font-size:x-small;'>CC</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34666'><span style='font-family:monospace;'><span style='font-size:x-small;'>D4</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34669'><span style='font-family:monospace;'><span style='font-size:x-small;'>DC</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34672'><span style='font-family:monospace;'><span style='font-size:x-small;'>E4</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34675'><span style='font-family:monospace;'><span style='font-size:x-small;'>EC</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34678'><span style='font-family:monospace;'><span style='font-size:x-small;'>F4</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34681'><span style='font-family:monospace;'><span style='font-size:x-small;'>FC</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34684'><span style='font-family:monospace;'><span style='font-size:x-small;'>EBP/BP/CH/MM5/XMM5</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34690'><span style='font-family:monospace;'><span style='font-size:x-small;'>101</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34693'><span style='font-family:monospace;'><span style='font-size:x-small;'>C5</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34696'><span style='font-family:monospace;'><span style='font-size:x-small;'>CD</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34699'><span style='font-family:monospace;'><span style='font-size:x-small;'>D5</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34702'><span style='font-family:monospace;'><span style='font-size:x-small;'>DD</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34705'><span style='font-family:monospace;'><span style='font-size:x-small;'>E5</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34708'><span style='font-family:monospace;'><span style='font-size:x-small;'>ED</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34711'><span style='font-family:monospace;'><span style='font-size:x-small;'>F5</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34714'><span style='font-family:monospace;'><span style='font-size:x-small;'>FD</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34717'><span style='font-family:monospace;'><span style='font-size:x-small;'>ESI/SI/DH/MM6/XMM6</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34723'><span style='font-family:monospace;'><span style='font-size:x-small;'>110</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34726'><span style='font-family:monospace;'><span style='font-size:x-small;'>C6</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34729'><span style='font-family:monospace;'><span style='font-size:x-small;'>CE</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34732'><span style='font-family:monospace;'><span style='font-size:x-small;'>D6</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34735'><span style='font-family:monospace;'><span style='font-size:x-small;'>DE</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34738'><span style='font-family:monospace;'><span style='font-size:x-small;'>E6</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34741'><span style='font-family:monospace;'><span style='font-size:x-small;'>EE</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34744'><span style='font-family:monospace;'><span style='font-size:x-small;'>F6</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34747'><span style='font-family:monospace;'><span style='font-size:x-small;'>FE</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34750'><span style='font-family:monospace;'><span style='font-size:x-small;'>EDI/DI/BH/MM7/XMM7</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34756'><span style='font-family:monospace;'><span style='font-size:x-small;'>111</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34759'><span style='font-family:monospace;'><span style='font-size:x-small;'>C7</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34762'><span style='font-family:monospace;'><span style='font-size:x-small;'>CF</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34765'><span style='font-family:monospace;'><span style='font-size:x-small;'>D7</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34768'><span style='font-family:monospace;'><span style='font-size:x-small;'>DF</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34771'><span style='font-family:monospace;'><span style='font-size:x-small;'>E7</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34774'><span style='font-family:monospace;'><span style='font-size:x-small;'>EF</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34777'><span style='font-family:monospace;'><span style='font-size:x-small;'>F7</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-34780'><span style='font-family:monospace;'><span style='font-size:x-small;'>FF</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top' colspan='11'>

<ol class="enumerate" id='magicparlabel-34783'><li class="enumerate_item"><span style='font-family:sans-serif;'><span style='font-size:x-small;'>The [-][-] nomenclature means a SIB follows the ModR/M byte.</span></span></li>
<li class="enumerate_item"><span style='font-family:sans-serif;'><span style='font-size:x-small;'>The disp32 nomenclature denotes a 32-bit displacement that follows the ModR/M byte (or the SIB byte if one is present) and that is added to the index.</span></span></li>
<li class="enumerate_item"><span style='font-family:sans-serif;'><span style='font-size:x-small;'>The disp8 nomenclature denotes an 8-bit displacement that follows the ModR/M byte (or the SIB byte if one is present) and that is sign-extended and added to the index.</span></span></li>
</ol>
</td>
</tr></tbody>
</table>
<a id="mod_rm_32" />
</div>



<div class="standard" id='magicparlabel-34830'><div style='height:1em'></div></div>

<div class="standard" id='magicparlabel-34831'><br />
</div>

<div class="standard" id='magicparlabel-34832'><span class='noun'>How to read the table:</span></div>

<div class="standard" id='magicparlabel-34837'>In an instruction, next to the opcode is a <span style='font-family:monospace;'>ModR/M</span> byte. Then, look up the byte value in this table to get the corresponding operands in the row and column.
<br />

</div>

<div class="standard" style='text-align: left;' id='magicparlabel-34838'><hr />

</div>

<div class="example" id='magicparlabel-34839'><div class="example_item"><span class="example_label">Example 0.9.</span>
An instruction uses this addressing mode:
<br />

</div>

<div class="lyx_code" id='magicparlabel-34840'><div class="lyx_code_item">jmp [0x1234]</div>
</div>
<div class="standard" style='text-align: left;' id='magicparlabel-34841'>Then, the machine code is:</div>

<div class="lyx_code" id='magicparlabel-34842'><div class="lyx_code_item">ff 26 34 12</div>
</div>
<div class="standard" style='text-align: left;' id='magicparlabel-34843'><span style='font-family:monospace;'>0xff</span> is the opcode. Next to it, <span style='font-family:monospace;'>0x26</span> is the <span style='font-family:monospace;'>ModR/M</span> byte. Look up in the 16-bit table <div class="marginal"><div class="plain_layout" id='magicparlabel-34847'>Remember, using <span style='font-family:monospace;'>bin </span>format generates 16-bit code by default</div>
</div>, the first operand is in the row, equivalent to a <span style='font-family:monospace;'>disp16</span>, which means a 16-bit offset. Since the instruction does not have a second operand, the column can be ignored.</div>

<div class="example" id='magicparlabel-34848'><div class="example_item"><span class="example_label">Example 0.10.</span>
An instruction uses this addressing mode:</div>
</div>

<div class="lyx_code" id='magicparlabel-34849'><div class="lyx_code_item">add eax, ecx</div>
</div>
<div class="standard" style='text-align: left;' id='magicparlabel-34850'>Then the machine code is:</div>

<div class="lyx_code" id='magicparlabel-34851'><div class="lyx_code_item">66 01 c8</div>
</div>
<div class="standard" style='text-align: left;' id='magicparlabel-34852'>The interesting feature of this instruction is that <span style='font-family:monospace;'>0x66</span> is the not the opcode. <span style='font-family:monospace;'>0x01</span> is the opcode. So then, what is <span style='font-family:monospace;'>0x66</span>? Recall that for every assembly instruction, there will be an optional instruction prefix, and that is what <span style='font-family:monospace;'>0x66</span> is. According to the Intel manual, vol 1:</div>

<blockquote class="quote" id='magicparlabel-34853'><div class="quote_item">The operand-size override prefix allows a program to switch between 16- and 32-bit operand sizes. Either size can be the default; use of the prefix selects the non-default size.</div>
</blockquote>
<div class="standard" id='magicparlabel-34854'>If the CPU is switched to 32-bit mode, when it runs an instruction with <span style='font-family:monospace;'>0x66</span> prefix, the instruction operands are limited to only 16-bit width. On the other hand, if the CPU is in 16-bit environment, as a result, 32-bit is considered non-standard and as such, instruction operands are temporary upgraded to 32-bit width while the instructions without the prefix use 16-bit operands.</div>

<div class="standard" style='text-align: left;' id='magicparlabel-34855'>Next to it, <span style='font-family:monospace;'>c8 </span>is the<span style='font-family:monospace;'> ModR/M </span>byte. Look up in the 16-bit table at <span style='font-family:monospace;'>c8</span> value, the row tells the first operand is <span style='font-family:monospace;'>ax</span> <div class="marginal"><div class="plain_layout" id='magicparlabel-34859'>Remember, using bin format generates 16-bit code by default</div>
</div>, the column tells the second operand is <span style='font-family:monospace;'>cx</span>; the column can't be ignored as the second operand is in the instruction.</div>

<div class="standard" id='magicparlabel-34860'>Why is the first operand in the row and the second in a column? Let's break down the <span style='font-family:monospace;'>ModR/M</span> byte, with an example value <span style='font-family:monospace;'>c8</span>, into bits:
<br />

</div>



<div class="standard" style='text-align: center;' id='magicparlabel-34861'><table><tbody><tr><td style ="width: 0.4cm;" align='center' valign='top' colspan='2'>
<div class="plain_layout" id='magicparlabel-34892'><b>mod</b></div>
</td>
<td style ="width: 0.4cm;" align='center' valign='top' colspan='3'>
<div class="plain_layout" id='magicparlabel-34898'><b>reg/opcode</b></div>
</td>
<td style ="width: 0.4cm;" align='center' valign='top' colspan='3'>
<div class="plain_layout" id='magicparlabel-34907'><b>r/m</b></div>
</td>
</tr><tr><td style ="width: 0.4cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-34916'>1</div>
</td>
<td style ="width: 0.4cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-34919'>1</div>
</td>
<td style ="width: 0.4cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-34922'>0</div>
</td>
<td style ="width: 0.4cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-34925'>0</div>
</td>
<td style ="width: 0.4cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-34928'>1</div>
</td>
<td style ="width: 0.4cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-34931'>0</div>
</td>
<td style ="width: 0.4cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-34934'>0</div>
</td>
<td style ="width: 0.4cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-34937'>0</div>
</td>
</tr></tbody>
</table>
</div>

<div class="standard" id='magicparlabel-34938'>The <span style='font-family:monospace;'>mod</span> field divides addressing modes into 4 different categories. Further combines with the <span style='font-family:monospace;'>r/m</span> field, exactly one addressing mode can be selected from one of the 24 rows. If an instruction only requires one operand, then the column can be ignored. Then the <span style='font-family:monospace;'>reg/opcode</span> field finally provides an extra register or different variants, if an instruction requires one.
<br />

</div>
</div>
<div class="standard" style='text-align: left;' id='magicparlabel-34939'><hr />

</div>

<dl class='description' id='magicparlabel-34940'><dt class="description_label">SIB</dt>
<dd class="description_item"> is <em><b>S</b>cale-<b>I</b>ndex-<b>B</b>ase</em> byte. This byte encodes ways to calculate the memory position into an element of an array. SIB is the name that is based on this formula for calculating an effective address:
<br />


<div class="standard" style='text-align: center;' id='magicparlabel-34941'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mstyle mathvariant='monospace'>
   <mrow><mi>E</mi><mi>f</mi><mi>f</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>e</mi><mspace width="6px" /><mi>a</mi><mi>d</mi><mi>d</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mo>=</mo><mi>s</mi><mi>c</mi><mi>a</mi><mi>l</mi><mi>e</mi><mo>*</mo><mi>i</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mo>+</mo><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi>
   </mrow>
  </mstyle>
 </mrow></math></div>

<ul class="itemize" id='magicparlabel-34942'><li class="itemize_item"><span style='font-family:monospace;'>Index</span> is an offset into an array.</li>
<li class="itemize_item"><span style='font-family:monospace;'>Scale</span> is a factor of <span style='font-family:monospace;'>Index</span>. <span style='font-family:monospace;'>Scale</span> is one of the values 1, 2, 4 or 8; any other value is invalid. To scale with values other than 2, 4 or 8, the scale factor must be set to 1, and the offset must be calculated manually. For example, if we want to get the address of the <span style='font-family:monospace;'>n<sup class="script_superscript"><span style='font-family:monospace;'>th</span></sup></span> element in an array and each element is <span style='font-family:monospace;'>12</span>-bytes long. Because each element is 12-bytes long instead of 1, 2, 4 or 8, <span style='font-family:monospace;'>Scale</span> is set to 1 and a compiler needs to calculate the offset:
<br />


<div class="standard" style='text-align: center;' id='magicparlabel-34948'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mstyle mathvariant='monospace'>
   <mrow><mi>E</mi><mi>f</mi><mi>f</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>e</mi><mspace width="6px" /><mi>a</mi><mi>d</mi><mi>d</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mo>=</mo><mn>1</mn><mo>*</mo><mo form='prefix' fence='true' stretchy='true' symmetric='true'>(</mo>

    <mrow><mn>12</mn><mo>*</mo><mi>n</mi>
    </mrow>
<mo form='postfix' fence='true' stretchy='true' symmetric='true'>)</mo>
<mo>+</mo><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi>
   </mrow>
  </mstyle>
 </mrow></math></div>

<div class="standard" id='magicparlabel-34949'>Why do we bother with SIB when we can manually calculate the offset? The answer is that in the above scenario, an additional <span style='font-family:monospace;'>mul</span> instruction must be executed to get the offset, and the <span style='font-family:monospace;'>mul </span>instruction consumes more than 1 byte, while the SIB only consumes 1 byte. More importantly, if the element is repeatedly accessed many times in a loop, e.g. millions of times, then an extra <span style='font-family:monospace;'>mul</span> instruction can detriment the performance as the CPU must spend time executing millions of these additional <span style='font-family:monospace;'>mul</span> instructions. </div>

<div class="standard" id='magicparlabel-34950'>The values 2, 4 and 8 are not random chosen. They map to 16-bit (or 2 bytes), 32-bit (or 4 bytes) and 64-bit (or 8 bytes) numbers that are often used for intensive numeric calculations.</div>
</li><li class="itemize_item"><span style='font-family:monospace;'>Base</span> is the starting address.</li>
</ul>
<div class="standard" id='magicparlabel-34952'>Below is the table listing all 256 values of <span style='font-family:monospace;'>SIB</span> byte, with the lookup rule similar to <span style='font-family:monospace;'>ModR/M</span> tables:</div>





<div class="standard" id='magicparlabel-34961'><table><tbody><tr><td style ="width: 4cm;" align='left' valign='top' colspan='3'>
<div class="plain_layout" id='magicparlabel-35386'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>r32(/r)</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35395'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>EAX</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35398'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>ECX</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35401'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>EDX </span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35404'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>EBX </span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35407'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>ESP</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35410'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>EBP</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35413'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>ESI</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35416'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>EDI</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top' colspan='3'>
<div class="plain_layout" id='magicparlabel-35419'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>(In decimal) /digit (Opcode)</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35428'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>0</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35431'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>1 </span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35434'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>2</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35437'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>3</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35440'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>4</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35443'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>5</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35446'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>6</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35449'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>7 </span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top' colspan='3'>
<div class="plain_layout" id='magicparlabel-35452'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>(In binary) REG =</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35461'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>000</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35464'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>001</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35467'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>010</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35470'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>011</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35473'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>100</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35476'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>101</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35479'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>110</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35482'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>111</span></span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35485'><b><span style='font-family:sans-serif;'><span style='font-size:x-small;'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Effective Address</span></span></b></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35488'><b><span style='font-family:sans-serif;'><span style='font-size:x-small;'>&nbsp;&nbsp;SS</span></span></b></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35491'><b><span style='font-family:sans-serif;'><span style='font-size:x-small;'>&nbsp;&nbsp;R/M</span></span></b></div>
</td>
<td style ="width: 1cm;" align='center' valign='top' colspan='8'>
<div class="plain_layout" id='magicparlabel-35494'><b><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Values of SIB Byte (In Hexadecimal)</span></span></b></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35518'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EAX]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35521'><span style='font-family:monospace;'><span style='font-size:x-small;'>00</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35524'><span style='font-family:monospace;'><span style='font-size:x-small;'>000</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35527'><span style='font-family:monospace;'>00</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35530'><span style='font-family:monospace;'>01</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35533'><span style='font-family:monospace;'>02</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35536'><span style='font-family:monospace;'>03</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35539'><span style='font-family:monospace;'>04</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35542'><span style='font-family:monospace;'>05</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35545'><span style='font-family:monospace;'>06</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35548'><span style='font-family:monospace;'>07</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35551'><span style='font-family:monospace;'><span style='font-size:x-small;'>[ECX]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35557'><span style='font-family:monospace;'><span style='font-size:x-small;'>001</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35560'><span style='font-family:monospace;'>08</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35563'><span style='font-family:monospace;'>09</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35566'><span style='font-family:monospace;'>0A</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35569'><span style='font-family:monospace;'>0B</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35572'><span style='font-family:monospace;'>0C</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35575'><span style='font-family:monospace;'>0D</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35578'><span style='font-family:monospace;'>0E</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35581'><span style='font-family:monospace;'>0F</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35584'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EDX]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35590'><span style='font-family:monospace;'><span style='font-size:x-small;'>010</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35593'><span style='font-family:monospace;'>10</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35596'><span style='font-family:monospace;'>11</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35599'><span style='font-family:monospace;'>12</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35602'><span style='font-family:monospace;'>13</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35605'><span style='font-family:monospace;'>14</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35608'><span style='font-family:monospace;'>15</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35611'><span style='font-family:monospace;'>16</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35614'><span style='font-family:monospace;'>17</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35617'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EBX]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35623'><span style='font-family:monospace;'><span style='font-size:x-small;'>011</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35626'><span style='font-family:monospace;'>18</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35629'><span style='font-family:monospace;'>19</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35632'><span style='font-family:monospace;'>1A</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35635'><span style='font-family:monospace;'>1B</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35638'><span style='font-family:monospace;'>1C</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35641'><span style='font-family:monospace;'>1D</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35644'><span style='font-family:monospace;'>1E</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35647'><span style='font-family:monospace;'>1F</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35650'><span style='font-family:monospace;'><span style='font-size:x-small;'>none</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35656'><span style='font-family:monospace;'><span style='font-size:x-small;'>100</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35659'><span style='font-family:monospace;'>20</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35662'><span style='font-family:monospace;'>21</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35665'><span style='font-family:monospace;'>22</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35668'><span style='font-family:monospace;'>23</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35671'><span style='font-family:monospace;'>24</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35674'><span style='font-family:monospace;'>25</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35677'><span style='font-family:monospace;'>26</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35680'><span style='font-family:monospace;'>27</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35683'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EBP]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35689'><span style='font-family:monospace;'><span style='font-size:x-small;'>101</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35692'><span style='font-family:monospace;'>28</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35695'><span style='font-family:monospace;'>29</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35698'><span style='font-family:monospace;'>2A</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35701'><span style='font-family:monospace;'>2B</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35704'><span style='font-family:monospace;'>2C</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35707'><span style='font-family:monospace;'>2D</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35710'><span style='font-family:monospace;'>2E</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35713'><span style='font-family:monospace;'>2F</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35716'><span style='font-family:monospace;'><span style='font-size:x-small;'>[ESI]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35722'><span style='font-family:monospace;'><span style='font-size:x-small;'>110</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35725'><span style='font-family:monospace;'>30</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35728'><span style='font-family:monospace;'>31</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35731'><span style='font-family:monospace;'>32</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35734'><span style='font-family:monospace;'>33</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35737'><span style='font-family:monospace;'>34</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35740'><span style='font-family:monospace;'>35</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35743'><span style='font-family:monospace;'>36</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35746'><span style='font-family:monospace;'>37</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35749'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EDI]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35755'><span style='font-family:monospace;'><span style='font-size:x-small;'>111</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35758'><span style='font-family:monospace;'>38</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35761'><span style='font-family:monospace;'>39</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35764'><span style='font-family:monospace;'>3A</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35767'><span style='font-family:monospace;'>3B</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35770'><span style='font-family:monospace;'>3C</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35773'><span style='font-family:monospace;'>3D</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35776'><span style='font-family:monospace;'>3E</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35779'><span style='font-family:monospace;'>3F</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35782'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EAX*2]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35785'><span style='font-family:monospace;'><span style='font-size:x-small;'>01</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35788'><span style='font-family:monospace;'><span style='font-size:x-small;'>000</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35791'><span style='font-family:monospace;'>40</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35794'><span style='font-family:monospace;'>41</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35797'><span style='font-family:monospace;'>42</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35800'><span style='font-family:monospace;'>43</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35803'><span style='font-family:monospace;'>44</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35806'><span style='font-family:monospace;'>45</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35809'><span style='font-family:monospace;'>46</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35812'><span style='font-family:monospace;'>47</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35815'><span style='font-family:monospace;'><span style='font-size:x-small;'>[ECX*2]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35821'><span style='font-family:monospace;'><span style='font-size:x-small;'>001</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35824'><span style='font-family:monospace;'>48</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35827'><span style='font-family:monospace;'>49</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35830'><span style='font-family:monospace;'>4A</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35833'><span style='font-family:monospace;'>4B</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35836'><span style='font-family:monospace;'>4C</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35839'><span style='font-family:monospace;'>4D</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35842'><span style='font-family:monospace;'>4E</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35845'><span style='font-family:monospace;'>4F</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35848'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EDX*2]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35854'><span style='font-family:monospace;'><span style='font-size:x-small;'>010</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35857'><span style='font-family:monospace;'>50</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35860'><span style='font-family:monospace;'>51</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35863'><span style='font-family:monospace;'>52</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35866'><span style='font-family:monospace;'>53</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35869'><span style='font-family:monospace;'>54</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35872'><span style='font-family:monospace;'>55</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35875'><span style='font-family:monospace;'>56</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35878'><span style='font-family:monospace;'>57</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35881'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EBX*2]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35887'><span style='font-family:monospace;'><span style='font-size:x-small;'>011</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35890'><span style='font-family:monospace;'>58</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35893'><span style='font-family:monospace;'>59</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35896'><span style='font-family:monospace;'>5A</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35899'><span style='font-family:monospace;'>5B</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35902'><span style='font-family:monospace;'>5C</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35905'><span style='font-family:monospace;'>5D</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35908'><span style='font-family:monospace;'>5E</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35911'><span style='font-family:monospace;'>5F</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35914'><span style='font-family:monospace;'><span style='font-size:x-small;'>none</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35920'><span style='font-family:monospace;'><span style='font-size:x-small;'>100</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35923'><span style='font-family:monospace;'>60</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35926'><span style='font-family:monospace;'>61</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35929'><span style='font-family:monospace;'>62</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35932'><span style='font-family:monospace;'>63</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35935'><span style='font-family:monospace;'>64</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35938'><span style='font-family:monospace;'>65</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35941'><span style='font-family:monospace;'>66</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35944'><span style='font-family:monospace;'>67</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35947'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EBP*2]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35953'><span style='font-family:monospace;'><span style='font-size:x-small;'>101</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35956'><span style='font-family:monospace;'>68</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35959'><span style='font-family:monospace;'>69</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35962'><span style='font-family:monospace;'>6A</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35965'><span style='font-family:monospace;'>6B</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35968'><span style='font-family:monospace;'>6C</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35971'><span style='font-family:monospace;'>6D</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35974'><span style='font-family:monospace;'>6E</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35977'><span style='font-family:monospace;'>6F</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35980'><span style='font-family:monospace;'><span style='font-size:x-small;'>[ESI*2]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35986'><span style='font-family:monospace;'><span style='font-size:x-small;'>110</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35989'><span style='font-family:monospace;'>70</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35992'><span style='font-family:monospace;'>71</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35995'><span style='font-family:monospace;'>72</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-35998'><span style='font-family:monospace;'>73</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36001'><span style='font-family:monospace;'>74</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36004'><span style='font-family:monospace;'>75</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36007'><span style='font-family:monospace;'>76</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36010'><span style='font-family:monospace;'>77</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36013'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EDI*2]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36019'><span style='font-family:monospace;'><span style='font-size:x-small;'>111</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36022'><span style='font-family:monospace;'>78</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36025'><span style='font-family:monospace;'>79</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36028'><span style='font-family:monospace;'>7A</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36031'><span style='font-family:monospace;'>7B</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36034'><span style='font-family:monospace;'>7C</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36037'><span style='font-family:monospace;'>7D</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36040'><span style='font-family:monospace;'>7E</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36043'><span style='font-family:monospace;'>7F</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36046'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EAX*4]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36049'><span style='font-family:monospace;'><span style='font-size:x-small;'>10</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36052'><span style='font-family:monospace;'><span style='font-size:x-small;'>000</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36055'><span style='font-family:monospace;'>80</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36058'><span style='font-family:monospace;'>81</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36061'><span style='font-family:monospace;'>82</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36064'><span style='font-family:monospace;'>83</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36067'><span style='font-family:monospace;'>84</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36070'><span style='font-family:monospace;'>85</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36073'><span style='font-family:monospace;'>86</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36076'><span style='font-family:monospace;'>87</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36079'><span style='font-family:monospace;'><span style='font-size:x-small;'>[ECX*4]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36085'><span style='font-family:monospace;'><span style='font-size:x-small;'>001</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36088'><span style='font-family:monospace;'>88</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36091'><span style='font-family:monospace;'>89</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36094'><span style='font-family:monospace;'>8A</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36097'><span style='font-family:monospace;'>8B</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36100'><span style='font-family:monospace;'>8C</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36103'><span style='font-family:monospace;'>8D</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36106'><span style='font-family:monospace;'>8E</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36109'><span style='font-family:monospace;'>8F</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36112'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EDX*4]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36118'><span style='font-family:monospace;'><span style='font-size:x-small;'>010</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36121'><span style='font-family:monospace;'>90</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36124'><span style='font-family:monospace;'>91</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36127'><span style='font-family:monospace;'>92</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36130'><span style='font-family:monospace;'>93</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36133'><span style='font-family:monospace;'>94</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36136'><span style='font-family:monospace;'>95</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36139'><span style='font-family:monospace;'>96</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36142'><span style='font-family:monospace;'>97</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36145'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EBX*4]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36151'><span style='font-family:monospace;'><span style='font-size:x-small;'>011</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36154'><span style='font-family:monospace;'>98</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36157'><span style='font-family:monospace;'>99</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36160'><span style='font-family:monospace;'>9A</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36163'><span style='font-family:monospace;'>9B</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36166'><span style='font-family:monospace;'>9C</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36169'><span style='font-family:monospace;'>9D</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36172'><span style='font-family:monospace;'>9E</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36175'><span style='font-family:monospace;'>9F</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36178'><span style='font-family:monospace;'><span style='font-size:x-small;'>none</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36184'><span style='font-family:monospace;'><span style='font-size:x-small;'>100</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36187'><span style='font-family:monospace;'>A0</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36190'><span style='font-family:monospace;'>A1</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36193'><span style='font-family:monospace;'>A2</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36196'><span style='font-family:monospace;'>A3</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36199'><span style='font-family:monospace;'>A4</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36202'><span style='font-family:monospace;'>A5</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36205'><span style='font-family:monospace;'>A6</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36208'><span style='font-family:monospace;'>A7</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36211'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EBP*4]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36217'><span style='font-family:monospace;'><span style='font-size:x-small;'>101</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36220'><span style='font-family:monospace;'>A8</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36223'><span style='font-family:monospace;'>A9</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36226'><span style='font-family:monospace;'>AA</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36229'><span style='font-family:monospace;'>AB</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36232'><span style='font-family:monospace;'>AC</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36235'><span style='font-family:monospace;'>AD</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36238'><span style='font-family:monospace;'>AE</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36241'><span style='font-family:monospace;'>AF</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36244'><span style='font-family:monospace;'><span style='font-size:x-small;'>[ESI*4]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36250'><span style='font-family:monospace;'><span style='font-size:x-small;'>110</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36253'><span style='font-family:monospace;'>B0</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36256'><span style='font-family:monospace;'>B1</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36259'><span style='font-family:monospace;'>B2</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36262'><span style='font-family:monospace;'>B3</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36265'><span style='font-family:monospace;'>B4</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36268'><span style='font-family:monospace;'>B5</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36271'><span style='font-family:monospace;'>B6</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36274'><span style='font-family:monospace;'>B7</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36277'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EDI*4]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36283'><span style='font-family:monospace;'><span style='font-size:x-small;'>111</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36286'><span style='font-family:monospace;'>B8</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36289'><span style='font-family:monospace;'>B9</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36292'><span style='font-family:monospace;'>BA</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36295'><span style='font-family:monospace;'>BB</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36298'><span style='font-family:monospace;'>BC</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36301'><span style='font-family:monospace;'>BD</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36304'><span style='font-family:monospace;'>BE</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36307'><span style='font-family:monospace;'>BF</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36310'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EAX*8]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36313'><span style='font-family:monospace;'><span style='font-size:x-small;'>11</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36316'><span style='font-family:monospace;'><span style='font-size:x-small;'>000</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36319'><span style='font-family:monospace;'>C0</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36322'><span style='font-family:monospace;'>C1</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36325'><span style='font-family:monospace;'>C2</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36328'><span style='font-family:monospace;'>C3</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36331'><span style='font-family:monospace;'>C4</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36334'><span style='font-family:monospace;'>C5</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36337'><span style='font-family:monospace;'>C6</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36340'><span style='font-family:monospace;'>C7</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36343'><span style='font-family:monospace;'><span style='font-size:x-small;'>[ECX*8]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36349'><span style='font-family:monospace;'><span style='font-size:x-small;'>001</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36352'><span style='font-family:monospace;'>C8</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36355'><span style='font-family:monospace;'>C9</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36358'><span style='font-family:monospace;'>CA</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36361'><span style='font-family:monospace;'>CB</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36364'><span style='font-family:monospace;'>CC</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36367'><span style='font-family:monospace;'>CD</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36370'><span style='font-family:monospace;'>CE</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36373'><span style='font-family:monospace;'>CF</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36376'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EDX*8]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36382'><span style='font-family:monospace;'><span style='font-size:x-small;'>010</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36385'><span style='font-family:monospace;'>D0</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36388'><span style='font-family:monospace;'>D1</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36391'><span style='font-family:monospace;'>D2</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36394'><span style='font-family:monospace;'>D3</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36397'><span style='font-family:monospace;'>D4</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36400'><span style='font-family:monospace;'>D5</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36403'><span style='font-family:monospace;'>D6</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36406'><span style='font-family:monospace;'>D7</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36409'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EBX*8]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36415'><span style='font-family:monospace;'><span style='font-size:x-small;'>011</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36418'><span style='font-family:monospace;'>D8</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36421'><span style='font-family:monospace;'>D9</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36424'><span style='font-family:monospace;'>DA</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36427'><span style='font-family:monospace;'>DB</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36430'><span style='font-family:monospace;'>DC</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36433'><span style='font-family:monospace;'>DD</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36436'><span style='font-family:monospace;'>DE</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36439'><span style='font-family:monospace;'>DF</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36442'><span style='font-family:monospace;'><span style='font-size:x-small;'>none</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36448'><span style='font-family:monospace;'><span style='font-size:x-small;'>100</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36451'><span style='font-family:monospace;'>E0</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36454'><span style='font-family:monospace;'>E1</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36457'><span style='font-family:monospace;'>E2</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36460'><span style='font-family:monospace;'>E3</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36463'><span style='font-family:monospace;'>E4</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36466'><span style='font-family:monospace;'>E5</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36469'><span style='font-family:monospace;'>E6</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36472'><span style='font-family:monospace;'>E7</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36475'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EBP*8]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36481'><span style='font-family:monospace;'><span style='font-size:x-small;'>101</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36484'><span style='font-family:monospace;'>E8</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36487'><span style='font-family:monospace;'>E9</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36490'><span style='font-family:monospace;'>EA</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36493'><span style='font-family:monospace;'>EB</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36496'><span style='font-family:monospace;'>EC</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36499'><span style='font-family:monospace;'>ED</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36502'><span style='font-family:monospace;'>EE</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36505'><span style='font-family:monospace;'>EF</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36508'><span style='font-family:monospace;'><span style='font-size:x-small;'>[ESI*8]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36514'><span style='font-family:monospace;'><span style='font-size:x-small;'>110</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36517'><span style='font-family:monospace;'>F0</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36520'><span style='font-family:monospace;'>F1</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36523'><span style='font-family:monospace;'>F2</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36526'><span style='font-family:monospace;'>F3</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36529'><span style='font-family:monospace;'>F4</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36532'><span style='font-family:monospace;'>F5</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36535'><span style='font-family:monospace;'>F6</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36538'><span style='font-family:monospace;'>F7</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36541'><span style='font-family:monospace;'><span style='font-size:x-small;'>[EDI*8]</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>

</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36547'><span style='font-family:monospace;'><span style='font-size:x-small;'>111</span></span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36550'><span style='font-family:monospace;'>F8</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36553'><span style='font-family:monospace;'>F9</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36556'><span style='font-family:monospace;'>FA</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36559'><span style='font-family:monospace;'>FB</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36562'><span style='font-family:monospace;'>FC</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36565'><span style='font-family:monospace;'>FD</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36568'><span style='font-family:monospace;'>FE</span></div>
</td>
<td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36571'><span style='font-family:monospace;'>FF</span></div>
</td>
</tr><tr><td style ="width: 4cm;" align='left' valign='top' colspan='11'>

<ol class="enumerate" id='magicparlabel-36574'><li class="enumerate_item"><span style='font-family:sans-serif;'><span style='font-size:x-small;'>The [*] nomenclature means a disp32 with no base if the MOD is 00B. Otherwise, [*] means disp8 or disp32 + [EBP]. This provides the following address modes:</span></span></li>
</ol>


<div class="plain_layout" id='magicparlabel-36575'><table><tbody><tr><td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36592'><b><span style='font-family:sans-serif;'><span style='font-size:x-small;'>MOD bits</span></span></b></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36595'><b><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Effective Address</span></span></b></div>
</td>
</tr><tr><td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36598'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>00</span></span></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36601'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>[scaled index] + disp32</span></span></div>
</td>
</tr><tr><td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36604'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>01</span></span></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36607'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>[scaled index] + disp8 + [EBP]</span></span></div>
</td>
</tr><tr><td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36610'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>10</span></span></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36613'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>[scaled index] + disp32 + [EBP]</span></span></div>
</td>
</tr></tbody>
</table>
</div>
</td>
</tr></tbody>
</table>
<a id="sib" />
</div>



<div class="example" id='magicparlabel-36650'><div class="example_item"><span class="example_label">Example 0.11.</span>
This instruction:
<br />

</div>

<div class="lyx_code" id='magicparlabel-36651'><div class="lyx_code_item">jmp [eax*2 + ebx]</div>
</div>
<div class="standard" id='magicparlabel-36652'>generates the following code:</div>

<div class="lyx_code" id='magicparlabel-36653'><div class="lyx_code_item">00000000  67 ff 24 43</div>
</div>
<div class="standard" id='magicparlabel-36654'>First of all, the first byte, <span style='font-family:monospace;'>0x67</span> is <em>not</em> an opcode but a <em>prefix</em>. The number is a predefined prefix for address-size override prefix. After the prefix, comes the opcode <span style='font-family:monospace;'>0xff </span>and the <span style='font-family:monospace;'>ModR/M </span>byte <span style='font-family:monospace;'>0x24</span>. The value from <span style='font-family:monospace;'>ModR/M</span> suggests that there exists a <span style='font-family:monospace;'>SIB</span> byte that follows. The <span style='font-family:monospace;'>SIB</span> byte is <span style='font-family:monospace;'>0x43</span>. </div>

<div class="standard" id='magicparlabel-36655'>Look up in the <span style='font-family:monospace;'>SIB</span> table, the row tells that <span style='font-family:monospace;'>eax</span> is scaled by 2, and the column tells that the base to be added is in <span style='font-family:monospace;'>ebx</span>.</div>
</div>
</dd><dt class="description_label">Displacement</dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>is the offset from the start of the base index. 
<br />



<div class="example" id='magicparlabel-36657'><div class="example_item"><span class="example_label">Example 0.12.</span>
This instruction:
<br />

</div>

<div class="lyx_code" id='magicparlabel-36658'><div class="lyx_code_item">jmp [0x1234]</div>
</div>
<div class="standard" id='magicparlabel-36659'>generates machine code is:</div>

<div class="lyx_code" id='magicparlabel-36660'><div class="lyx_code_item">ff 26 34 12      </div>
</div>
<div class="standard" id='magicparlabel-36661'><span style='font-family:monospace;'>0x1234</span>, which is generated as <span style='font-family:monospace;'>34 12</span> in raw machine code, is the displacement and stands right next to <span style='font-family:monospace;'>0x26</span>, which is the <span style='font-family:monospace;'>ModR/M </span>byte. </div>

<div class="example" id='magicparlabel-36662'><div class="example_item"><span class="example_label">Example 0.13.</span>
This instruction:
<br />

</div>

<div class="lyx_code" id='magicparlabel-36663'><div class="lyx_code_item">jmp [eax * 4 + 0x1234]</div>
</div>
</div>
<div class="standard" id='magicparlabel-36664'>generates the machine code:</div>

<div class="lyx_code" id='magicparlabel-36665'><div class="lyx_code_item">67 ff 24 85 34 12 00 00</div>
</div>

<ul class="itemize" id='magicparlabel-36666'><li class="itemize_item"><span style='font-family:monospace;'>0x67</span> is an address-size override prefix. Its meaning is that if an instruction runs a default address size e.g. 16-bit, the use of prefix enables the instruction to use non-default address size, e.g. 32-bit or 64-bit. Since the binary is supposed to be 16-bit, <span style='font-family:monospace;'>0x67</span> changes the instruction to 32-bit mode.</li>
<li class="itemize_item"><span style='font-family:monospace;'>0xff</span> is the opcode.</li>
<li class="itemize_item"><span style='font-family:monospace;'>0x24</span> is the <span style='font-family:monospace;'>ModR/M</span> byte. According to table <a href="#mod_rm_32">3.</a>, the value suggests that a SIB byte follows, .</li>
<li class="itemize_item"><span style='font-family:monospace;'>0x85</span> is the <span style='font-family:monospace;'>SIB</span> byte. According to table <a href="#sib">Part \Roman{part}</a>, the byte <span style='font-family:monospace;'>0x85</span> can be destructured into bits as follow:


<div class="standard" style='text-align: center;' id='magicparlabel-36670'><table><tbody><tr><td style ="width: 0.4cm;" align='center' valign='top' colspan='2'>
<div class="plain_layout" id='magicparlabel-36701'><b>SS</b></div>
</td>
<td style ="width: 0.4cm;" align='center' valign='top' colspan='3'>
<div class="plain_layout" id='magicparlabel-36707'><b>R/M</b></div>
</td>
<td style ="width: 0.4cm;" align='center' valign='top' colspan='3'>
<div class="plain_layout" id='magicparlabel-36716'><b>REG</b></div>
</td>
</tr><tr><td style ="width: 0.4cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-36725'>1</div>
</td>
<td style ="width: 0.4cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-36728'>0</div>
</td>
<td style ="width: 0.4cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-36731'>0</div>
</td>
<td style ="width: 0.4cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-36734'>0</div>
</td>
<td style ="width: 0.4cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-36737'>0</div>
</td>
<td style ="width: 0.4cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-36740'>1</div>
</td>
<td style ="width: 0.4cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-36743'>0</div>
</td>
<td style ="width: 0.4cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-36746'>1</div>
</td>
</tr></tbody>
</table>
</div>

<div class="standard" id='magicparlabel-36747'>The above values are obtained through the columns <b>SS</b>,<b> R/M</b> and finally the 8 column of <b>REG</b> respectively. The total bits combined into the value <span style='font-family:monospace;'>10000101</span>, which is <span style='font-family:monospace;'>0x85 </span>in hex value. By default, if a register after the displacement is not specified, it is set to <span style='font-family:monospace;'>EBP</span> register, and thus the 6<sup class="script_superscript">th</sup> column (bit pattern <span style='font-family:monospace;'>101</span>) is always chosen. If the example uses another register:</div>

<div class="example" id='magicparlabel-36752'><div class="example_item"><span class="example_label">Example 0.14.</span>
For example:</div>
</div>

<div class="lyx_code" id='magicparlabel-36753'><div class="lyx_code_item">jmp [eax * 4 + eax + esi]</div>
</div>
<div class="standard" id='magicparlabel-36754'>the <span style='font-family:monospace;'>SIB</span> byte becomes <span style='font-family:monospace;'>0x86</span> instead of , which is in the 7<sup class="script_superscript">th</sup> column. Try to verify with the table <a href="#sib">Part \Roman{part}</a> again.</div>
</li><li class="itemize_item"><span style='font-family:monospace;'>34 12 00 00 </span>is the displacement. As can be seen, the displacement is 4 bytes in size, which is equivalent to 32-bit, due to address-size override prefix.</li>
</ul>
</div>
</dd><dt class="description_label">Immediate</dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>When an instruction accepts a fixed value, e.g. <span style='font-family:monospace;'>0x1234</span>, as an operand, this optional field holds the value. Note that this field is different from displacement: the value is not necessary used an offset, but an arbitrary value of anything. 
<br />



<div class="example" id='magicparlabel-36761'><div class="example_item"><span class="example_label">Example 0.15.</span>
This instruction:
<br />

</div>

<div class="lyx_code" id='magicparlabel-36762'><div class="lyx_code_item">mov eax, 0x1234</div>
</div>
<div class="standard" id='magicparlabel-36763'>generates the code:</div>

<div class="lyx_code" id='magicparlabel-36764'><div class="lyx_code_item">66 b8 34 12 00 00</div>
</div>

<ul class="itemize" id='magicparlabel-36765'><li class="itemize_item"><span style='font-family:monospace;'>0x66</span> is operand-sized override prefix. Similar to address-size override prefix, this prefix enables operand-size to be non-default.</li>
<li class="itemize_item"><span style='font-family:monospace;'>0xb8</span> is one of the opcodes for <span style='font-family:monospace;'>mov</span> instruction.</li>
<li class="itemize_item"><span style='font-family:monospace;'>0x1234 </span>is the value to be stored in register <span style='font-family:monospace;'>eax</span>. It is just a value for storing directly into a register, and nothing more. On the other hand, displacement value is an offset for some address calculation.</li>
</ul>
</div>
</dd></dl>

<div class="exercise" id='magicparlabel-36768'><div class="exercise_item"><span class="exercise_label">Exercise 0.2.</span>
Read section 2.1 in Volume 2 for even more details. 
<br />

</div>

<div class="exercise" id='magicparlabel-36769'><div class="exercise_item"><span class="exercise_label">Exercise 0.3.</span>
Skim through section 5.1 in volume 1. Read chapter 7 in volume 1. If there are terminologies that you don't understand e.g. segmentation, don't worry as the terms will be explained in later chapters or ignored.</div>
</div>
</div>
<div class="section" id='magicparlabel-36770'>Understand an instruction in detail</div>
<div class="standard" id='magicparlabel-36771'>In the instruction reference manual (Volume 2), from chapter 3 onward, every x86 instruction is documented in detail. Whenever the precise behavior of an instruction is needed, we always consult this document first. However, before using the document, we must know the writing conventions first. Every instruction has the following common structure for organizing information:</div>

<dl class='description' id='magicparlabel-36772'><dt class="description_label">Opcode&nbsp;table</dt>
<dd class="description_item"> lists all possible opcodes of an assembly instruction.
<br />


<div class="standard" id='magicparlabel-36773'>Each table contains the following fields, and can have one or more rows:</div>



<div class="standard" id='magicparlabel-36774'><table><tbody><tr><td style ="width: 1.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36793'><b><span style='font-family:monospace;'><span style='font-size:x-small;'>Opcode</span></span></b></div>
</td>
<td style ="width: 2.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36796'><b><span style='font-family:monospace;'><span style='font-size:x-small;'>Instruction</span></span></b></div>
</td>
<td style ="width: 1.2cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36799'><b><span style='font-family:monospace;'><span style='font-size:x-small;'>Op/En</span></span></b></div>
</td>
<td style ="width: 2.3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36802'><b><span style='font-family:monospace;'><span style='font-size:x-small;'>64/32-bit Mode</span></span></b></div>
</td>
<td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36805'><b><span style='font-family:monospace;'><span style='font-size:x-small;'>CPUID
<br />

Feature flag</span></span></b></div>
</td>
<td style ="width: 3.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36808'><b><span style='font-family:monospace;'><span style='font-size:x-small;'>Description</span></span></b></div>
</td>
</tr></tbody>
</table>
</div>

<dl class='description' id='magicparlabel-36809'><dt class="description_label">Opcode</dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>shows<span style='font-family:monospace;'> </span>a unique hexadecimal number assigned to an instruction. There can be more than one opcode for an instruction, each encodes a variant of the instruction. For example, one variant requires one operand, but another requires two. In this column, there can be other notations aside from hexadecimal numbers. For example, <span style='font-family:monospace;'>/r </span>indicates that the <span style='font-family:monospace;'>ModR/M</span> byte of the instruction contains a <span style='font-family:monospace;'>reg</span> operand and an <span style='font-family:monospace;'>r/m</span> operand. The detail listing is in section <em>3.1.1.1</em> and <em>3.1.1.2</em> in the Intel's manual, volume 2.</dd>
<dt class="description_label">Instruction</dt>
<dd class="description_item"> gives the syntax of the assembly instruction that a programmer can use for writing code. Aside from the mnemonic representation of the opcode, e.g. <span style='font-family:monospace;'>jmp</span>, other symbols represent operands with specific properties in the instruction. For example, <span style='font-family:monospace;'>rel8 </span>represents a relative address from 128 bytes before the end of the instruction to 127 bytes after the end of instruction; similarly <span style='font-family:monospace;'>rel16/rel32 </span>also represents relative addresses, but with the operand size of 16/32-bit instead of 8-bit like <span style='font-family:monospace;'>rel8</span>. For a detailed listing, please refer to section<span style='font-family:monospace;'> 3.1.1.3 </span>of volume 2.</dd>
<dt class="description_label">Op/En</dt>
<dd class="description_item"> is short for <em><b>Op</b>erand/<b>En</b>coding</em>. An operand encoding specifies how a <span style='font-family:monospace;'>ModR/M</span> byte encodes the operands that an instruction requires. If a variant of an instruction requires operands, then an additional table named <em>&ldquo;Instruction Operand Encoding&rdquo;</em> is added for explaining the operand encoding, with the following structure:
<br />




<div class="standard" style='text-align: left;' id='magicparlabel-36812'><table><tbody><tr><td style ="width: 1.2cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36829'><b><span style='font-family:monospace;'><span style='font-size:x-small;'>Op/En</span></span></b></div>
</td>
<td style ="width: 3.1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36832'><b><span style='font-family:monospace;'><span style='font-size:x-small;'>Operand 1</span></span></b></div>
</td>
<td style ="width: 3.1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36835'><b><span style='font-family:monospace;'><span style='font-size:x-small;'>Operand 2</span></span></b></div>
</td>
<td style ="width: 3.1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36838'><b><span style='font-family:monospace;'><span style='font-size:x-small;'>Operand 3</span></span></b></div>
</td>
<td style ="width: 3.1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36841'><b><span style='font-family:monospace;'><span style='font-size:x-small;'>Operand 4</span></span></b></div>
</td>
</tr></tbody>
</table>
</div>

<div class="standard" id='magicparlabel-36842'>Most instructions require one to two operands. We make use of these instructions for our OS and skip the instructions that require three or four operands. The operands can be readable or writable or both. The symbol <span style='font-family:monospace;'>(r)</span> denotes a readable operand, and <span style='font-family:monospace;'>(w)</span> denotes a writable operand. For example, when <span style='font-family:monospace;'>Operand 1</span> field contains <span style='font-family:monospace;'>ModRM:r/m (r)</span>, it means the first operand is encoded in <span style='font-family:monospace;'>r/m</span> field of <span style='font-family:monospace;'>ModR/M</span> byte, and is only <span style='font-family:monospace;'>readable</span>.<span style='font-family:monospace;'> </span></div>
</dd><dt class="description_label">64/32-bit&nbsp;mode</dt>
<dd class="description_item"> indicates whether the opcode sequence is supported in a 64-bit mode and possibly 32-bit mode.</dd>
<dt class="description_label">CPUID&nbsp;Feature&nbsp;Flag</dt>
<dd class="description_item"> indicates indicate a particular CPU feature must be available to enable the instruction. An instruction is invalid if a CPU does not support the required feature.<div class="marginal"><div class="plain_layout" id='magicparlabel-36848'>In Linux, the command:</div>

<div class="lyx_code" id='magicparlabel-36849'><div class="lyx_code_item">cat /proc/cpuinfo</div>
</div>
<div class="plain_layout" id='magicparlabel-36850'>lists the information of available CPUs and its features in <span style='font-family:monospace;'>flags </span>field.</div>
</div>
<br />



<dl class='description' id='magicparlabel-36851'><dt class="description_label">Compat/Leg&nbsp;Mode</dt>
<dd class="description_item"> Many instructions do not have this field, but instead is replaced with <span style='font-family:monospace;'>Compat/Leg Mode</span>, which stands for <em>Compatibility or Legacy Mode</em>. This mode enables 64-bit variants of instructions to run normally in 16 or 32-bit mode. <div class='float-margintable'><div class="plain_layout" id='magicparlabel-36855'><span class='float-caption-Standard float-caption float-caption-standard'>MarginTable 3:  Notations in <span style='font-family:monospace;'>Compat/Leg Mode</span></span></div>



<div class="plain_layout" id='magicparlabel-36860'><table><tbody><tr><td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36877'><b>Notation</b></div>
</td>
<td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36880'><b>Description</b></div>
</td>
</tr><tr><td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36883'><span style='font-family:monospace;'>Valid</span></div>
</td>
<td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36886'>Supported</div>
</td>
</tr><tr><td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36889'><span style='font-family:monospace;'>I</span></div>
</td>
<td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36892'>Not supported</div>
</td>
</tr><tr><td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36895'><span style='font-family:monospace;'>N.E.</span></div>
</td>
<td style ="width: 4cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-36898'>The 64-bit opcode cannot be encoded as it overlaps with existing 32-bit opcode.</div>
</td>
</tr></tbody>
</table>
</div>


</div>
</dd>
</dl>
</dd><dt class="description_label">Description</dt>
<dd class="description_item"> briefly explains the variant of an instruction in the current row.</dd>
</dl>
</dd><dt class="description_label">Description</dt>
<dd class="description_item"> specifies the purpose of the instructions and how an instruction works in detail.</dd>
<dt class="description_label">Operation</dt>
<dd class="description_item"> is pseudo-code that implements an instruction. If a description is vague, this section is the next best source to understand an assembly instruction. The syntax is described in section <em>3.1.1.9</em> in volume 2.</dd>
<dt class="description_label">Flags&nbsp;affected</dt>
<dd class="description_item"> lists the possible changes to system flags in <span style='font-family:monospace;'>EFLAGS</span> register. </dd>
<dt class="description_label">Exceptions</dt>
<dd class="description_item"> list the possible errors that can occur when an instruction cannot run correctly. This section is valuable for OS debugging. Exceptions fall into one of the following categories:</dd>
</dl>

<ul class="itemize" id='magicparlabel-36905'><li class="itemize_item">Protected Mode Exceptions</li>
<li class="itemize_item">Real-Address Mode Exception</li>
<li class="itemize_item">Virtual-8086 Mode Exception</li>
<li class="itemize_item">Floating-Point Exception</li>
<li class="itemize_item">SIMD Floating-Point Exception</li>
<li class="itemize_item">Compatibility Mode Exception</li>
<li class="itemize_item">64-bit Mode Exception</li>
</ul>
<div class="standard" id='magicparlabel-36912'>For our OS, we only use <em>Protected Mode Exceptions</em> and <em>Real-Address Mode Exceptions</em>. The details are in section <em>3.1.1.13</em> and <em>3.1.1.14</em>, volume 2.</div>
<div class="section" id='magicparlabel-36913'>Example: <span style='font-family:monospace;'>jmp</span> instruction</div>
<div class="standard" id='magicparlabel-36914'>Let's look at our good old <span style='font-family:monospace;'>jmp</span> instruction. First, the opcode table:</div>





<div class="standard" id='magicparlabel-36923'><table><tbody><tr><td style ="width: 2.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37008'><b><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Opcode</span></span></b></div>
</td>
<td style ="width: 2.7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37011'><b><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Instruction</span></span></b></div>
</td>
<td style ="width: 0.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37014'><b><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Op/</span></span></b></div>

<div class="plain_layout" id='magicparlabel-37015'><b><span style='font-family:sans-serif;'><span style='font-size:x-small;'>En</span></span></b></div>
</td>
<td style ="width: 1.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37018'><b><span style='font-family:sans-serif;'><span style='font-size:x-small;'>64-bit Mode</span></span></b></div>
</td>
<td style ="width: 1.7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37021'><b><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Compat/Leg Mode</span></span></b></div>
</td>
<td style ="width: 7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37024'><b><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Description</span></span></b></div>
</td>
</tr><tr><td style ="width: 2.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37027'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>EB cb </span></span></div>
</td>
<td style ="width: 2.7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37030'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>JMP rel8</span></span></div>
</td>
<td style ="width: 0.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37033'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>D</span></span></div>
</td>
<td style ="width: 1.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37036'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Valid</span></span></div>
</td>
<td style ="width: 1.7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37039'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Valid</span></span></div>
</td>
<td style ="width: 7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37042'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Jump short, RIP = RIP + 8-bit displacement sign extended to 64-bits</span></span></div>
</td>
</tr><tr><td style ="width: 2.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37045'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>E9 cw</span></span></div>
</td>
<td style ="width: 2.7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37048'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>JMP rel16</span></span></div>
</td>
<td style ="width: 0.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37051'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>D</span></span></div>
</td>
<td style ="width: 1.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37054'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>N.S.</span></span></div>
</td>
<td style ="width: 1.7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37057'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Valid</span></span></div>
</td>
<td style ="width: 7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37060'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Jump near, relative, displacement relative to next instruction. Not supported in 64-bit mode.</span></span></div>
</td>
</tr><tr><td style ="width: 2.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37063'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>E9 cd</span></span></div>
</td>
<td style ="width: 2.7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37066'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>JMP rel32</span></span></div>
</td>
<td style ="width: 0.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37069'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>D</span></span></div>
</td>
<td style ="width: 1.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37072'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Valid</span></span></div>
</td>
<td style ="width: 1.7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37075'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Valid</span></span></div>
</td>
<td style ="width: 7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37078'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Jump near, relative, RIP = RIP + 32-bit displacement sign extended to 64-bits</span></span></div>
</td>
</tr><tr><td style ="width: 2.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37081'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>FF /4</span></span></div>
</td>
<td style ="width: 2.7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37084'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>JMP r/m16</span></span></div>
</td>
<td style ="width: 0.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37087'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>M</span></span></div>
</td>
<td style ="width: 1.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37090'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>N.S.</span></span></div>
</td>
<td style ="width: 1.7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37093'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Valid</span></span></div>
</td>
<td style ="width: 7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37096'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Jump near, absolute indirect, address = zero- extended r/m16. Not supported in 64-bit mode</span></span></div>
</td>
</tr><tr><td style ="width: 2.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37099'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>FF /4</span></span></div>
</td>
<td style ="width: 2.7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37102'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>JMP r/m32</span></span></div>
</td>
<td style ="width: 0.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37105'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>M</span></span></div>
</td>
<td style ="width: 1.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37108'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>N.S.</span></span></div>
</td>
<td style ="width: 1.7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37111'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Valid</span></span></div>
</td>
<td style ="width: 7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37114'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Jump near, absolute indirect, address given in r/m32. Not supported in 64-bit mode</span></span></div>
</td>
</tr><tr><td style ="width: 2.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37117'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>FF /4</span></span></div>
</td>
<td style ="width: 2.7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37120'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>JMP r/m64</span></span></div>
</td>
<td style ="width: 0.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37123'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>M</span></span></div>
</td>
<td style ="width: 1.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37126'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Valid</span></span></div>
</td>
<td style ="width: 1.7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37129'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>N.E</span></span></div>
</td>
<td style ="width: 7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37132'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Jump near, absolute indirect, RIP = 64-Bit offset from register or memory</span></span></div>
</td>
</tr><tr><td style ="width: 2.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37135'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>EA cd</span></span></div>
</td>
<td style ="width: 2.7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37138'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>JMP ptr16:16</span></span></div>
</td>
<td style ="width: 0.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37141'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>D</span></span></div>
</td>
<td style ="width: 1.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37144'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Inv.</span></span></div>
</td>
<td style ="width: 1.7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37147'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Valid</span></span></div>
</td>
<td style ="width: 7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37150'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Jump far, absolute, address given in operand</span></span></div>
</td>
</tr><tr><td style ="width: 2.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37153'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>EA cp </span></span></div>
</td>
<td style ="width: 2.7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37156'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>JMP ptr16:32</span></span></div>
</td>
<td style ="width: 0.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37159'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>D</span></span></div>
</td>
<td style ="width: 1.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37162'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Inv.</span></span></div>
</td>
<td style ="width: 1.7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37165'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Valid</span></span></div>
</td>
<td style ="width: 7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37168'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Jump far, absolute, address given in operand</span></span></div>
</td>
</tr><tr><td style ="width: 2.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37171'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>FF /5</span></span></div>
</td>
<td style ="width: 2.7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37174'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>JMP m16:16</span></span></div>
</td>
<td style ="width: 0.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37177'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>D</span></span></div>
</td>
<td style ="width: 1.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37180'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Valid</span></span></div>
</td>
<td style ="width: 1.7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37183'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Valid</span></span></div>
</td>
<td style ="width: 7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37186'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Jump far, absolute indirect, address given in m16:16</span></span></div>
</td>
</tr><tr><td style ="width: 2.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37189'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>FF /5</span></span></div>
</td>
<td style ="width: 2.7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37192'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>JMP m16:32</span></span></div>
</td>
<td style ="width: 0.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37195'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>D</span></span></div>
</td>
<td style ="width: 1.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37198'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Valid</span></span></div>
</td>
<td style ="width: 1.7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37201'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Valid</span></span></div>
</td>
<td style ="width: 7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37204'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Jump far, absolute indirect, address given in m16:32</span></span></div>
</td>
</tr><tr><td style ="width: 2.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37207'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>REX.W + FF /5 </span></span></div>
</td>
<td style ="width: 2.7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37210'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>JMP m16:64</span></span></div>
</td>
<td style ="width: 0.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37213'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>D</span></span></div>
</td>
<td style ="width: 1.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37216'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Valid</span></span></div>
</td>
<td style ="width: 1.7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37219'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>N.E.</span></span></div>
</td>
<td style ="width: 7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-37222'><span style='font-family:sans-serif;'><span style='font-size:x-small;'>Jump far, absolute indirect, address given in m16:64</span></span></div>
</td>
</tr></tbody>
</table>
</div>

<div class="standard" id='magicparlabel-37223'><a id="jmp_instruction" />
</div>



<div class="standard" id='magicparlabel-37231'>Each row lists a variant of <span style='font-family:monospace;'>jmp</span> instruction. The first column has the opcode <span style='font-family:monospace;'>EB cb</span>, with an equivalent symbolic form <span style='font-family:monospace;'>jmp rel8</span>. Here, <span style='font-family:monospace;'>rel8</span> means 128 bytes offset, counting from the end of the instruction. The end of an instruction is the next byte after the last byte of an instruction. To make it more concrete, consider this assembly code:</div>

<div class="lyx_code" id='magicparlabel-37232'><div class="lyx_code_item">main:</div>
<div class="lyx_code_item">  jmp main</div>
<div class="lyx_code_item">  jmp main2</div>
<div class="lyx_code_item">  jmp main</div>
<div class="lyx_code_item">main2:</div>
<div class="lyx_code_item">  jmp 0x1234</div>
</div>
<div class="standard" style='text-align: left;' id='magicparlabel-37238'>generates the machine code:</div>


<div class='float-table'><div class="plain_layout" id='magicparlabel-37243'><span class='float-caption-Standard float-caption float-caption-standard'>Table 3:  Memory address of each opcode</span></div>



<div class="plain_layout" id='magicparlabel-37248'><table><tbody><tr><td align='center' valign='top'>

</td>
<td align='left' valign='top' colspan='2'>
<div class="plain_layout" id='magicparlabel-37313'><span style='font-family:monospace;'>main</span></div>
</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top' colspan='3'>
<div class="plain_layout" id='magicparlabel-37328'><span style='font-family:monospace;'>main2</span></div>
</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
</tr><tr><td align='center' valign='top'>

</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-37346'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow><mo> &darr; </mo>
 </mrow></math></div>
</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-37364'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow><mo> &darr; </mo>
 </mrow></math></div>
</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-37376'><b>Address</b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-37379'><b><span style='font-family:monospace;'>00</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-37382'><span style='font-family:monospace;'>01</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-37385'><span style='font-family:monospace;'>02</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-37388'><span style='font-family:monospace;'>03</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-37391'><span style='font-family:monospace;'>04</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-37394'><span style='font-family:monospace;'>05</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-37397'><b><span style='font-family:monospace;'>06</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-37400'><span style='font-family:monospace;'>07</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-37403'><span style='font-family:monospace;'>08</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-37406'><span style='font-family:monospace;'>09</span></div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-37409'><b>Opcode</b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-37412'><span style='font-family:monospace;'>eb</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-37415'><span style='font-family:monospace;'>fe</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-37418'><span style='font-family:monospace;'>eb</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-37421'><span style='font-family:monospace;'>02</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-37424'><span style='font-family:monospace;'>eb</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-37427'><span style='font-family:monospace;'>fa</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-37430'><span style='font-family:monospace;'>e9</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-37433'><span style='font-family:monospace;'>2b</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-37436'><span style='font-family:monospace;'>12</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-37439'><span style='font-family:monospace;'>00</span></div>
</td>
</tr></tbody>
</table>
</div>
</div>


<div class="standard" style='text-align: left;' id='magicparlabel-37440'>The first <span style='font-family:monospace;'>jmp main</span> instruction is generated into <span style='font-family:monospace;'>eb fe</span> and occupies the addresses <span style='font-family:monospace;'>00</span> and <span style='font-family:monospace;'>01</span>; the end of the first <span style='font-family:monospace;'>jmp main</span> is at address <span style='font-family:monospace;'>02</span>, past the last byte of the first <span style='font-family:monospace;'>jmp main</span> which is located at the address <span style='font-family:monospace;'>01</span>. The value <span style='font-family:monospace;'>fe </span>is equivalent to <span style='font-family:monospace;'>-2</span>, since <span style='font-family:monospace;'>eb</span> opcode uses only a byte (8 bits) for relative addressing. The offset is <span style='font-family:monospace;'>-2</span>, and the end address of the first <span style='font-family:monospace;'>jmp main</span> is <span style='font-family:monospace;'>02</span>, adding them together we get <span style='font-family:monospace;'>00</span> which is the destination address for jumping to. </div>

<div class="standard" style='text-align: left;' id='magicparlabel-37441'>Similarly, the <span style='font-family:monospace;'>jmp main2</span> instruction is generated into <span style='font-family:monospace;'>eb 02</span>, which means the offset is <span style='font-family:monospace;'>+2</span>; the end address of <span style='font-family:monospace;'>jmp main2</span> is at <span style='font-family:monospace;'>04</span>, and adding together with the offset we get the destination address is <span style='font-family:monospace;'>06</span>, which is the start instruction marked by the label <span style='font-family:monospace;'>main2</span>.</div>

<div class="standard" id='magicparlabel-37442'>The same rule can be applied to <span style='font-family:monospace;'>rel16 </span>and <span style='font-family:monospace;'>rel32 </span>encoding. In the example code, <span style='font-family:monospace;'>jmp 0x1234 </span>uses <span style='font-family:monospace;'>rel16</span> (which means 2-byte offset) and is generated into <span style='font-family:monospace;'>e9 2b 12</span>. As the table <a href="#jmp_instruction">Part \Roman{part}</a> shows, <span style='font-family:monospace;'>e9</span> opcode takes a <span style='font-family:monospace;'>cw</span> operand, which is a 2-byte offset (section <em>3.1.1.1</em>, volume 2). Notice one strange issue here: the offset value is <span style='font-family:monospace;'>2b 12</span>, while it is supposed to be <span style='font-family:monospace;'>34 12</span>. There is nothing wrong. Remember, <span style='font-family:monospace;'>rel8/rel16/rel32 </span>is an <em>offset</em>, not an <em>address</em>. A offset is a distance from a point. Since no label is given but a number, the offset is calculated from the start of a program. In this case, the start of the program is the address <span style='font-family:monospace;'>00</span>, the end of <span style='font-family:monospace;'>jmp 0x1234</span> is the address <span style='font-family:monospace;'>09</span><div class="foot"><span class="foot_label">11</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-37446'>which means 9 bytes was consumed, starting from address 0.</div>
</div></div>, so the offset is calculated as <span style='font-family:monospace;'>0x1234 - 0x9 = 0x122b</span>. That solved the mystery!</div>

<div class="standard" id='magicparlabel-37447'>The <span style='font-family:monospace;'>jmp</span> instructions with opcode <span style='font-family:monospace;'>FF /4</span> enable jumping to a <em>near, absolute </em>address stored in a general-purpose register or a memory location; or in short, as written in the description, <em>absolute indirect</em>. The symbol <span style='font-family:monospace;'>/4</span> is the column with digit 4 in table <a href="#mod_rm_16">3.</a><div class="foot"><span class="foot_label">12</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-37451'>The column with the following fields:</div>

<div class="plain_layout" id='magicparlabel-37452'><span style='font-family:monospace;'>AH</span></div>

<div class="plain_layout" id='magicparlabel-37453'><span style='font-family:monospace;'>SP</span></div>

<div class="plain_layout" id='magicparlabel-37454'><span style='font-family:monospace;'>ESP</span></div>

<div class="plain_layout" id='magicparlabel-37455'><span style='font-family:monospace;'>M45</span></div>

<div class="plain_layout" id='magicparlabel-37456'><span style='font-family:monospace;'>XMM4</span></div>

<div class="plain_layout" id='magicparlabel-37457'><span style='font-family:monospace;'>4</span></div>

<div class="plain_layout" id='magicparlabel-37458'><span style='font-family:monospace;'>100</span></div>
</div></div>. For example:</div>

<div class="lyx_code" id='magicparlabel-37459'><div class="lyx_code_item">jmp [0x1234]</div>
</div>
<div class="standard" style='text-align: left;' id='magicparlabel-37460'>is generated into:</div>

<div class="lyx_code" id='magicparlabel-37461'><div class="lyx_code_item">ff 26 34 12</div>
</div>
<div class="standard" style='text-align: left;' id='magicparlabel-37462'>Since this is 16-bit code, we use table <a href="#mod_rm_16">3.</a>. Looking up the table, <span style='font-family:monospace;'>ModR/M</span> value <span style='font-family:monospace;'>26 </span>means <span style='font-family:monospace;'>disp16</span>, which means a 16-bit offset from the start of current index<div class="foot"><span class="foot_label">13</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-37466'>Look at the note under the table.</div>
</div></div>, which is the base address stored in <span style='font-family:monospace;'>DS</span> register. In this case, <span style='font-family:monospace;'>jmp [0x1234] </span>is implicitly understood as <span style='font-family:monospace;'>jmp [ds:0x1234]</span>, which means the destination address is <span style='font-family:monospace;'>0x1234</span> bytes away from the start of a data segment.</div>

<div class="standard" id='magicparlabel-37467'>The <span style='font-family:monospace;'>jmp</span> instruction with opcode <span style='font-family:monospace;'>FF /5</span> enables jumping to a <em>far, absolute</em> address stored in a <em>memory location</em> (as opposed to <span style='font-family:monospace;'>/4</span>, which means stored in a register); in short, <em>a far pointer</em>. To generate such instruction, the keyword <span style='font-family:monospace;'>far</span> is needed to tell <span style='font-family:monospace;'>nasm</span> we are using a far pointer:</div>

<div class="lyx_code" id='magicparlabel-37468'><div class="lyx_code_item">jmp far [eax]</div>
</div>
<div class="standard" style='text-align: left;' id='magicparlabel-37469'>is generated into:</div>

<div class="lyx_code" id='magicparlabel-37470'><div class="lyx_code_item">67 ff 28</div>
</div>
<div class="standard" style='text-align: left;' id='magicparlabel-37471'>Since <span style='font-family:monospace;'>28</span> is the value in the 5th column of the table <a href="#mod_rm_32">3.</a><div class="foot"><span class="foot_label">14</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-37475'>Remember the prefix <span style='font-family:monospace;'>67</span> indicates the instruction is used as 32-bit. The prefix only added if the default environment is assumed as 16-bit when generating code by an assembler.</div>
</div></div> that refers to <span style='font-family:monospace;'>[eax]</span>, we successfully generate an instruction for a far jump. After CPU runs the instruction, the program counter <span style='font-family:monospace;'>eip</span> and code segment register <span style='font-family:monospace;'>cs </span>is set to the memory address, stored in the memory location that <span style='font-family:monospace;'>eax</span> points to, and CPU starts fetching code from the new address in <span style='font-family:monospace;'>cs </span>and <span style='font-family:monospace;'>eip</span>. To make it more concrete, here is an example:</div>



<div class="standard" id='magicparlabel-37482'><img style='width:90%;' src='21_img_04_far_jmp_ex.png' alt='image: 21_img_04_far_jmp_ex.png' />
</div>


<div class="standard" id='magicparlabel-37483'><br />

</div>

<div class="standard" style='text-align: left;' id='magicparlabel-37488'>The far address consumes total of 6 bytes in size for a 16-bit segment and 32-bit address, which is encoded as <span style='font-family:monospace;'>m16:32</span> from the table <a href="#jmp_instruction">Part \Roman{part}</a>. As can be seen from the figure above, the blue part is a segment address, loaded into <span style='font-family:monospace;'>cs</span> register with the value <span style='font-family:monospace;'>0x5678</span>; the red part is the memory address within that segment, loaded into <span style='font-family:monospace;'>eip </span>register with the value <span style='font-family:monospace;'>0x1234</span> and start executing from there. </div>

<div class="standard" id='magicparlabel-37489'>Finally, the <span style='font-family:monospace;'>jmp</span> instructions with <span style='font-family:monospace;'>EA</span> opcode jump to a direct absolute address. For example, the instruction:</div>

<div class="lyx_code" id='magicparlabel-37490'><div class="lyx_code_item">jmp 0x5678:0x1234</div>
</div>
<div class="standard" style='text-align: left;' id='magicparlabel-37491'>is generated into:</div>

<div class="lyx_code" id='magicparlabel-37492'><div class="lyx_code_item">ea 34 12 78 56</div>
</div>
<div class="standard" style='text-align: left;' id='magicparlabel-37493'>The address <span style='font-family:monospace;'>0x5678:0x1234</span> is right next to the opcode, unlike <span style='font-family:monospace;'>FF /5</span> instruction that needs an indirect address in <span style='font-family:monospace;'>eax</span> register.</div>

<div class="standard" id='magicparlabel-37494'>We skip the jump instruction with <span style='font-family:monospace;'>REX</span> prefix, as it is a 64-bit instruction. </div>


<div class="section" id='magicparlabel-37500'>Examine compiled data</div>
<div class="standard" id='magicparlabel-37501'>In this section, we will examine how data definition in C maps to its assembly form. The generated code is extracted from <span style='font-family:monospace;'>.bss</span> section. That means, the assembly code displayed has no<div class="foot"><span class="foot_label">15</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-37505'>Actually, code is just a type of data, and is often used for hijacking into a running program to execute such code. However, we have no use for it in this book.</div>
</div></div>, aside from showing that such a value has an equivalent assembly opcode that represents an instruction.</div>

<div class="standard" id='magicparlabel-37506'>The code-assembly listing is not random, but is based on <em>Chapter 4</em> of Volume 1, <em>&ldquo;Data Type&rdquo;</em>. The chapter lists fundamental data types that x86 hardware operates on, and through learning the generated assembly code, it can be understood how close C maps its syntax to hardware, and then a programmer can see why C is appropriate for OS programming. The specific <span style='font-family:monospace;'>objdump</span> command used in this section will be:</div>



<div class="standard" id='magicparlabel-37512'><span style='font-family:monospace;'>$ objdump -z -M intel -S -D &lt;object file&gt; | less</span></div>



<div class="standard" id='magicparlabel-37518'><b>Note:</b> zero bytes are hidden with three dot symbols: <span style='font-family:monospace;'>...</span> To show all the zero bytes, we add <span style='font-family:monospace;'>-z</span> option.</div>
<div class="subsection" id='magicparlabel-37519'>Fundamental data types</div>
<div class="standard" id='magicparlabel-37520'>The most basic types that x86 architecture works with are based on sizes, each is twice as large as the previous one: 1 byte (8 bits), 2 bytes (16 bits), 4 bytes (32 bits), 8 bytes (64 bits) and 16 bytes (128 bits).</div>



<div class="standard" id='magicparlabel-37527'><img style='width:50%;' src='22_img_04_fundamental_data_types.png' alt='image: 22_img_04_fundamental_data_types.png' />
</div>



<div class="standard" id='magicparlabel-37533'>These types are simplest: they are just chunks of memory at different sizes that enables CPU to access memory efficiently. From the manual, <em>section 4.1.1</em>, volume 1:</div>

<blockquote class="quote" id='magicparlabel-37534'><div class="quote_item">Words, doublewords, and quadwords do not need to be aligned in memory on natural boundaries. The natural boundaries for words, double words, and quadwords are even-numbered addresses, addresses evenly divisible by four, and addresses evenly divisible by eight, respectively. However, to improve the performance of programs, data structures (especially stacks) should be aligned on natural boundaries whenever possible. The reason for this is that the processor requires two memory accesses to make an unaligned memory access; aligned accesses require only one memory access. A word or doubleword operand that crosses a 4-byte boundary or a quadword operand that crosses an 8-byte boundary is considered unaligned and requires two separate memory bus cycles for access.</div>
<div class="quote_item">Some instructions that operate on double quadwords require memory operands to be aligned on a natural boundary. These instructions generate a general-protection exception (<span style='font-family:monospace;'>#GP</span>) if an unaligned operand is specified. A natural boundary for a double quadword is any address evenly divisible by 16. Other instructions that operate on double quadwords permit unaligned access (without generating a general-protection exception). However, additional memory bus cycles are required to access unaligned data from memory.</div>
</blockquote>
<div class="standard" id='magicparlabel-37536'>In C, the following primitive types (must include <span style='font-family:monospace;'>stdint.h</span>) maps to the fundamental types:</div>

<dl class='description' id='magicparlabel-37537'><dt class="description_label">Source
<br />

</dt>
<dd class="description_item">

<div class="full_width" id='magicparlabel-37538'><div class="full_width_item"><div class='float-listings'><pre class ='listings'>#include &lt;stdint.h&gt;

uint8_t byte = 0x12;
uint16_t word = 0x1234;
uint32_t dword = 0x12345678;
uint64_t qword = 0x123456789abcdef;
unsigned __int128 dqword1 =  (__int128) 0x123456789abcdef;
unsigned __int128 dqword2 =  (__int128) 0x123456789abcdef &lt;&lt; 64;

int main(int argc, char *argv[]) {
        return 0;
}</pre></div>
</div>
</div>
</dd><dt class="description_label">Assembly
<br />

</dt>
<dd class="description_item">

<div class="lyx_code" id='magicparlabel-37555'><div class="lyx_code" style='text-align: left;'>0804a018 &lt;byte&gt;:</div>
<div class="lyx_code_item"> 804a018:       12 00                   adc    al,BYTE PTR [eax]</div>
<div class="lyx_code_item"></div>
<div class="lyx_code_item">0804a01a &lt;word&gt;:</div>
<div class="lyx_code_item"> 804a01a:       34 12                   xor    al,0x12</div>
<div class="lyx_code_item"></div>
<div class="lyx_code_item">0804a01c &lt;dword&gt;:</div>
<div class="lyx_code_item"> 804a01c:       78 56                   js     804a074 &lt;_end+0x48&gt;</div>
<div class="lyx_code_item"> 804a01e:       34 12                   xor    al,0x12</div>
<div class="lyx_code_item"></div>
<div class="lyx_code_item">0804a020 &lt;qword&gt;:</div>
<div class="lyx_code_item"> 804a020:       ef                      out    dx,eax</div>
<div class="lyx_code_item"> 804a021:       cd ab                   int    0xab</div>
<div class="lyx_code_item"> 804a023:       89 67 45                mov    DWORD PTR [edi+0x45],esp</div>
<div class="lyx_code_item"> 804a026:       23 01                   and    eax,DWORD PTR [ecx]</div>
<div class="lyx_code_item"></div>
<div class="lyx_code_item">0000000000601040 &lt;dqword1&gt;:</div>
<div class="lyx_code_item">  601040:       ef                      out    dx,eax</div>
<div class="lyx_code_item">  601041:       cd ab                   int    0xab</div>
<div class="lyx_code_item">  601043:       89 67 45                mov    DWORD PTR [rdi+0x45],esp</div>
<div class="lyx_code_item">  601046:       23 01                   and    eax,DWORD PTR [rcx]</div>
<div class="lyx_code_item">  601048:       00 00                   add    BYTE PTR [rax],al</div>
<div class="lyx_code_item">  60104a:       00 00                   add    BYTE PTR [rax],al</div>
<div class="lyx_code_item">  60104c:       00 00                   add    BYTE PTR [rax],al</div>
<div class="lyx_code_item">  60104e:       00 00                   add    BYTE PTR [rax],al</div>
<div class="lyx_code_item"></div>
<div class="lyx_code_item">0000000000601050 &lt;dqword2&gt;:</div>
<div class="lyx_code_item">  601050:       00 00                   add    BYTE PTR [rax],al</div>
<div class="lyx_code_item">  601052:       00 00                   add    BYTE PTR [rax],al</div>
<div class="lyx_code_item">  601054:       00 00                   add    BYTE PTR [rax],al</div>
<div class="lyx_code_item">  601056:       00 00                   add    BYTE PTR [rax],al</div>
<div class="lyx_code_item">  601058:       ef                      out    dx,eax</div>
<div class="lyx_code_item">  601059:       cd ab                   int    0xab</div>
<div class="lyx_code_item">  60105b:       89 67 45                mov    DWORD PTR [rdi+0x45],esp</div>
<div class="lyx_code_item">  60105e:       23 01                   and    eax,DWORD PTR [rcx]</div>
<div class="lyx_code_item"></div>
</div>
</dd></dl>
<div class="standard" style='text-align: left;' id='magicparlabel-37591'><span style='font-family:monospace;'>gcc</span> generates the variables <span style='font-family:monospace;'>byte</span>, <span style='font-family:monospace;'>word</span>, <span style='font-family:monospace;'>dword</span>, <span style='font-family:monospace;'>qword</span>, <span style='font-family:monospace;'>dqword1</span>, <span style='font-family:monospace;'>dword2</span>, written earlier, with their respective values highlighted in the same colors; variables of the same type are also highlighted in the same color. Since this is data section,<span style='font-family:monospace;'> </span>the assembly listing carries no meaning. When <span style='font-family:monospace;'>byte</span> is declared with <span style='font-family:monospace;'>uint8_t</span>, <span style='font-family:monospace;'>gcc</span> guarantees that the size of <span style='font-family:monospace;'>byte</span> is always 1 byte. But, an alert reader might notice the <span style='font-family:monospace;'>00</span> value next to the <span style='font-family:monospace;'>12</span> value in the <span style='font-family:monospace;'>byte</span> variable. This is normal, as <span style='font-family:monospace;'>gcc</span> avoid memory misalignment by adding extra <em><a id='magicparlabel-37595' />
padding bytes</em>. To make it easier to see, we look at <span style='font-family:monospace;'>readelf</span> output of <span style='font-family:monospace;'>.data</span> section:</div>



<div class="standard" id='magicparlabel-37601'><span style='font-family:monospace;'>$ readelf -x .data hello</span></div>


<div class="standard" id='magicparlabel-37602'><br />

</div>

<div class="standard" style='text-align: left;' id='magicparlabel-37607'>the output is (the colors mark which values belong to which variables):</div>

<div class="lyx_code" id='magicparlabel-37608'><div class="lyx_code_item">Hex dump of section '.data':</div>
<div class="lyx_code_item">  0x00601020 00000000 00000000 00000000 00000000 ................</div>
<div class="lyx_code_item">  0x00601030 12003412 78563412 efcdab89 67452301 ..4.xV4.....gE#.</div>
<div class="lyx_code_item">  0x00601040 efcdab89 67452301 00000000 00000000 ....gE#.........</div>
<div class="lyx_code_item">  0x00601050 00000000 00000000 efcdab89 67452301 ............gE#.</div>
</div>
<div class="standard" id='magicparlabel-37613'>As can be seen in the <span style='font-family:monospace;'>readelf</span> output, variables are allocated storage space according to their types and in the declared order by the programmer (the colors correspond the the variables). Intel is a little-endian machine, which means smaller addresses hold bytes with smaller values, larger addresses hold byte with larger values. For example, <span style='font-family:monospace;'>0x1234</span> is displayed as <span style='font-family:monospace;'>34 12</span>; that is, <span style='font-family:monospace;'>34</span> appears first at address <span style='font-family:monospace;'>0x601032</span>, then <span style='font-family:monospace;'>12</span> at <span style='font-family:monospace;'>0x601033</span>. The decimal values within a byte is unchanged, so we see <span style='font-family:monospace;'>34</span> <span style='font-family:monospace;'>12</span> instead of <span style='font-family:monospace;'>43 21</span>. This is quite confusing at first, but you will get used to it soon.</div>

<div class="standard" id='magicparlabel-37614'>Also, isn't it redundant when <span style='font-family:monospace;'>char</span> type is always 1 byte already and why do we bother adding <span style='font-family:monospace;'>int8_t</span>? The truth is, <span style='font-family:monospace;'>char</span> type is not guaranteed to be 1 byte in size, but only the minimum of 1 byte in size. In C, a byte is defined to be the size of a char, and a char is defined to be smallest addressable unit of the underlying hardware platform. There are hardware devices that the smallest addressable unit is 16 bit or even bigger, which means char is 2 bytes in size and a &ldquo;byte&rdquo; in such platforms is actually 2 units of 8-bit bytes.</div>

<div class="standard" id='magicparlabel-37615'>Not all architectures support the double quadword type. Still, <span style='font-family:monospace;'>gcc </span>does provide support for 128-bit number and generate code when a CPU supports it (that is, a CPU must be 64-bit). By specifying a variable of type <span style='font-family:monospace;'>__int128</span> or <span style='font-family:monospace;'>unsigned __int128</span>, we get a 128-bit variable. If a CPU does not support 64-bit mode, <span style='font-family:monospace;'>gcc</span> throws an error.</div>

<div class="standard" id='magicparlabel-37616'>The data types in C, which represents the fundamental data types, are also called <em>unsigned numbers</em>. Other than numerical calculations, unsigned numbers are used as a tool for structuring data in memory; we will this application see later in the book, when various data structures are organized into bit groups.</div>

<div class="standard" id='magicparlabel-37617'>In all the examples above, when the value of a variable with smaller size is assigned to a variable with larger size, the value easily fits in the larger variable. On the contrary, the value of a variable with larger size is assigned to a variable with smaller size, two scenarios occur: </div>

<ul class="itemize" id='magicparlabel-37618'><li class="itemize_item">The value is greater than the maximum value of the variable with smaller layout, so it needs truncating to the size of the variable and causing incorrect value.</li>
<li class="itemize_item">The value is smaller than the maximum value of the variable with a smaller layout, so it fits the variable.</li>
</ul>
<div class="standard" id='magicparlabel-37620'>However, the value might be unknown until runtime and can be value, it is best not to let such implicit conversion handled by the compiler, but explicitly controlled by a programmer. Otherwise it will cause subtle bugs that are hard to catch as the erroneous values might rarely be used to reproduce the bugs.</div>
<div class="subsection" id='magicparlabel-37621'>Pointer Data Types</div>
<div class="standard" id='magicparlabel-37622'>Pointers are variables that hold memory addresses. x86 works with 2 types of pointers:</div>

<dl class='description' id='magicparlabel-37623'><dt class="description_label">Near&nbsp;pointer</dt>
<dd class="description_item"> is a 16-bit/32-bit offset within a segment, also called <em>effective address</em>.</dd>
<dt class="description_label">Far&nbsp;pointer</dt>
<dd class="description_item"> is also an offset like a near pointer, but with an explicit segment selector.</dd>
</dl>


<div class="standard" id='magicparlabel-37631'><img src='23_img_04_pointer_data_type.png' alt='image: 23_img_04_pointer_data_type.png' />
</div>



<div class="standard" id='magicparlabel-37637'>C only provides near pointer, since far pointer is platform dependent, such as x86. In application code, you can assume that the address of current segment starts at 0, so the offset is actually any memory addres from 0 to the maximum address.</div>

<dl class='description' id='magicparlabel-37638'><dt class="description_label">Source
<br />

</dt>
<dd class="description_item">

<div class="full_width" id='magicparlabel-37639'><div class="full_width_item"><div class='float-listings'><pre class ='listings C'>#include &lt;stdint.h&gt;

int8_t i = 0;
int8_t *p1 =  (int8_t *) 0x1234;
int8_t *p2 =  &amp;i;

int main(int argc, char *argv[]) {
        return 0;
}</pre></div>
</div>
</div>
</dd><dt class="description_label">Assembly
<br />

</dt>
<dd class="description_item">

<div class="lyx_code" id='magicparlabel-37653'><div class="lyx_code_item">0000000000601030 &lt;p1&gt;:</div>
<div class="lyx_code_item">  601030:       34 12                   xor    al,0x12</div>
<div class="lyx_code_item">  601032:       00 00                   add    BYTE PTR [rax],al</div>
<div class="lyx_code_item">  601034:       00 00                   add    BYTE PTR [rax],al</div>
<div class="lyx_code_item">  601036:       00 00                   add    BYTE PTR [rax],al</div>
<div class="lyx_code_item">0000000000601038 &lt;p2&gt;:</div>
<div class="lyx_code_item">  601038:       41 10 60 00             adc    BYTE PTR [r8+0x0],spl</div>
<div class="lyx_code_item">  60103c:       00 00                   add    BYTE PTR [rax],al</div>
<div class="lyx_code_item">  60103e:       00 00                   add    BYTE PTR [rax],al</div>
<div class="lyx_code_item"></div>
<div class="lyx_code_item">Disassembly of section .bss:</div>
<div class="lyx_code_item"></div>
<div class="lyx_code_item">0000000000601040 &lt;__bss_start&gt;:</div>
<div class="lyx_code_item">  601040:       00 00                   add    BYTE PTR [rax],al</div>
<div class="lyx_code_item">0000000000601041 &lt;i&gt;:</div>
<div class="lyx_code_item">  601041:       00 00                   add    BYTE PTR [rax],al</div>
<div class="lyx_code_item">  601043:       00 00                   add    BYTE PTR [rax],al</div>
<div class="lyx_code_item">  601045:       00 00                   add    BYTE PTR [rax],al</div>
<div class="lyx_code_item">  601047:       00                      .byte 0x0</div>
</div>
</dd></dl>
<div class="standard" id='magicparlabel-37672'>The pointer <span style='font-family:monospace;'>p1</span> holds a direct address with the value <span style='font-family:monospace;'>0x1234</span>. The pointer <span style='font-family:monospace;'>p2</span> holds the address of the variable <span style='font-family:monospace;'>i</span>. Note that both the pointers are 8 bytes in size (or 4-byte, if 32-bit).</div>
<div class="subsection" id='magicparlabel-37673'>Bit Field Data Type</div>
<div class="standard" id='magicparlabel-37674'>A <em>bit field<a id='magicparlabel-37678' />
</em> is a contiguous sequence of bits. Bit fields allow data structuring at bit level. For example, a 32-bit data can hold multiple bit fields that represent multiples different pieces of information, such as bits 0-4 specifies the size of a data structure, bit 5-6 specifies permissions and so on. Data structures at the bit level are common for low-level programming. </div>



<div class="standard" id='magicparlabel-37685'><img style='width:78%;' src='24_img_04_bit_field_data_type.png' alt='image: 24_img_04_bit_field_data_type.png' />
</div>



<dl class='description' id='magicparlabel-37691'><dt class="description_label">Source
<br />

</dt>
<dd class="description_item">

<div class='float-listings'><pre class ='listings'>struct bit_field {
    int data1:8;
    int data2:8;
    int data3:8;
    int data4:8;
};

struct bit_field2 {
    int data1:8;
    int data2:8;
    int data3:8;
    int data4:8;
    char data5:4;
};

struct normal_struct {
    int data1;
    int data2;
    int data3;
    int data4;
};

struct normal_struct ns = {
    .data1 = 0x12345678,
    .data2 = 0x9abcdef0,
    .data3 = 0x12345678,
    .data4 = 0x9abcdef0,
};

int i = 0x12345678;

struct bit_field bf = {
    .data1 = 0x12,
    .data2 = 0x34,
    .data3 = 0x56,
    .data4 = 0x78
};

struct bit_field2 bf2 = {
    .data1 = 0x12,
    .data2 = 0x34,
    .data3 = 0x56,
    .data4 = 0x78,
    .data5 = 0xf
};

int main(int argc, char *argv[]) {
    return 0;
}</pre></div>

</dd><dt class="description_label">Assembly
<br />

</dt>
<dd class="description_item">
<div class="standard" id='magicparlabel-37746'>Each variable and its value are given a unique color in the assembly listing below:</div>

<div class="lyx_code" id='magicparlabel-37747'><div class="lyx_code_item">0804a018 &lt;ns&gt;:</div>
<div class="lyx_code_item"> 804a018: 78 56                   js     804a070 &lt;_end+0x34&gt;</div>
<div class="lyx_code_item"> 804a01a: 34 12                   xor    al,0x12</div>
<div class="lyx_code_item"> 804a01c: f0 de bc 9a 78 56 34    lock fidivr WORD PTR [edx+ebx*4+0x12345678]</div>
<div class="lyx_code_item"> 804a023: 12 </div>
<div class="lyx_code_item"> 804a024: f0 de bc 9a 78 56 34    lock fidivr WORD PTR [edx+ebx*4+0x12345678]</div>
<div class="lyx_code_item"> 804a02b: 12 </div>
<div class="lyx_code_item">0804a028 &lt;i&gt;:</div>
<div class="lyx_code_item"> 804a028: 78 56                   js     804a080 &lt;_end+0x44&gt;</div>
<div class="lyx_code_item"> 804a02a: 34 12                   xor    al,0x12</div>
<div class="lyx_code_item">0804a02c &lt;bf&gt;:</div>
<div class="lyx_code_item"> 804a02c: 12 34 56                adc    dh,BYTE PTR [esi+edx*2]</div>
<div class="lyx_code_item"> 804a02f: 78 12                   js     804a043 &lt;_end+0x7&gt;</div>
<div class="lyx_code_item">0804a030 &lt;bf2&gt;:</div>
<div class="lyx_code_item"> 804a030: 12 34 56                adc    dh,BYTE PTR [esi+edx*2]</div>
<div class="lyx_code_item"> 804a033: 78 0f                   js     804a044 &lt;_end+0x8&gt;</div>
<div class="lyx_code_item"> 804a035: 00 00                   add    BYTE PTR [eax],al</div>
<div class="lyx_code_item"> 804a037: 00                      .byte 0x0</div>
</div>
</dd></dl>
<div class="standard" id='magicparlabel-37765'>The sample code creates 4 variables: <span style='font-family:monospace;'>ns</span>, <span style='font-family:monospace;'>i</span>, <span style='font-family:monospace;'>bf</span>, <span style='font-family:monospace;'>bf2</span>. The definition of <span style='font-family:monospace;'>normal_struct</span> and <span style='font-family:monospace;'>bit_field</span> structs both specify 4 integers.<span style='font-family:monospace;'> bit_field</span> specifies additional information next to its member name, separated by a colon, e.g. <span style='font-family:monospace;'>.data1 : 8</span>. This extra information is the bit width of each bit group. It means, even though defined as an <span style='font-family:monospace;'>int</span>, <span style='font-family:monospace;'>.data1</span> only consumes 8 bit of information. If additional data members are specified after <span style='font-family:monospace;'>.data1</span>, two scenarios happen:</div>

<ul class="itemize" id='magicparlabel-37766'><li class="itemize_item">If the new data members fit within the remaining bits after <span style='font-family:monospace;'>.data</span>, which are 24 bits<div class="foot"><span class="foot_label">16</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-37770'>Since .data1 is declared as an int, 32 bits are still allocated, but <span style='font-family:monospace;'>.data1 </span>can only access 8 bits of information.</div>
</div></div>, then the total size of <span style='font-family:monospace;'>bit_field</span> struct is still 4 bytes, or 32 bits.</li>
<li class="itemize_item">If the new data members don't fit, then the remaining 24 bits (3 bytes) are still allocated. However, the new data members are allocated brand new storages, without using the previous 24 bits.</li>
</ul>
<div class="standard" id='magicparlabel-37772'>In the example, the 4 data members: <span style='font-family:monospace;'>.data1</span>,<span style='font-family:monospace;'> .data2</span>,<span style='font-family:monospace;'> .data3</span> and<span style='font-family:monospace;'> .data4</span>, each can access 8 bits of information, and together can access all of 4 bytes of the integer first declared by <span style='font-family:monospace;'>.data1</span>. As can be seen by the generated assembly code, the values of <span style='font-family:monospace;'>bf</span> are follow natural order as written in the C code: <span style='font-family:monospace;'>12 34 56 78</span>, since each value is a separate members. In contrast, the value of <span style='font-family:monospace;'>i</span> is a number as a whole, so it is subject to the rule of little endianess and thus contains the value <span style='font-family:monospace;'>78</span> <span style='font-family:monospace;'>56 34 12</span>. Note that at <span style='font-family:monospace;'>804a02f</span>, is the address of the final byte in <span style='font-family:monospace;'>bf</span>, but next to it is a number <span style='font-family:monospace;'>12</span>, despite <span style='font-family:monospace;'>78</span> is the last number in it. This extra number <span style='font-family:monospace;'>12</span> does not belong to the value of <span style='font-family:monospace;'>bf</span>. <span style='font-family:monospace;'>objdump</span> is just being confused that <span style='font-family:monospace;'>78</span> is an opcode; <span style='font-family:monospace;'>78</span> corresponds to <span style='font-family:monospace;'>js</span> instruction, and it requires an operand. For that reason, <span style='font-family:monospace;'>objdump</span> grabs whatever the next byte after 78 and put it there. <span style='font-family:monospace;'>objdump</span> is a tool to display assembly code after all. A better tool to use is <span style='font-family:monospace;'>gdb</span> that we will learn in the next chapter. But for this chapter, <span style='font-family:monospace;'>objdump</span> suffices.</div>

<div class="standard" id='magicparlabel-37773'>Unlike <span style='font-family:monospace;'>bf</span>, each data member in <span style='font-family:monospace;'>ns</span> is allocated fully as an integer, 4 bytes each, 16 bytes in total. As we can see, bit field and normal struct are different: bit field structure data at the bit level, while normal struct works at byte level.</div>

<div class="standard" id='magicparlabel-37774'>Finally, the struct of <span style='font-family:monospace;'>bf2<div class="foot"><span class="foot_label">17</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-37778'>bit_field2</div>
</div></div> </span>is the same of <span style='font-family:monospace;'>bf</span><div class="foot"><span class="foot_label">18</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-37782'>bit_field</div>
</div></div>, except it contains one more data member: <span style='font-family:monospace;'>.data5</span>, and is defined as an integer. For this reason, another 4 bytes are allocated just for <span style='font-family:monospace;'>.data5</span>, even though it can only access 8 bits of information, and the final value of <span style='font-family:monospace;'>bf2</span> is: <span style='font-family:monospace;'>12 34 56 78 0f 00 00 00</span>. The remaining 3 bytes must be accessed by the mean of a pointer, or casting to another data type that can fully access all 4 bytes..</div>

<div class="exercise" id='magicparlabel-37783'><div class="exercise_item"><span class="exercise_label">Exercise 0.4.</span>
What happens when the definition of <span style='font-family:monospace;'>bit_field</span> struct and <span style='font-family:monospace;'>bf</span> variable are changed to:
<br />

</div>

<div class="lyx_code" id='magicparlabel-37784'><div class="lyx_code_item">struct bit_field {</div>
<div class="lyx_code_item">    int data1:8;</div>
<div class="lyx_code_item">};</div>
<div class="lyx_code_item">struct bit_field bf = {</div>
<div class="lyx_code_item">    .data1 = 0x1234,</div>
<div class="lyx_code_item">};</div>
</div>
<div class="standard" id='magicparlabel-37790'>What will be the value of <span style='font-family:monospace;'>.data1</span>?</div>

<div class="exercise" id='magicparlabel-37791'><div class="exercise_item"><span class="exercise_label">Exercise 0.5.</span>
What happens when the definition of <span style='font-family:monospace;'>bit_field2</span> struct is changed to:</div>
</div>

<div class="lyx_code" id='magicparlabel-37792'><div class="lyx_code_item">struct bit_field2 {</div>
<div class="lyx_code_item">    int data1:8;</div>
<div class="lyx_code_item">    int data5:32;</div>
<div class="lyx_code_item">};</div>
</div>
<div class="standard" id='magicparlabel-37796'>What is layout of a variable of type <span style='font-family:monospace;'>bit_field2?</span></div>
</div>
<div class="subsection" id='magicparlabel-37797'>String Data Types</div>
<div class="standard" id='magicparlabel-37798'>Although share the same name, string as defined by x86 is different than a string in C. x86 defines string as <em>&ldquo;continuous sequences of bits, bytes, words, or doublewords&rdquo;</em>. On the other hand, C defines a string as an array of 1-byte characters with a zero as the last element of the array to make a <em>null-terminated string</em>. This implies that strings in x86 are arrays, not C strings. A programmer can define an array of bytes, words or doublewords with <span style='font-family:monospace;'>char</span> or <span style='font-family:monospace;'>uint8_t</span>, <span style='font-family:monospace;'>short</span> or <span style='font-family:monospace;'>uint16_t</span> and <span style='font-family:monospace;'>int</span> or <span style='font-family:monospace;'>uint32_t</span>, except an array of bits. However, such a feature can be easily implemented, as an array of bits is essentially any array of bytes, or words or doublewords, but operates at the bit level.</div>

<div class="standard" id='magicparlabel-37799'>The following code demonstrates how to define array (string) data types:</div>

<dl class='description' id='magicparlabel-37800'><dt class="description_label">Source
<br />

</dt>
<dd class="description_item">

<div class='float-listings'><pre class ='listings'>#include &lt;stdint.h&gt;

uint8_t a8[2] = {0x12, 0x34};
uint16_t a16[2] = {0x1234, 0x5678};
uint32_t a32[2] = {0x12345678, 0x9abcdef0};
uint64_t a64[2] = {0x123456789abcdef0, 0x123456789abcdef0};

int main(int argc, char *argv[])
{
    return 0;
}</pre></div>

</dd><dt class="description_label">Assembly
<br />

</dt>
<dd class="description_item">

<div class="lyx_code" id='magicparlabel-37817'><div class="lyx_code_item">0804a018 &lt;a8&gt;:</div>
<div class="lyx_code_item"> 804a018: 12 34 00                adc    dh,BYTE PTR [eax+eax*1]</div>
<div class="lyx_code_item"> 804a01b: 00 34 12                add    BYTE PTR [edx+edx*1],dh</div>
<div class="lyx_code_item">0804a01c &lt;a16&gt;:</div>
<div class="lyx_code_item"> 804a01c: 34 12                   xor    al,0x12</div>
<div class="lyx_code_item"> 804a01e: 78 56                   js     804a076 &lt;_end+0x3a&gt;</div>
<div class="lyx_code_item">0804a020 &lt;a32&gt;:</div>
<div class="lyx_code_item"> 804a020: 78 56                   js     804a078 &lt;_end+0x3c&gt;</div>
<div class="lyx_code_item"> 804a022: 34 12                   xor    al,0x12</div>
<div class="lyx_code_item"> 804a024: f0 de bc 9a f0 de bc    lock fidivr WORD PTR [edx+ebx*4-0x65432110]</div>
<div class="lyx_code_item"> 804a02b: 9a </div>
<div class="lyx_code_item">0804a028 &lt;a64&gt;:</div>
<div class="lyx_code_item"> 804a028: f0 de bc 9a 78 56 34    lock fidivr WORD PTR [edx+ebx*4+0x12345678]</div>
<div class="lyx_code_item"> 804a02f: 12 </div>
<div class="lyx_code_item"> 804a030: f0 de bc 9a 78 56 34    lock fidivr WORD PTR [edx+ebx*4+0x12345678]</div>
<div class="lyx_code_item"> 804a037: 12 </div>
</div>
</dd></dl>
<div class="standard" id='magicparlabel-37833'>Despite <span style='font-family:monospace;'>a8</span> is an array with 2 elements, each is 1-byte long, but it is still allocated with 4 bytes. Again, to ensure natural alignment for best performance, <span style='font-family:monospace;'>gcc</span> pads extra zero bytes. As shown in the assembly listing, the actual value of <span style='font-family:monospace;'>a8</span> is <span style='font-family:monospace;'>12 34 00 00</span>, with <span style='font-family:monospace;'>a8[0]</span> equals to <span style='font-family:monospace;'>12</span> and <span style='font-family:monospace;'>a8[1]</span> equals to <span style='font-family:monospace;'>34</span>.</div>

<div class="standard" id='magicparlabel-37834'>Then it comes <span style='font-family:monospace;'>a16</span> with 2 elements, each is 2-byte long. Since 2 elements are 4 bytes in total, which is in the natural alignment, <span style='font-family:monospace;'>gcc</span> pads no byte. The value of <span style='font-family:monospace;'>a16</span> is <span style='font-family:monospace;'>34 12 78 56</span>, with <span style='font-family:monospace;'>a16[0]</span> equals to <span style='font-family:monospace;'>34 12</span> and <span style='font-family:monospace;'>a16[1]</span> equals to <span style='font-family:monospace;'>78 56</span>. Note that, objdump is confused again, as <span style='font-family:monospace;'>de</span> is the opcode for the instruction <span style='font-family:monospace;'>fidivr</span> (short of reverse divide) that requires another operand, so <span style='font-family:monospace;'>objdump</span> grabs whatever the next bytes that makes sense to it for creating &ldquo;an operand&rdquo;. Only the highlighted values belong to <span style='font-family:monospace;'>a32</span>. </div>

<div class="standard" id='magicparlabel-37835'>Next is <span style='font-family:monospace;'>a32</span>, with 2 elements, 4 bytes each. Similar to above arrays, the value of <span style='font-family:monospace;'>a32[0]</span> is <span style='font-family:monospace;'>78 56 34 12</span>, the value of <span style='font-family:monospace;'>a32[1]</span> is <span style='font-family:monospace;'>f0 de bc 9a</span>, exactly what is assigned in the C code.</div>

<div class="standard" id='magicparlabel-37836'>Finally is <span style='font-family:monospace;'>a64</span>, also with 2 elements, but 8 bytes each. The total size of <span style='font-family:monospace;'>a64</span> is 16 bytes, which is in the natural alignment, therefore no padding bytes added. The values of both <span style='font-family:monospace;'>a64[0]</span> and <span style='font-family:monospace;'>a64[1]</span> are the same: <span style='font-family:monospace;'>f0 de bc 9a 78 56 34 12</span>, that got misinterpreted to <span style='font-family:monospace;'>fidivr</span> instruction.</div>


<div class='float-figure'><div class="plain_layout" id='magicparlabel-37841'><span class='float-caption-Standard float-caption float-caption-standard'>Figure 0.13:  <span style='font-family:monospace;'>a8</span>, <span style='font-family:monospace;'>a16</span>, <span style='font-family:monospace;'>a32</span> and <span style='font-family:monospace;'>a64 </span>memory layouts</span></div>

<div class="plain_layout" id='magicparlabel-37846'><span style='font-family:monospace;'>a8: &nbsp;

<table><tbody><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-37855'><span style='font-family:monospace;'>12 |&nbsp;34 </span></div>
</td>
</tr></tbody>
</table>
</span></div>

<div class="plain_layout" id='magicparlabel-37856'><span style='font-family:monospace;'>a16: 

<table><tbody><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-37865'><span style='font-family:monospace;'>34 12&nbsp;&nbsp;&nbsp;|&nbsp;78 56&nbsp;&nbsp;&nbsp;</span></div>
</td>
</tr></tbody>
</table>
</span></div>

<div class="plain_layout" id='magicparlabel-37866'><span style='font-family:monospace;'>a32: 

<table><tbody><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-37875'><span style='font-family:monospace;'>78 56 34 12&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;f0 de bc 9a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></div>
</td>
</tr></tbody>
</table>
</span></div>

<div class="plain_layout" id='magicparlabel-37876'><span style='font-family:monospace;'>a64: 

<table><tbody><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-37885'><span style='font-family:monospace;'>f0 de bc 9a 78 56 34 12&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;f0 de bc 9a 78 56 34 12&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></div>
</td>
</tr></tbody>
</table>
</span></div>
</div>


<div class="standard" id='magicparlabel-37886'>However, beyond one-dimensional arrays that map directly to hardware string type, C provides its own syntax for multi-dimensional arrays:</div>

<dl class='description' id='magicparlabel-37887'><dt class="description_label">Source
<br />

</dt>
<dd class="description_item">

<div class='float-listings'><pre class ='listings'>#include &lt;stdint.h&gt;

uint8_t a2[2][2] = {
    {0x12, 0x34},
    {0x56, 0x78}
};

uint8_t a3[2][2][2] = {
    {{0x12, 0x34},
     {0x56, 0x78}},
    {{0x9a, 0xbc},
     {0xde, 0xff}},
};

int main(int argc, char *argv[]) {
    return 0;
}</pre></div>

</dd><dt class="description_label">Assembly
<br />

</dt>
<dd class="description_item">

<div class="lyx_code" id='magicparlabel-37910'><div class="lyx_code_item">0804a018 &lt;a2&gt;:</div>
<div class="lyx_code_item"> 804a018: 12 34 56                adc    dh,BYTE PTR [esi+edx*2]</div>
<div class="lyx_code_item"> 804a01b: 78 12                   js     804a02f &lt;_end+0x7&gt;</div>
<div class="lyx_code_item">0804a01c &lt;a3&gt;:</div>
<div class="lyx_code_item"> 804a01c: 12 34 56                adc    dh,BYTE PTR [esi+edx*2]</div>
<div class="lyx_code_item"> 804a01f: 78 9a                   js     8049fbb &lt;_DYNAMIC+0xa7&gt;</div>
<div class="lyx_code_item"> 804a021: bc                      .byte 0xbc</div>
<div class="lyx_code_item"> 804a022: de ff                   fdivrp st(7),st</div>
<div class="lyx_code_item"></div>
</div>
</dd></dl>
<div class="standard" id='magicparlabel-37919'>Technically, multi-dimensional arrays are like normal arrays: in the end, the total size is translated into flat allocated bytes. A 2 x 2 array is allocated with 4 bytes; a <math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mrow><mn>2</mn><mo> &times; </mo><mn>2</mn><mo> &times; </mo><mn>2</mn>
  </mrow>
 </mrow></math> array is allocated with 8 bytes, as can be seen in the assembly listing of <span style='font-family:monospace;'>a2<div class="foot"><span class="foot_label">19</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-37923'>Again, <span style='font-family:monospace;'>objdump</span> is confused and put the number <span style='font-family:monospace;'>12</span> next to 78 in <span style='font-family:monospace;'>a3</span> listing.</div>
</div></div></span> and <span style='font-family:monospace;'>a3</span>. In low-level assembly code, the representation is the same between <span style='font-family:monospace;'>a[4]</span> and <span style='font-family:monospace;'>a[2][2]</span>. However, in high-level C code, the difference is tremendous. The syntax of multi-dimensional array enables a programmer to think with higher level concepts, instead of translating manually from high-level concepts to low-level code and work with high-level concepts in his head at the same time. </div>

<div class="example" id='magicparlabel-37924'><div class="example_item"><span class="example_label">Example 0.16.</span>
The following two-dimensional array can hold a list of 2 names with the length of 10:
<br />

</div>

<div class='float-listings'><pre class ='listings'>char names[2][10] = {
    "John Doe",
    "Jane Doe"
};</pre></div>


<div class="standard" id='magicparlabel-37933'>To access a name, we simply adjust the column index<div class="foot"><span class="foot_label">20</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-37937'>The left index is called column index since it changes the index based on a column.</div>
</div></div> e.g. <span style='font-family:monospace;'>names[0]</span>, <span style='font-family:monospace;'>names[1]</span>. To access individual character within a name, we use the row index<div class="foot"><span class="foot_label">21</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-37941'>Same with column index, the right index is called row index since it changes the index based on a row.</div>
</div></div> e.g. <span style='font-family:monospace;'>names[0][0] </span>gives the character &ldquo;J&rdquo;, <span style='font-family:monospace;'>names[0][1]</span> gives the character &ldquo;o&rdquo; and so on.</div>

<div class="standard" id='magicparlabel-37942'>Without such syntax, we need to create a 20-byte array e.g. <span style='font-family:monospace;'>names[20]</span>, and whenever we want to access a character e.g. to check if the names contains with a number in it, we need to calculate the index manually. It would be distracting, since we constantly need to switch thinkings between the actual problem and the translate problem. </div>

<div class="standard" id='magicparlabel-37943'>Since this is a repeating pattern, C abstracts away this problem with the syntax for define and manipulating multi-dimensional array. Through this example, we can clearly see the power of abstraction through language can give us. It would be ideal if a programmer is equipped with such power to define whatever syntax suitable for a problem at hands. Not many languages provide such capacity. Fortunately, through C macro, we can partially achieve that goal .</div>
</div>
<div class="standard" id='magicparlabel-37944'>In all cases, an array is guaranteed to generate contiguous bytes of memory, regardless of the dimensions it has.</div>

<div class="exercise" id='magicparlabel-37945'><div class="exercise_item"><span class="exercise_label">Exercise 0.6.</span>
What is the difference between a multi-dimensional array and an array of pointers, or even pointers of pointers?</div>
</div>
<div class="section" id='magicparlabel-37946'>Examine compiled code</div>
<div class="standard" id='magicparlabel-37947'>This section will explore how compiler transform high level code into assembly code that CPU can execute, and see how common assembly patterns help to create higher level syntax. <span style='font-family:monospace;'>-S </span>option is added to <span style='font-family:monospace;'>objdump</span> to better demonstrate the connection between high and low level code.</div>

<div class="standard" id='magicparlabel-37948'>In this section, the option <span style='font-family:monospace;'>--no-show-raw-insn</span> is added to objdump command to omit the opcodes for clarity:</div>



<div class="standard" id='magicparlabel-37954'><span style='font-family:monospace;'>$ objdump --no-show-raw-insn -M intel -S -D &lt;object file&gt; | less </span></div>


<div class="subsection" id='magicparlabel-37960'>Data Transfer</div>
<div class="standard" id='magicparlabel-37961'>Previous section explores how various types of data are created, and how they are laid out in memory. Once memory storages are allocated for variables, they must be accessible and writable. Data transfer instructions move data (bytes, words, doublewords or quadwords) between memory and registers, and between registers, effectively read from a storage source and write to another storage source.</div>

<dl class='description' id='magicparlabel-37962'><dt class="description_label">Source
<br />

</dt>
<dd class="description_item">

<div class='float-listings'><pre class ='listings C'>#include &lt;stdint.h&gt;

int32_t i = 0x12345678;

int main(int argc, char *argv[]) {
        int j = i;
        int k = 0xabcdef;

        return 0;
}</pre></div>

</dd><dt class="description_label">Assembly
<br />

</dt>
<dd class="description_item">

<div class="lyx_code" id='magicparlabel-37978'><div class="lyx_code_item">080483db &lt;main&gt;:</div>
<div class="lyx_code_item">#include &lt;stdint.h&gt;</div>
<div class="lyx_code_item">int32_t i = 0x12345678;</div>
<div class="lyx_code_item">int main(int argc, char *argv[]) {</div>
<div class="lyx_code_item"> 80483db:       push   ebp</div>
<div class="lyx_code_item"> 80483dc:       mov    ebp,esp</div>
<div class="lyx_code_item"> 80483de:       sub    esp,0x10</div>
<div class="lyx_code_item">        int j = i;</div>
<div class="lyx_code_item"> 80483e1:       mov    eax,ds:0x804a018</div>
<div class="lyx_code_item"> 80483e6:       mov    DWORD PTR [ebp-0x8],eax</div>
<div class="lyx_code_item">        int k = 0xabcdef;</div>
<div class="lyx_code_item"> 80483e9:       mov    DWORD PTR [ebp-0x4],0xabcdef</div>
<div class="lyx_code_item">        return 0;</div>
<div class="lyx_code_item"> 80483f0:       mov    eax,0x0</div>
<div class="lyx_code_item">}</div>
<div class="lyx_code_item"> 80483f5:       leave  </div>
<div class="lyx_code_item"> 80483f6:       ret    </div>
<div class="lyx_code_item"> 80483f7:       xchg   ax,ax</div>
<div class="lyx_code_item"> 80483f9:       xchg   ax,ax</div>
<div class="lyx_code_item"> 80483fb:       xchg   ax,ax</div>
<div class="lyx_code_item"> 80483fd:       xchg   ax,ax</div>
<div class="lyx_code_item"> 80483ff:       nop</div>
</div>
</dd></dl>
<div class="standard" id='magicparlabel-38000'>The general data movement is performed with the <span style='font-family:monospace;'>mov</span> instruction. Note that despite the instruction being called <span style='font-family:monospace;'>mov</span>, it actually copies data from one destination to another.</div>

<div class="standard" id='magicparlabel-38001'>The red instruction copies data from the register <span style='font-family:monospace;'>esp</span> to the register <span style='font-family:monospace;'>ebp</span>. This <span style='font-family:monospace;'>mov</span> instruction moves data between registers and is assigned the opcode <span style='font-family:monospace;'>89</span>.</div>

<div class="standard" id='magicparlabel-38002'>The blue instructions copies data from one memory location (the <span style='font-family:monospace;'>i</span> variable) to another (the <span style='font-family:monospace;'>j</span> variable). There exists no data movement from memory to memory; it requires two <span style='font-family:monospace;'>mov</span> instructions, one for copying the data from a memory location to a register, and one for copying the data from the register to the destination memory location.</div>

<div class="standard" id='magicparlabel-38003'>The pink instruction copies an immediate value into memory. Finally, the green instruction copies immediate data into a register.</div>
<div class="subsection" id='magicparlabel-38004'>Expressions</div>

<dl class='description' id='magicparlabel-38005'><dt class="description_label">Source
<br />

</dt>
<dd class="description_item">

<div class='float-listings'><pre class ='listings C'>int expr(int i, int j)
{
    int add            = i + j;
    int sub            = i - j;
    int mul            = i * j;
    int div            = i / j;
    int mod            = i % j;
    int neg            = -i;
    int and            = i &amp; j;
    int or             = i | j;
    int xor            = i ^ j;
    int not            = ~i;
    int shl            = i &lt;&lt; 8;
    int shr            = i &gt;&gt; 8;
    char equal1        = (i == j);
    int equal2         = (i == j);
    char greater       = (i &gt; j);
    char less          = (i &lt; j);
    char greater_equal = (i &gt;= j);
    char less_equal    = (i &lt;= j);
    int logical_and    = i &amp;&amp; j;
    int logical_or     = i || j;
    ++i;
    --i;
    int i1             = i++;
    int i2             = ++i;
    int i3             = i--;
    int i4             = --i;

    return 0;
}

int main(int argc, char *argv[]) {
    return 0;
}</pre></div>

</dd><dt class="description_label">Assembly
<br />

</dt>
<dd class="description_item">
<div class="standard" id='magicparlabel-38046'>The full assembly listing is really long. For that reason, we examine expression by expression.</div>

<dl class='description' id='magicparlabel-38047'><dt class="description_label">Expression:</dt>
<dd class="description_item"> <span style='font-family:monospace;'>int add = i + j;</span>
<br />



<div class="lyx_code" id='magicparlabel-38048'><div class="lyx_code_item"> 80483e1:       mov    edx,DWORD PTR [ebp+0x8]</div>
<div class="lyx_code_item"> 80483e4:       mov    eax,DWORD PTR [ebp+0xc]</div>
<div class="lyx_code_item"> 80483e7:       add    eax,edx</div>
<div class="lyx_code_item"> 80483e9:       mov    DWORD PTR [ebp-0x34],eax</div>
</div>
<div class="standard" id='magicparlabel-38052'>The assembly code is straight forward: variable <span style='font-family:monospace;'>i</span> and <span style='font-family:monospace;'>j</span> are stored in <span style='font-family:monospace;'>eax</span> and <span style='font-family:monospace;'>edx</span> respectively, then added together with the <span style='font-family:monospace;'>add</span> instruction, and the final result is stored into <span style='font-family:monospace;'>eax</span>. Then, the result is saved into the local variable <span style='font-family:monospace;'>add</span>, which is at the location <span style='font-family:monospace;'>[ebp-0x34]</span>.</div>
</dd><dt class="description_label">Expression:</dt>
<dd class="description_item"> <span style='font-family:monospace;'>int sub = i - j;</span>
<br />



<div class="lyx_code" id='magicparlabel-38054'><div class="lyx_code_item">80483ec:       mov    eax,DWORD PTR [ebp+0x8]</div>
<div class="lyx_code_item">80483ef:       sub    eax,DWORD PTR [ebp+0xc]</div>
<div class="lyx_code_item">80483f2:       mov    DWORD PTR [ebp-0x30],eax</div>
</div>
<div class="standard" id='magicparlabel-38057'>Similar to <span style='font-family:monospace;'>add</span> instruction, x86 provides a <span style='font-family:monospace;'>sub</span> instruction for subtraction. Hence, <span style='font-family:monospace;'>gcc</span> translates a subtraction into <span style='font-family:monospace;'>sub</span> instruction, with <span style='font-family:monospace;'>eax</span> is reloaded with <span style='font-family:monospace;'>i</span>, as <span style='font-family:monospace;'>eax</span> still carries the result from previous expression. Then, <span style='font-family:monospace;'>j</span> is subtracted from <span style='font-family:monospace;'>i</span>. After the subtraction, the value is saved into the variable <span style='font-family:monospace;'>sub</span>, at location <span style='font-family:monospace;'>[ebp-0x30]</span>.</div>
</dd><dt class="description_label">Expression:</dt>
<dd class="description_item"> <span style='font-family:monospace;'>int mul = i * j;</span>
<br />



<div class="lyx_code" id='magicparlabel-38059'><div class="lyx_code_item">80483f5:       mov    eax,DWORD PTR [ebp+0x8]</div>
<div class="lyx_code_item">80483f8:       imul   eax,DWORD PTR [ebp+0xc]</div>
<div class="lyx_code_item">80483fc:       mov    DWORD PTR [ebp-0x34],eax</div>
</div>
<div class="standard" id='magicparlabel-38062'>Similar to <span style='font-family:monospace;'>sub</span> instruction, only <span style='font-family:monospace;'>eax</span> is reloaded, since it carries the result of previous calculation. <span style='font-family:monospace;'>imul</span> performs signed multiply<div class="foot"><span class="foot_label">22</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-38066'>Unsigned multiply is perform by <span style='font-family:monospace;'>mul</span> instruction.</div>
</div></div>. <span style='font-family:monospace;'>eax</span> is first loaded with <span style='font-family:monospace;'>i</span>, then is multiplied with <span style='font-family:monospace;'>j</span> and stored the result back into <span style='font-family:monospace;'>eax</span>, then stored into the variable <span style='font-family:monospace;'>mul</span> at location <span style='font-family:monospace;'>[ebp-0x34]</span>.</div>
</dd><dt class="description_label">Expression:</dt>
<dd class="description_item"> <span style='font-family:monospace;'>int div = i / j;</span>
<br />



<div class="lyx_code" id='magicparlabel-38068'><div class="lyx_code_item">80483ff:       mov    eax,DWORD PTR [ebp+0x8]</div>
<div class="lyx_code_item">8048402:       cdq    </div>
<div class="lyx_code_item">8048403:       idiv   DWORD PTR [ebp+0xc]</div>
<div class="lyx_code_item">8048406:       mov    DWORD PTR [ebp-0x30],eax</div>
</div>
<div class="standard" id='magicparlabel-38072'>Similar to <span style='font-family:monospace;'>imul</span>, <span style='font-family:monospace;'>idiv</span> performs sign divide. But, different from <span style='font-family:monospace;'>imul</span> above <span style='font-family:monospace;'>idiv</span> only takes one operand:</div>

<ol class="enumerate" id='magicparlabel-38073'><li class="enumerate_item">First, <span style='font-family:monospace;'>i</span> is reloaded into <span style='font-family:monospace;'>eax</span>. </li>
<li class="enumerate_item">Then, <span style='font-family:monospace;'>cdq</span> converts the double word value in <span style='font-family:monospace;'>eax</span> into a quadword value stored in the pair of registers <span style='font-family:monospace;'>edx:eax</span>, by copying the signed (bit 31<sup class="script_superscript">th</sup>) of the value in <span style='font-family:monospace;'>eax</span> into every bit position in <span style='font-family:monospace;'>edx</span>. The pair <span style='font-family:monospace;'>edx:eax</span> is the dividend, which is the variable i, and the operand to <span style='font-family:monospace;'>idiv</span> is the divisor, which is the variable <span style='font-family:monospace;'>j</span>. </li>
<li class="enumerate_item">After the calculation, the result is stored into the pair <span style='font-family:monospace;'>edx:eax</span> registers, with the quotient in <span style='font-family:monospace;'>eax</span> and remainder in <span style='font-family:monospace;'>edx</span>. The quotient is stored in the variable <span style='font-family:monospace;'>div</span>, at location <span style='font-family:monospace;'>[ebp-0x30]</span>.</li>
</ol>
</dd><dt class="description_label">Expression:</dt>
<dd class="description_item"> <span style='font-family:monospace;'>int mod = i % j;</span>
<br />



<div class="lyx_code" id='magicparlabel-38081'><div class="lyx_code_item">8048409:       mov    eax,DWORD PTR [ebp+0x8]</div>
<div class="lyx_code_item">804840c:       cdq    </div>
<div class="lyx_code_item">804840d:       idiv   DWORD PTR [ebp+0xc]</div>
<div class="lyx_code_item">8048410:       mov    DWORD PTR [ebp-0x2c],edx</div>
</div>
<div class="standard" id='magicparlabel-38085'>The same <span style='font-family:monospace;'>idiv</span> instruction also performs the modulo operation, since it also calculates a remainder and stores in the variable <span style='font-family:monospace;'>mod</span>, at location <span style='font-family:monospace;'>[ebp-0x2c]</span>.</div>
</dd><dt class="description_label">Expression:</dt>
<dd class="description_item"> <span style='font-family:monospace;'>int neg = -i;</span>
<br />



<div class="lyx_code" id='magicparlabel-38087'><div class="lyx_code_item">8048413:       mov    eax,DWORD PTR [ebp+0x8] </div>
<div class="lyx_code_item">8048416:       neg    eax                     </div>
<div class="lyx_code_item">8048418:       mov    DWORD PTR [ebp-0x28],eax</div>
</div>
<div class="standard" id='magicparlabel-38090'><span style='font-family:monospace;'>neg</span> replaces the value of operand (the destination operand) with its two's complement (this operation is equivalent to subtracting the operand from 0). In this example, the value <span style='font-family:monospace;'>i</span> in <span style='font-family:monospace;'>eax</span> is replaced replaced with <span style='font-family:monospace;'>-i </span>using <span style='font-family:monospace;'>neg</span> instruction. Then, the new value is stored in the variable neg at <span style='font-family:monospace;'>[ebp-0x28]</span>.</div>
</dd><dt class="description_label">Expression:</dt>
<dd class="description_item"> <span style='font-family:monospace;'>int and = i &amp; j;</span>
<br />



<div class="lyx_code" id='magicparlabel-38092'><div class="lyx_code_item">804841b:        mov    eax,DWORD PTR [ebp+0x8] </div>
<div class="lyx_code_item">804841e:        and    eax,DWORD PTR [ebp+0xc] </div>
<div class="lyx_code_item">8048421:        mov    DWORD PTR [ebp-0x24],eax</div>
</div>
<div class="standard" id='magicparlabel-38095'><span style='font-family:monospace;'>and</span> performs a bitwise <span style='font-family:monospace;'>AND</span> operation on two operands, and stores the result in the destination operand, which is the variable <span style='font-family:monospace;'>and</span> at <span style='font-family:monospace;'>[ebp-0x24]</span>.</div>
</dd><dt class="description_label">Expression:</dt>
<dd class="description_item"> <span style='font-family:monospace;'>int or = i | j;</span>
<br />



<div class="lyx_code" id='magicparlabel-38097'><div class="lyx_code_item">8048424:       mov    eax,DWORD PTR [ebp+0x8] </div>
<div class="lyx_code_item">8048427:       or     eax,DWORD PTR [ebp+0xc] </div>
<div class="lyx_code_item">804842a:       mov    DWORD PTR [ebp-0x20],eax</div>
</div>
<div class="standard" id='magicparlabel-38100'>Similar to<span style='font-family:monospace;'> and </span>instruction,<span style='font-family:monospace;'> or</span> performs a bitwise <span style='font-family:monospace;'>OR</span> operation on two operands, and stores the result in the destination operand, which is the variable <span style='font-family:monospace;'>or</span> at <span style='font-family:monospace;'>[ebp-0x20]</span> in this case.</div>
</dd><dt class="description_label">Expression:</dt>
<dd class="description_item"> <span style='font-family:monospace;'>int xor = i ^ j;</span>
<br />



<div class="lyx_code" id='magicparlabel-38102'><div class="lyx_code_item">804842d:       mov    eax,DWORD PTR [ebp+0x8] </div>
<div class="lyx_code_item">8048430:       xor    eax,DWORD PTR [ebp+0xc] </div>
<div class="lyx_code_item">8048433:       mov    DWORD PTR [ebp-0x1c],eax</div>
</div>
<div class="standard" id='magicparlabel-38105'>Similar to<span style='font-family:monospace;'> and/or </span>instruction,<span style='font-family:monospace;'> xor</span> performs a bitwise <span style='font-family:monospace;'>XOR</span> operation on two operands, and stores the result in the destination operand, which is the variable <span style='font-family:monospace;'>xor</span> at <span style='font-family:monospace;'>[ebp-0x1c]</span>.</div>
</dd><dt class="description_label">Expression:</dt>
<dd class="description_item"> <span style='font-family:monospace;'>int not = ~i;</span>
<br />



<div class="lyx_code" id='magicparlabel-38107'><div class="lyx_code_item">8048436:       mov    eax,DWORD PTR [ebp+0x8] </div>
<div class="lyx_code_item">8048439:       not    eax                     </div>
<div class="lyx_code_item">804843b:       mov    DWORD PTR [ebp-0x18],eax</div>
</div>
<div class="standard" id='magicparlabel-38110'><span style='font-family:monospace;'>not</span> performs a bitwise <span style='font-family:monospace;'>NOT</span> operation (each 1 is set to 0, and each 0 is set to 1) on the destination operand and stores the result in the destination operand location, which is the variable <span style='font-family:monospace;'>not</span> at <span style='font-family:monospace;'>[ebp-0x18]</span>. </div>
</dd><dt class="description_label">Expression:</dt>
<dd class="description_item"> <span style='font-family:monospace;'>int shl = i &lt;&lt; 8;</span>
<br />



<div class="lyx_code" id='magicparlabel-38112'><div class="lyx_code_item">804843e:       mov    eax,DWORD PTR [ebp+0x8]</div>
<div class="lyx_code_item">8048441:	   shl    eax,0x8</div>
<div class="lyx_code_item">8048444:	   mov    DWORD PTR [ebp-0x14],eax</div>
</div>
<div class="standard" id='magicparlabel-38115'><span style='font-family:monospace;'>shl</span> (shift logical left) shifts the bits in the destination operand to the left by the number of bits specified in the source operand. In this case, <span style='font-family:monospace;'>eax</span> stores i and <span style='font-family:monospace;'>shl</span> shifts <span style='font-family:monospace;'>eax</span> by 8 bits to the left. A different name for <span style='font-family:monospace;'>shl</span> is <span style='font-family:monospace;'>sal</span> <em>(</em>shift arithmetic left). Both can be used synonymous. Finally, the result is stored in the variable <span style='font-family:monospace;'>shl</span> at <span style='font-family:monospace;'>[ebp-0x14]</span>.</div>

<div class="standard" id='magicparlabel-38116'>Here is a visual demonstration of <span style='font-family:monospace;'>shl</span>/<span style='font-family:monospace;'>sal </span>and <span style='font-family:monospace;'>shr</span> instructions:</div>



<div class="standard" id='magicparlabel-38129'>After shifting to the left, the right most bit is set for Carry Flag in <span style='font-family:monospace;'>EFLAGS</span> register.</div>
</dd><dt class="description_label">Expression:</dt>
<dd class="description_item"> <span style='font-family:monospace;'>int shr = i &gt;&gt; 8;</span>
<br />



<div class="lyx_code" id='magicparlabel-38131'><div class="lyx_code_item">8048447:       mov    eax,DWORD PTR [ebp+0x8]</div>
<div class="lyx_code_item">804844a:   	sar    eax,0x8</div>
<div class="lyx_code_item">804844d:   	mov    DWORD PTR [ebp-0x10],eax</div>
</div>
<div class="standard" id='magicparlabel-38134'><span style='font-family:monospace;'>sar</span> is similar to <span style='font-family:monospace;'>shl/sal</span>, but shift bits to the right and extends the sign bit. For right shift, <span style='font-family:monospace;'>shr</span> and <span style='font-family:monospace;'>sar</span> are two different instructions. <span style='font-family:monospace;'>shr</span> differs to <span style='font-family:monospace;'>sar </span>is that it does not extend the sign bit. Finally, the result is stored in the variable <span style='font-family:monospace;'>shr</span> at <span style='font-family:monospace;'>[ebp-0x10]</span>.</div>

<div class="standard" id='magicparlabel-38135'>In the figure (b), notice that initially, the sign bit is 1, but after 1-bit and 10-bit shiftings, the shifted-out bits are filled with zeros.</div>


<div class='float-figure'><div class="plain_layout" id='magicparlabel-38144'><span class='float-caption-Standard float-caption float-caption-standard'>Figure 0.14:  SAR Instruction Operation (Source: Figure 7-8, Volume 1)</span></div>

<div class="plain_layout" id='magicparlabel-38149'><img style='width:55%;' src='25_img_04_sar.png' alt='image: 25_img_04_sar.png' />
</div>
</div>


<div class="standard" id='magicparlabel-38150'>With <span style='font-family:monospace;'>sar</span>, the sign bit (the most significant bit) is preserved. That is, if the sign bit is 0, the new bits always get the value 0; if the sign bit is 1, the new bits always get the value 1.</div>
</dd><dt class="description_label">Expression:</dt>
<dd class="description_item"> <span style='font-family:monospace;'>char equal1 = (i == j);</span>
<br />



<div class="lyx_code" id='magicparlabel-38152'><div class="lyx_code_item">8048450:       mov    eax,DWORD PTR [ebp+0x8]</div>
<div class="lyx_code_item">8048453:       cmp    eax,DWORD PTR [ebp+0xc]</div>
<div class="lyx_code_item">8048456:       sete   al                     </div>
<div class="lyx_code_item">8048459:       mov    BYTE PTR [ebp-0x41],al</div>
</div>
<div class="standard" id='magicparlabel-38156'><span style='font-family:monospace;'>cmp</span> and variants of the variants of <span style='font-family:monospace;'>set</span> instructions make up all the logical comparisons. In this expression, <span style='font-family:monospace;'>cmp</span> compares variable <span style='font-family:monospace;'>i</span> and <span style='font-family:monospace;'>j</span>; then <span style='font-family:monospace;'>sete</span> stores the value 1 to <span style='font-family:monospace;'>al</span> register if the comparison from <span style='font-family:monospace;'>cmp</span> earlier is equal, or stores 0 otherwise. The general name for variants of <span style='font-family:monospace;'>set</span> instruction is called <span style='font-family:monospace;'>SETcc</span>. The suffix <span style='font-family:monospace;'>cc</span> denotes the condition being tested for in <span style='font-family:monospace;'>EFLAGS</span> register. Appendix B in volume 1, <em>“EFLAGS Condition Codes”</em>, lists the conditions it is possible to test for with this instruction. Finally, the result is stored in the variable <span style='font-family:monospace;'>equal1</span> at <span style='font-family:monospace;'>[ebp-0x41]</span>.</div>
</dd><dt class="description_label">Expression:</dt>
<dd class="description_item"> <span style='font-family:monospace;'>int equal2 = (i == j);</span>
<br />



<div class="lyx_code" id='magicparlabel-38158'><div class="lyx_code_item">804845c:       mov    eax,DWORD PTR [ebp+0x8]</div>
<div class="lyx_code_item">804845f:       cmp    eax,DWORD PTR [ebp+0xc]</div>
<div class="lyx_code_item">8048462:       sete   al</div>
<div class="lyx_code_item">8048465:       movzx  eax,al</div>
<div class="lyx_code_item">8048468:       mov    DWORD PTR [ebp-0xc],eax</div>
</div>
<div class="standard" id='magicparlabel-38163'>Similar to equality comparison, this expression also compares for equality, with an exception that the result is stored in an int type. For that reason, one more instruction is a added: <span style='font-family:monospace;'>movzx</span> instruction, a variant of <span style='font-family:monospace;'>mov</span> that copies the result into a destination operand and fills the remaining bytes with 0. In this case, since <span style='font-family:monospace;'>eax </span>is 4-byte wide, after copying the first byte in <span style='font-family:monospace;'>al</span>, the remaining bytes of <span style='font-family:monospace;'>eax</span> are filled with 0 to ensure the <span style='font-family:monospace;'>eax</span> carries the same value as <span style='font-family:monospace;'>al</span>.</div>


<div class='float-figure'><div class="plain_layout" id='magicparlabel-38168'><span class='float-caption-Standard float-caption float-caption-standard'>Figure 0.15:  <span style='font-family:monospace;'>movzx</span> instruction</span></div>
<div class='float-figure'><div class="plain_layout" id='magicparlabel-38176'><span class='float-caption-Standard float-caption float-caption-standard'>Sub-Figure a:  <span style='font-family:monospace;'>eax</span> before <span style='font-family:monospace;'>movzx</span></span></div>



<div class="plain_layout" id='magicparlabel-38181'><span style='font-family:monospace;'><table><tbody><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38196'><span style='font-family:monospace;'>12</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38199'><span style='font-family:monospace;'>34</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38202'><span style='font-family:monospace;'>56</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38205'><span style='font-family:monospace;'>78</span></div>
</td>
</tr></tbody>
</table>
</span></div>
</div>
<div class='float-figure'><div class="plain_layout" id='magicparlabel-38209'><span class='float-caption-Standard float-caption float-caption-standard'>Sub-Figure b:  after <span style='font-family:monospace;'>movzx eax, al</span></span></div>



<div class="plain_layout" id='magicparlabel-38214'><table><tbody><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38229'><span style='font-family:monospace;'>00</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38232'><span style='font-family:monospace;'>00</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38235'><span style='font-family:monospace;'>00</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38238'><span style='font-family:monospace;'>78</span></div>
</td>
</tr></tbody>
</table>
</div>
</div>

</div>

</dd><dt class="description_label">Expression:</dt>
<dd class="description_item"> <span style='font-family:monospace;'>char greater = (i &gt; j);</span>
<br />



<div class="lyx_code" id='magicparlabel-38240'><div class="lyx_code_item">804846b:       mov    eax,DWORD PTR [ebp+0x8]</div>
<div class="lyx_code_item">804846e:       cmp    eax,DWORD PTR [ebp+0xc]</div>
<div class="lyx_code_item">8048471:       setg   al                     </div>
<div class="lyx_code_item">8048474:       mov    BYTE PTR [ebp-0x40],al </div>
</div>
<div class="standard" id='magicparlabel-38244'>Similar to equality comparison, but used <span style='font-family:monospace;'>setg</span> for <b>g</b>reater comparison instead.</div>
</dd><dt class="description_label">Expression:</dt>
<dd class="description_item"> <span style='font-family:monospace;'>char less = (i &lt; j);</span>
<br />



<div class="lyx_code" id='magicparlabel-38246'><div class="lyx_code_item">8048477:       mov    eax,DWORD PTR [ebp+0x8]</div>
<div class="lyx_code_item">804847a:       cmp    eax,DWORD PTR [ebp+0xc]</div>
<div class="lyx_code_item">804847d:       setl   al                     </div>
<div class="lyx_code_item">8048480:       mov    BYTE PTR [ebp-0x3f],al </div>
</div>
<div class="standard" id='magicparlabel-38250'>Applied<span style='font-family:monospace;'> setl</span> for<b> l</b>ess comparison.</div>
</dd><dt class="description_label">Expression:</dt>
<dd class="description_item"> <span style='font-family:monospace;'>char greater_equal = (i &gt;= j);</span>
<br />



<div class="lyx_code" id='magicparlabel-38252'><div class="lyx_code_item">8048483:       mov    eax,DWORD PTR [ebp+0x8]</div>
<div class="lyx_code_item">8048486:       cmp    eax,DWORD PTR [ebp+0xc]</div>
<div class="lyx_code_item">8048489:       setge  al                     </div>
<div class="lyx_code_item">804848c:       mov    BYTE PTR [ebp-0x3e],al </div>
</div>
<div class="standard" id='magicparlabel-38256'>Applied <span style='font-family:monospace;'>setge</span> for <b>g</b>reater or <b>e</b>qual comparison.</div>
</dd><dt class="description_label">Expression:</dt>
<dd class="description_item"> <span style='font-family:monospace;'>char less_equal = (i &lt;= j);</span>
<br />



<div class="lyx_code" id='magicparlabel-38258'><div class="lyx_code_item">804848f:       mov    eax,DWORD PTR [ebp+0x8]</div>
<div class="lyx_code_item">8048492:       cmp    eax,DWORD PTR [ebp+0xc]</div>
<div class="lyx_code_item">8048495:       setle  al</div>
<div class="lyx_code_item">8048498:       mov    BYTE PTR [ebp-0x3d],al</div>
</div>
<div class="standard" id='magicparlabel-38262'>Applied <span style='font-family:monospace;'>setle</span> for <b>l</b>ess than or <b>e</b>qual comparison.</div>
</dd><dt class="description_label">Expression:</dt>
<dd class="description_item"> <span style='font-family:monospace;'>int logical_and = (i &amp;&amp; j);</span>
<br />



<div class="lyx_code" id='magicparlabel-38264'><div class="lyx_code_item">804849b:       cmp    DWORD PTR [ebp+0x8],0x0</div>
<div class="lyx_code_item">804849f:       je     80484ae &lt;expr+0xd3&gt;    </div>
<div class="lyx_code_item">80484a1:       cmp    DWORD PTR [ebp+0xc],0x0</div>
<div class="lyx_code_item">80484a5:       je     80484ae &lt;expr+0xd3&gt;    </div>
<div class="lyx_code_item">80484a7:       mov    eax,0x1                </div>
<div class="lyx_code_item">80484ac:       jmp    80484b3 &lt;expr+0xd8&gt;    </div>
<div class="lyx_code_item">80484ae:       mov    eax,0x0                </div>
<div class="lyx_code_item">80484b3:       mov    DWORD PTR [ebp-0x8],eax</div>
</div>
<div class="standard" id='magicparlabel-38272'>Logical <span style='font-family:monospace;'>AND</span> operator <span style='font-family:monospace;'>&amp;&amp;</span> is one of the syntaxes that is made entirely in software<div class="foot"><span class="foot_label">23</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-38276'>That is, there is no equivalent assembly instruction implemented in hardware.</div>
</div></div> with simpler instructions. The algorithm from the assembly code is simple:</div>

<ol class="enumerate" id='magicparlabel-38277'><li class="enumerate_item">First, check if <span style='font-family:monospace;'>i</span> is <span style='font-family:monospace;'>0</span> with the instruction at <span style='font-family:monospace;'>0x804849b</span>. 
<br />



<ol class="enumerate" id='magicparlabel-38278'><li class="enumerate_item">If true, jump to <span style='font-family:monospace;'>0x80484ae </span>and set eax to 0. </li>
<li class="enumerate_item">Set the variable <span style='font-family:monospace;'>logical</span>_and to 0, as it is the next instruction after <span style='font-family:monospace;'>0x80484ae</span>.</li>
</ol>
</li><li class="enumerate_item">If <span style='font-family:monospace;'>i</span> is not <span style='font-family:monospace;'>0</span>, check if <span style='font-family:monospace;'>j</span> is <span style='font-family:monospace;'>0</span> with the instruction at <span style='font-family:monospace;'>0x80484a1</span>. 
<br />



<ol class="enumerate" id='magicparlabel-38281'><li class="enumerate_item">If true, jump to <span style='font-family:monospace;'>0x80484ae </span>and set eax to 0.</li>
<li class="enumerate_item">Set the variable <span style='font-family:monospace;'>logical</span>_and to 0, as it is the next instruction after <span style='font-family:monospace;'>0x80484ae</span>.</li>
</ol>
</li><li class="enumerate_item">If both <span style='font-family:monospace;'>i</span> and <span style='font-family:monospace;'>j</span> are not <span style='font-family:monospace;'>0</span>, the result is certainly <span style='font-family:monospace;'>1</span>, or <span style='font-family:monospace;'>true</span>.
<br />



<ol class="enumerate" id='magicparlabel-38284'><li class="enumerate_item">Set it accordingly with the instruction at <span style='font-family:monospace;'>0x80484a7</span>. </li>
<li class="enumerate_item">Then jump to the instruction at <span style='font-family:monospace;'>0x80484b3</span> to set the variable <span style='font-family:monospace;'>logical_and</span> at <span style='font-family:monospace;'>[ebp-0x8]</span> to 1.</li>
</ol>
</li></ol>
</dd><dt class="description_label">Expression:</dt>
<dd class="description_item"> <span style='font-family:monospace;'>int logical_or = (i || j);</span>
<br />



<div class="lyx_code" id='magicparlabel-38287'><div class="lyx_code_item">80484b6:       cmp    DWORD PTR [ebp+0x8],0x0</div>
<div class="lyx_code_item">80484ba:       jne    80484c2 &lt;expr+0xe7&gt;    </div>
<div class="lyx_code_item">80484bc:       cmp    DWORD PTR [ebp+0xc],0x0</div>
<div class="lyx_code_item">80484c0:       je     80484c9 &lt;expr+0xee&gt;    </div>
<div class="lyx_code_item">80484c2:       mov    eax,0x1                </div>
<div class="lyx_code_item">80484c7:       jmp    80484ce &lt;expr+0xf3&gt;    </div>
<div class="lyx_code_item">80484c9:       mov    eax,0x0                </div>
<div class="lyx_code_item">80484ce:       mov    DWORD PTR [ebp-0x4],eax</div>
</div>
<div class="standard" id='magicparlabel-38295'>Logical <span style='font-family:monospace;'>OR</span> operator<span style='font-family:monospace;'> ||</span> is similar to logical and above. Understand the algorithm is left as an exercise for readers.</div>
</dd><dt class="description_label">Expression:</dt>
<dd class="description_item"> <span style='font-family:monospace;'>++i; </span>and<span style='font-family:monospace;'> --i; </span>(or <span style='font-family:monospace;'>i++</span> and <span style='font-family:monospace;'>i--</span>)
<br />



<div class="lyx_code" id='magicparlabel-38297'><div class="lyx_code_item">80484d1:       add    DWORD PTR [ebp+0x8],0x1</div>
<div class="lyx_code_item">80484d5:       sub    DWORD PTR [ebp+0x8],0x1</div>
</div>
<div class="standard" id='magicparlabel-38299'>The syntax of increment and decrement is similar to logical <span style='font-family:monospace;'>AND</span> and logical <span style='font-family:monospace;'>OR</span> in that it is made from existing instruction, that is <span style='font-family:monospace;'>add</span>. The difference is that the CPU actually does has a built-in instruction, but <span style='font-family:monospace;'>gcc</span> decided not to use the instruction because <span style='font-family:monospace;'>inc</span> and <span style='font-family:monospace;'>dec</span> cause a <em>partial flag register stall</em>, occurs when an instruction modifies a part of the flag register and the following instruction is dependent on the outcome of the flags (<em>section 3.5.2.6</em>, <a href='#LyXCite-intel_opt_manual'><span class="bib-abbrvciteauthor">Intel</span> <span class="bib-textbefore">Optimization Manual,</span> <span class="bib-year">2016</span></a>). The manual even suggests that <span style='font-family:monospace;'>inc</span> and <span style='font-family:monospace;'>dec</span> should be replaced with <span style='font-family:monospace;'>add</span> and <span style='font-family:monospace;'>sub</span> instructions (section <em>3.5.1.1</em>, <a href='#LyXCite-intel_opt_manual'><span class="bib-abbrvciteauthor">Intel</span> <span class="bib-textbefore">Optimization Manual,</span> <span class="bib-year">2016</span></a>). </div>
</dd><dt class="description_label">Expression:</dt>
<dd class="description_item"> <span style='font-family:monospace;'>int i1 = i++;</span>
<br />



<div class="lyx_code" id='magicparlabel-38301'><div class="lyx_code_item">80484d9:       mov    eax,DWORD PTR [ebp+0x8]</div>
<div class="lyx_code_item">80484dc:       lea    edx,[eax+0x1]</div>
<div class="lyx_code_item">80484df:       mov    DWORD PTR [ebp+0x8],edx</div>
<div class="lyx_code_item">80484e2:       mov    DWORD PTR [ebp-0x10],eax</div>
</div>
<div class="standard" id='magicparlabel-38305'>First, <span style='font-family:monospace;'>i</span> is copied into <span style='font-family:monospace;'>eax</span> at <span style='font-family:monospace;'>80484d9</span>. Then, the value of <span style='font-family:monospace;'>eax + 0x1</span> is copied into <span style='font-family:monospace;'>edx</span> as an <em>effective address</em> at <span style='font-family:monospace;'>80484dc</span>. The <span style='font-family:monospace;'>lea</span> (<em>load effective address</em>) instruction copies a memory address into a register. According to Volume 2, the source operand is a memory address specified with one of the processors addressing modes. This means, the source operand must be specified by the addressing modes defined in 16-bit/32-bit ModR/M Byte tables, <a href="#mod_rm_16">3.</a> and <a href="#mod_rm_32">3.</a>.</div>

<div class="standard" id='magicparlabel-38306'>After loading the incremented value into <span style='font-family:monospace;'>edx</span>, the value of <span style='font-family:monospace;'>i</span> is increased by 1 at <span style='font-family:monospace;'>80484df</span>. Finally, the <em>previous</em> <span style='font-family:monospace;'>i</span> value is stored back to <span style='font-family:monospace;'>i1</span> at <span style='font-family:monospace;'>[ebp-0x8]</span> by the instruction at <span style='font-family:monospace;'>80484e2</span>.</div>
</dd><dt class="description_label">Expression:</dt>
<dd class="description_item"> <span style='font-family:monospace;'>int i2 = ++i;</span>
<br />



<div class="lyx_code" id='magicparlabel-38308'><div class="lyx_code_item">80484e5:       add    DWORD PTR [ebp+0x8],0x1</div>
<div class="lyx_code_item">80484e9:       mov    eax,DWORD PTR [ebp+0x8]</div>
<div class="lyx_code_item">80484ec:       mov    DWORD PTR [ebp-0xc],eax</div>
</div>
<div class="standard" id='magicparlabel-38311'>The primary differences between this increment syntax and the previous one are:</div>

<ul class="itemize" id='magicparlabel-38312'><li class="itemize_item"><span style='font-family:monospace;'>add</span> is used instead of <span style='font-family:monospace;'>lea </span>to increase <span style='font-family:monospace;'>i</span> directly.</li>
<li class="itemize_item">the newly incremented <span style='font-family:monospace;'>i</span> is stored into <span style='font-family:monospace;'>i2</span> instead of the old value.</li>
<li class="itemize_item">the expression only costs 3 instructions instead of 4.</li>
</ul>
<div class="standard" id='magicparlabel-38315'>This prefix-increment syntax is faster than the post-fix one used previously. It might not matter much which version to use if the increment is only used once or a few hundred times in a small loop, but it matters when a loop runs millions or more times. Also, depends on different circumstances, it is more convenient to use one over the other e.g. if <span style='font-family:monospace;'>i</span> is an index for accessing an array, we want to use the old value for accessing previous array element and newly incremented <span style='font-family:monospace;'>i</span> for current element.</div>
</dd><dt class="description_label">Expression:</dt>
<dd class="description_item"> <span style='font-family:monospace;'>int i3 = i--;</span>
<br />



<div class="lyx_code" id='magicparlabel-38317'><div class="lyx_code_item">80484ef:       mov    eax,DWORD PTR [ebp+0x8]</div>
<div class="lyx_code_item">80484f2:       lea    edx,[eax-0x1]</div>
<div class="lyx_code_item">80484f5:       mov    DWORD PTR [ebp+0x8],edx</div>
<div class="lyx_code_item">80484f8:       mov    DWORD PTR [ebp-0x8],eax</div>
</div>
<div class="standard" id='magicparlabel-38321'>Similar to <span style='font-family:monospace;'>i++</span> syntax, and is left as an exercise to readers.</div>
</dd><dt class="description_label">Expression:</dt>
<dd class="description_item"><span style='font-family:monospace;'> int i4 = --i;</span>
<br />



<div class="lyx_code" id='magicparlabel-38323'><div class="lyx_code_item">80484fb:       sub    DWORD PTR [ebp+0x8],0x1</div>
<div class="lyx_code_item">80484ff:       mov    eax,DWORD PTR [ebp+0x8]</div>
<div class="lyx_code_item">8048502:       mov    DWORD PTR [ebp-0x4],eax</div>
</div>
<div class="standard" id='magicparlabel-38326'>Similar to <span style='font-family:monospace;'>++i</span> syntax, and is left as an exercise to readers.</div>
</dd></dl>
</dd></dl>

<div class="exercise" id='magicparlabel-38327'><div class="exercise_item"><span class="exercise_label">Exercise 0.7.</span>
Read section <em>3.5.2.4</em>, <em>&ldquo;Partial Register Stalls&rdquo;</em> to understand register stalls in general.
<br />

</div>

<div class="exercise" id='magicparlabel-38328'><div class="exercise_item"><span class="exercise_label">Exercise 0.8.</span>
Read the sections from <em>7.3.1</em> to <em>7.3.7</em> in volume 1.</div>
</div>
</div>
<div class="subsection" id='magicparlabel-38329'>Stack</div>
<div class="standard" id='magicparlabel-38330'>A stack is a contiguous array of memory locations that holds a collection of discrete data. When a new element is added, a stack <em>grows down</em> in memory toward lesser addresses, and <em>shrinks up</em> toward greater addresses when an element is removed. x86 uses the <span style='font-family:monospace;'>esp</span> register to point to the top of the stack, at the newest element. A stack can be originated anywhere in main memory, as <span style='font-family:monospace;'>esp</span> can be set to any memory address. x86 provides two operations for manipulating stacks:<span style='font-family:monospace;'> </span></div>

<ul class="itemize" id='magicparlabel-38331'><li class="itemize_item"><span style='font-family:monospace;'>push</span> instruction and its variants add a new element on top of the stack</li>
<li class="itemize_item"><span style='font-family:monospace;'>pop</span> instructions and its variants remove the top-most element from the stack.</li>
</ul>






<div class="standard" id='magicparlabel-38344'><table><tbody><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38375'><span style='font-family:monospace;'>0x10000</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38378'><span style='font-family:monospace;'>00</span></div>
</td>
<td style ="width: 0.35cm;" align='left' valign='top'>

</td>
<td align='center' valign='top'>

</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38387'><span style='font-family:monospace;'>0x10001</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38390'><span style='font-family:monospace;'>00</span></div>
</td>
<td style ="width: 0.35cm;" align='left' valign='top'>

</td>
<td align='center' valign='top'>

</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38399'><span style='font-family:monospace;'>0x10002</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38402'><span style='font-family:monospace;'>00</span></div>
</td>
<td style ="width: 0.35cm;" align='left' valign='top'>

</td>
<td align='center' valign='top'>

</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38411'><span style='font-family:monospace;'>0x10003</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38414'><span style='font-family:monospace;'>00</span></div>
</td>
<td style ="width: 0.35cm;" align='left' valign='top'>

</td>
<td align='center' valign='top'>

</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38423'><span style='font-family:monospace;'>0x10004</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38426'><span style='font-family:monospace;'>12</span></div>
</td>
<td style ="width: 0.35cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-38429'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow><mo> &larr; </mo>
 </mrow></math></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38432'><span style='font-family:monospace;'>esp</span></div>
</td>
</tr></tbody>
</table>
</div>

<div class="standard" id='magicparlabel-38433'></div>



<div class="standard" id='magicparlabel-38442'><table><tbody><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38473'><span style='font-family:monospace;'>0x10000</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38476'><span style='font-family:monospace;'>00</span></div>
</td>
<td style ="width: 0.35cm;" align='left' valign='top'>

</td>
<td align='center' valign='top'>

</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38485'><span style='font-family:monospace;'>0x10001</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38488'><span style='font-family:monospace;'>00</span></div>
</td>
<td style ="width: 0.35cm;" align='left' valign='top'>

</td>
<td align='center' valign='top'>

</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38497'><span style='font-family:monospace;'>0x10002</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38500'><span style='font-family:monospace;'>78</span></div>
</td>
<td style ="width: 0.35cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-38503'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow><mo> &larr; </mo>
 </mrow></math></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38506'><span style='font-family:monospace;'>esp</span></div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38509'><span style='font-family:monospace;'>0x10003</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38512'><span style='font-family:monospace;'>56</span></div>
</td>
<td style ="width: 0.35cm;" align='left' valign='top'>

</td>
<td align='center' valign='top'>

</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38521'><span style='font-family:monospace;'>0x10004</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38524'><span style='font-family:monospace;'>12</span></div>
</td>
<td style ="width: 0.35cm;" align='left' valign='top'>

</td>
<td align='center' valign='top'>

</td>
</tr></tbody>
</table>
</div>

<div class="standard" id='magicparlabel-38531'></div>



<div class="standard" id='magicparlabel-38540'><table><tbody><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38571'><span style='font-family:monospace;'>0x10000</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38574'><span style='font-family:monospace;'>00</span></div>
</td>
<td style ="width: 0.35cm;" align='left' valign='top'>

</td>
<td align='center' valign='top'>

</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38583'><span style='font-family:monospace;'>0x10001</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38586'><span style='font-family:monospace;'>00</span></div>
</td>
<td style ="width: 0.35cm;" align='left' valign='top'>

</td>
<td align='center' valign='top'>

</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38595'><span style='font-family:monospace;'>0x10002</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38598'><span style='font-family:monospace;'>00</span></div>
</td>
<td style ="width: 0.35cm;" align='left' valign='top'>

</td>
<td align='center' valign='top'>

</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38607'><span style='font-family:monospace;'>0x10003</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38610'><span style='font-family:monospace;'>00</span></div>
</td>
<td style ="width: 0.35cm;" align='left' valign='top'>

</td>
<td align='center' valign='top'>

</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38619'><span style='font-family:monospace;'>0x10004</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38622'><span style='font-family:monospace;'>12</span></div>
</td>
<td style ="width: 0.35cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-38625'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow><mo> &larr; </mo>
 </mrow></math></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38628'><span style='font-family:monospace;'>esp</span></div>
</td>
</tr></tbody>
</table>
</div>


<div class="subsection" id='magicparlabel-38635'>Automatic variables</div>
<div class="standard" id='magicparlabel-38636'>Local variables are variables that exist within a scope. A scope is delimited by a pair of braces: <span style='font-family:monospace;'>{..}</span>. The most common scope to define local variables is at function scope. However, scope can be unnamed, and variables created inside an unnamed scope do not exist outside of its scope and its inner scope. </div>

<div class="example" id='magicparlabel-38637'><div class="example_item"><span class="example_label">Example 0.17.</span>
Function scope:
<br />

</div>

<div class='float-listings'><pre class ='listings'>void foo() {
    int a;
    int b;
}</pre></div>


<div class="standard" id='magicparlabel-38646'><span style='font-family:monospace;'>a</span> and <span style='font-family:monospace;'>b</span> are variables local to the function <span style='font-family:monospace;'>foo</span>.</div>
</div>

<div class="standard" id='magicparlabel-38647'><br />

</div>

<div class="example" id='magicparlabel-38648'><div class="example_item"><span class="example_label">Example 0.18.</span>
Unnamed scope:
<br />

</div>

<div class='float-listings'><pre class ='listings'>int foo() {
    int i;

    {
        int a = 1;
        int b = 2;
        {
            return i = a + b;
        }
    }
}</pre></div>


<div class="standard" id='magicparlabel-38664'><span style='font-family:monospace;'>a</span> and <span style='font-family:monospace;'>b</span> are local to where it is defined and local into its inner child scope that return <span style='font-family:monospace;'>i = a + b</span>. However, they do not exist at the function scope that creates <span style='font-family:monospace;'>i</span>.</div>
</div>
<div class="standard" id='magicparlabel-38665'>When a local variable is created, it is pushed on the stack; when a local variable goes out of scope, it is pop out of the stack, thus destroyed. When an argument is passed from a caller to a callee, it is pushed on the stack; when a callee returns to the caller, the arguments are popped out the stack. The local variables and arguments are automatically allocated upon enter a function and destroyed after exiting a function, that's why it's called <em>automatic variables</em>.</div>

<div class="standard" id='magicparlabel-38666'>A base frame pointer points to the start of the current function frame, and is kept in <span style='font-family:monospace;'>ebp </span>register. Whenever a function is called, it is allocated with its own dedicated storage on stack, called <em>stack frame</em>. A stack frame is where all local variables and arguments of a function are placed on a stack<div class="foot"><span class="foot_label">24</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-38670'>Data and only data are exclusively allocated on stack for every stack frame. No code resides here.</div>
</div></div>. </div>

<div class="standard" id='magicparlabel-38671'>When a function needs a local variable or an argument, it uses <span style='font-family:monospace;'>ebp</span> to access a variable:</div>

<ul class="itemize" id='magicparlabel-38672'><li class="itemize_item">All local variables are allocated after the <span style='font-family:monospace;'>ebp</span> pointer. Thus, to access a local variable, a number is subtracted from <span style='font-family:monospace;'>ebp</span> to reach the location of the variable. </li>
<li class="itemize_item">All arguments are allocated before <span style='font-family:monospace;'>ebp</span> pointer. To access an argument, a number is added to <span style='font-family:monospace;'>ebp</span> to reach the location of the argument. </li>
<li class="itemize_item">The <span style='font-family:monospace;'>ebp</span> itself pointer points to the return address of its caller.</li>
</ul>




<div class="standard" id='magicparlabel-38681'><table><tbody><tr><td align='center' valign='top' colspan='5'>
<div class="plain_layout" id='magicparlabel-38748'><span style='font-family:monospace;'>Previous Frame</span></div>
</td>
<td align='center' valign='top' colspan='10'>
<div class="plain_layout" id='magicparlabel-38763'><span style='font-family:monospace;'>Current Frame</span></div>
</td>
</tr><tr><td align='center' valign='top' colspan='5'>
<div class="plain_layout" id='magicparlabel-38793'><span style='font-family:monospace;'>Function Arguments </span></div>
</td>
<td align='center' valign='top' colspan='4'>

</td>
<td style ="width: 2.7cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38820'><span style='font-family:monospace;'>ebp</span></div>
</td>
<td align='center' valign='top' colspan='5'>
<div class="plain_layout" id='magicparlabel-38823'><span style='font-family:monospace;'>Local variables</span></div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38838'><em><span style='font-family:monospace;'>A1</span></em></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38841'><em><span style='font-family:monospace;'>A2</span></em></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38844'><em><span style='font-family:monospace;'>A3</span></em></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38847'><em><span style='font-family:monospace;'>........</span></em></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38850'><em><span style='font-family:monospace;'>An</span></em></div>
</td>
<td align='center' valign='top' colspan='4'>
<div class="plain_layout" id='magicparlabel-38853'><em><span style='font-family:monospace;'>Return Address</span></em></div>
</td>
<td style ="width: 2.7cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38865'><span style='font-family:monospace;'>Old ebp</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38868'><em><span style='font-family:monospace;'>L1</span></em></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38871'><em><span style='font-family:monospace;'>L2</span></em></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38874'><em><span style='font-family:monospace;'>L3</span></em></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38877'><em><span style='font-family:monospace;'>........</span></em></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-38880'><em><span style='font-family:monospace;'>Ln</span></em></div>
</td>
</tr></tbody>
</table>
</div>



<div class="standard" id='magicparlabel-38886'><span style='font-family:monospace;'>A</span> = Argument</div>

<div class="standard" id='magicparlabel-38887'><span style='font-family:monospace;'>L</span> = Local Variable</div>

<div class="standard" id='magicparlabel-38888'>Here is an example to make it more concrete:</div>

<dl class='description' id='magicparlabel-38889'><dt class="description_label">Source
<br />

</dt>
<dd class="description_item">

<div class='float-listings'><pre class ='listings C'>int add(int a, int b) {
    int i = a + b;

    return i;
}</pre></div>

</dd><dt class="description_label">Assembly
<br />

</dt>
<dd class="description_item">

<div class="lyx_code" id='magicparlabel-38900'><div class="lyx_code_item">080483db &lt;add&gt;:</div>
<div class="lyx_code_item">#include &lt;stdint.h&gt;</div>
<div class="lyx_code_item">int add(int a, int b) {</div>
<div class="lyx_code_item"> 80483db:       push   ebp</div>
<div class="lyx_code_item"> 80483dc:       mov    ebp,esp</div>
<div class="lyx_code_item"> 80483de:       sub    esp,0x10</div>
<div class="lyx_code_item">    int i = a + b;</div>
<div class="lyx_code_item"> 80483e1:       mov    edx,DWORD PTR [ebp+0x8]</div>
<div class="lyx_code_item"> 80483e4:       mov    eax,DWORD PTR [ebp+0xc]</div>
<div class="lyx_code_item"> 80483e7:       add    eax,edx</div>
<div class="lyx_code_item"> 80483e9:       mov    DWORD PTR [ebp-0x4],eax</div>
<div class="lyx_code_item">    return i;</div>
<div class="lyx_code_item"> 80483ec:       mov    eax,DWORD PTR [ebp-0x4]</div>
<div class="lyx_code_item">}</div>
<div class="lyx_code_item"> 80483ef:       leave  </div>
<div class="lyx_code_item"> 80483f0:       ret    </div>
</div>
</dd></dl>
<div class="standard" id='magicparlabel-38916'>In the assembly listing, <span style='font-family:monospace;'>[ebp-0x4]</span> is the local variable <span style='font-family:monospace;'>i</span>, since it is allocated <em>after </em><span style='font-family:monospace;'>ebp</span>, with the length of 4 bytes (an <span style='font-family:monospace;'>int</span>). On the other hand,<span style='font-family:monospace;'> a</span> and <span style='font-family:monospace;'>b</span> are arguments and can be accessed with <span style='font-family:monospace;'>ebp</span>: </div>

<ul class="itemize" id='magicparlabel-38917'><li class="itemize_item"><span style='font-family:monospace;'>[ebp+0x8] </span>accesses <span style='font-family:monospace;'>a</span>.</li>
<li class="itemize_item"><span style='font-family:monospace;'>[ebp+0xc]</span> access <span style='font-family:monospace;'>b</span>.</li>
</ul>
<div class="standard" id='magicparlabel-38919'>For accessing arguments, the rule is that the closer a variable on stack to <span style='font-family:monospace;'>ebp</span>, the closer it is to a function name. </div>





<div class="standard" id='magicparlabel-38926'><table><tbody><tr><td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top' colspan='2'>
<div class="plain_layout" id='magicparlabel-39112'><span style='font-family:monospace;'>ebp+0xc</span></div>
</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top' colspan='2'>
<div class="plain_layout" id='magicparlabel-39124'><span style='font-family:monospace;'>ebp+0x8</span></div>
</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top' colspan='2'>
<div class="plain_layout" id='magicparlabel-39136'><span style='font-family:monospace;'>ebp+0x4</span></div>
</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top' colspan='2'>
<div class="plain_layout" id='magicparlabel-39148'><span style='font-family:monospace;'>ebp</span></div>
</td>
</tr><tr><td align='center' valign='top' colspan='4'>

</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39166'><span style='font-family:monospace;'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow><mo> &darr; </mo>
 </mrow></math></span></div>
</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39178'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow><mo> &darr; </mo>
 </mrow></math></div>
</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39190'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow><mo> &darr; </mo>
 </mrow></math></div>
</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39202'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow><mo> &darr; </mo>
 </mrow></math></div>
</td>
</tr><tr><td align='center' valign='top'>

</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39208'><span style='font-family:monospace;'>00</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39211'><span style='font-family:monospace;'>01</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39214'><span style='font-family:monospace;'>02</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39217'><span style='font-family:monospace;'>03</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39220'><span style='font-family:monospace;'>04</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39223'><span style='font-family:monospace;'>05</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39226'><span style='font-family:monospace;'>06</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39229'><span style='font-family:monospace;'>07</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39232'><span style='font-family:monospace;'>08</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39235'><span style='font-family:monospace;'>09</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39238'><span style='font-family:monospace;'>0a</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39241'><span style='font-family:monospace;'>0b</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39244'><span style='font-family:monospace;'>0c</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39247'><span style='font-family:monospace;'>0d</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39250'><span style='font-family:monospace;'>0e</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39253'><span style='font-family:monospace;'>0f</span></div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39256'><span style='font-family:monospace;'>0x10000</span></div>
</td>
<td align='center' valign='top' colspan='4'>
<div class="plain_layout" id='magicparlabel-39259'>b</div>
</td>
<td align='center' valign='top' colspan='4'>
<div class="plain_layout" id='magicparlabel-39271'>a</div>
</td>
<td align='center' valign='top' colspan='4'>
<div class="plain_layout" id='magicparlabel-39283'><span style='font-family:monospace;'>Return Address</span></div>
</td>
<td align='center' valign='top' colspan='4'>
<div class="plain_layout" id='magicparlabel-39295'><span style='font-family:monospace;'>Old ebp</span></div>
</td>
</tr><tr><td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
</tr><tr><td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top' colspan='2'>
<div class="plain_layout" id='magicparlabel-39391'><span style='font-family:monospace;'>ebp+0x8</span></div>
</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top' colspan='2'>
<div class="plain_layout" id='magicparlabel-39403'><span style='font-family:monospace;'>ebp+0x4</span></div>
</td>
</tr><tr><td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39445'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow><mo> &darr; </mo>
 </mrow></math></div>
</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39457'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow><mo> &darr; </mo>
 </mrow></math></div>
</td>
</tr><tr><td align='center' valign='top'>

</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39463'><span style='font-family:monospace;'>00</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39466'><span style='font-family:monospace;'>01</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39469'><span style='font-family:monospace;'>02</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39472'><span style='font-family:monospace;'>03</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39475'><span style='font-family:monospace;'>04</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39478'><span style='font-family:monospace;'>05</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39481'><span style='font-family:monospace;'>06</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39484'><span style='font-family:monospace;'>07</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39487'><span style='font-family:monospace;'>08</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39490'><span style='font-family:monospace;'>09</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39493'><span style='font-family:monospace;'>0a</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39496'><span style='font-family:monospace;'>0b</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39499'><span style='font-family:monospace;'>0c</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39502'><span style='font-family:monospace;'>0d</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39505'><span style='font-family:monospace;'>0e</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39508'><span style='font-family:monospace;'>0f</span></div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39511'><span style='font-family:monospace;'>&nbsp;0xffe0</span></div>
</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-39547'><span style='font-family:monospace;'>N</span></div>
</td>
<td align='center' valign='top' colspan='4'>
<div class="plain_layout" id='magicparlabel-39550'><span style='font-family:monospace;'>i</span></div>
</td>
</tr></tbody>
</table>
</div>



<div class="standard" id='magicparlabel-39565'><span style='font-family:monospace;'>N</span> = Next local variable starts here</div>

<div class="standard" id='magicparlabel-39566'>From the figure, we can see that <span style='font-family:monospace;'>a</span> and <span style='font-family:monospace;'>b</span> are laid out in memory with the exact order as written in C, relative to the return address. </div>
<div class="subsection" id='magicparlabel-39567'>Function Call and Return<a id="subsec_Function_Call_and" />
</div>

<dl class='description' id='magicparlabel-39568'><dt class="description_label">Source</dt>
<dd class="description_item"> 
<br />



<div class='float-listings'><pre class ='listings'>#include &lt;stdio.h&gt;

int add(int a, int b) {
    int local = 0x12345;

    return a + b;
}

int main(int argc, char *argv[]) {
    add(1,1);

    return 0;
}</pre></div>

</dd><dt class="description_label">Assembly
<br />

</dt>
<dd class="description_item">
<div class="standard" id='magicparlabel-39587'>For every function call, <span style='font-family:monospace;'>gcc</span> pushes arguments on the stack in reversed order with the <span style='font-family:monospace;'>push</span> instructions. That is, the arguments pushed on stack are in reserved order as it is written in high level C code, to ensure the relative order between arguments, as seen in previous section how function arguments and local variables are laid out. Then, <span style='font-family:monospace;'>gcc</span> generates a <span style='font-family:monospace;'>call</span> instruction, which then implicitly pushes a return address before transferring the control to <span style='font-family:monospace;'>add</span> function:</div>

<div class="lyx_code" id='magicparlabel-39588'><div class="lyx_code_item">080483f2 &lt;main&gt;:</div>
<div class="lyx_code_item">int main(int argc, char *argv[]) {</div>
<div class="lyx_code_item"> 80483f2:       push   ebp</div>
<div class="lyx_code_item"> 80483f3:       mov    ebp,esp</div>
<div class="lyx_code_item">    add(1,2);</div>
<div class="lyx_code_item"> 80483f5:       push   0x2</div>
<div class="lyx_code_item"> 80483f7:       push   0x1</div>
<div class="lyx_code_item"> 80483f9:       call   80483db &lt;add&gt;</div>
<div class="lyx_code_item"> 80483fe:       add    esp,0x8</div>
<div class="lyx_code_item">    return 0;</div>
<div class="lyx_code_item"> 8048401:       mov    eax,0x0</div>
<div class="lyx_code_item">}</div>
<div class="lyx_code_item"> 8048406:       leave  </div>
<div class="lyx_code_item"> 8048407:       ret    </div>
</div>
</dd></dl>
<div class="standard" id='magicparlabel-39602'>Upon finishing the call to <span style='font-family:monospace;'>add</span> function, the stack is restored by adding <span style='font-family:monospace;'>0x8</span> to stack pointer <span style='font-family:monospace;'>esp </span>(which is equivalent to 2 <span style='font-family:monospace;'>pop</span> instructions). Finally, a <span style='font-family:monospace;'>leave</span> instruction is executed and main returns with a <span style='font-family:monospace;'>ret</span> instruction. A <span style='font-family:monospace;'>ret</span> instruction transfers the program execution back to the caller to the instruction right after the <span style='font-family:monospace;'>call</span> instruction, the <span style='font-family:monospace;'>add</span> instruction. The reason <span style='font-family:monospace;'>ret</span> can return to such location is that the return address implicitly pushed by the <span style='font-family:monospace;'>call</span> instruction, which is the address right after the <span style='font-family:monospace;'>call</span> instruction; whenever the CPU executes <span style='font-family:monospace;'>ret</span> instruction, it retrieves the return address that sits right after all the arguments on the stack:</div>

<div class="standard" id='magicparlabel-39603'>At the end of a function, <span style='font-family:monospace;'>gcc </span>places a <span style='font-family:monospace;'>leave</span> instruction to clean up all spaces allocated for local variables and restore the frame pointer to frame pointer of the caller.</div>

<div class="lyx_code" id='magicparlabel-39604'><div class="lyx_code_item">080483db &lt;add&gt;:</div>
<div class="lyx_code_item">#include &lt;stdio.h&gt;</div>
<div class="lyx_code_item">int add(int a, int b) {</div>
<div class="lyx_code_item"> 80483db:       push   ebp</div>
<div class="lyx_code_item"> 80483dc:       mov    ebp,esp</div>
<div class="lyx_code_item"> 80483de:       sub    esp,0x10</div>
<div class="lyx_code_item">    int local = 0x12345;</div>
<div class="lyx_code_item"> 80483e1:       DWORD PTR [ebp-0x4],0x12345</div>
<div class="lyx_code_item">    return a + b;</div>
<div class="lyx_code_item"> 80483e8:       mov    edx,DWORD PTR [ebp+0x8]</div>
<div class="lyx_code_item"> 80483eb:       mov    eax,DWORD PTR [ebp+0xc]</div>
<div class="lyx_code_item"> 80483ee:       add    eax,edx</div>
<div class="lyx_code_item">}</div>
<div class="lyx_code_item"> 80483f0:       leave  </div>
<div class="lyx_code_item"> 80483f1:       ret </div>
</div>

<div class="exercise" id='magicparlabel-39619'><div class="exercise_item"><span class="exercise_label">Exercise 0.9.</span>
The above code that <span style='font-family:monospace;'>gcc</span> generated for function calling is actually the standard method x86 defined. Read chapter 6, <em>&ldquo;Produce Calls, Interrupts, and Exceptions&rdquo;,</em> Intel manual volume 1.</div>
</div>
<div class="subsection" id='magicparlabel-39620'>Loop</div>
<div class="standard" id='magicparlabel-39621'>Loop is simply resetting the instruction pointer to an already executed instruction and starting from there all over again. A loop is just one application of <span style='font-family:monospace;'>jmp</span> instruction. However, because looping is a pervasive pattern, it earned its own syntax in C.</div>

<dl class='description' id='magicparlabel-39622'><dt class="description_label">Source
<br />

</dt>
<dd class="description_item">

<div class='float-listings'><pre class ='listings C'>#include &lt;stdio.h&gt;

int main(int argc, char *argv[]) {
    for (int i = 0; i &lt; 10; i++) {
    }

    return 0;
}</pre></div>

</dd><dt class="description_label">Assembly
<br />

</dt>
<dd class="description_item">

<div class="lyx_code" id='magicparlabel-39636'><div class="lyx_code_item">080483db &lt;main&gt;:</div>
<div class="lyx_code_item">#include &lt;stdio.h&gt;</div>
<div class="lyx_code_item">int main(int argc, char *argv[]) {</div>
<div class="lyx_code_item"> 80483db:       push   ebp</div>
<div class="lyx_code_item"> 80483dc:       mov    ebp,esp</div>
<div class="lyx_code_item"> 80483de:       sub    esp,0x10</div>
<div class="lyx_code_item">    for (int i = 0; i &lt; 10; i++) {</div>
<div class="lyx_code_item"> 80483e1:       mov    DWORD PTR [ebp-0x4],0x0</div>
<div class="lyx_code_item"> 80483e8:       jmp    80483ee &lt;main+0x13&gt;</div>
<div class="lyx_code_item"> 80483ea:       add    DWORD PTR [ebp-0x4],0x1</div>
<div class="lyx_code_item"> 80483ee:       cmp    DWORD PTR [ebp-0x4],0x9</div>
<div class="lyx_code_item"> 80483f2:       jle    80483ea &lt;main+0xf&gt;</div>
<div class="lyx_code_item">    }</div>
<div class="lyx_code_item">    return 0;</div>
<div class="lyx_code_item"> 80483f4: b8 00 00 00 00        mov    eax,0x0</div>
<div class="lyx_code_item">}</div>
<div class="lyx_code_item"> 80483f9: c9                    leave</div>
<div class="lyx_code_item"> 80483fa: c3                    ret</div>
<div class="lyx_code_item"> 80483fb: 66 90                 xchg   ax,ax</div>
<div class="lyx_code_item"> 80483fd: 66 90                 xchg   ax,ax</div>
<div class="lyx_code_item"> 80483ff: 90                    nop</div>
</div>
<div class="standard" id='magicparlabel-39657'>The colors mark corresponding high level code to assembly code:</div>

<ol class="enumerate" id='magicparlabel-39658'><li class="enumerate_item">The red instruction initialize <span style='font-family:monospace;'>i</span> to <span style='font-family:monospace;'>0</span>.</li>
<li class="enumerate_item">The green instructions compare i to 10 by using <span style='font-family:monospace;'>jle</span> and compare it to <span style='font-family:monospace;'>9</span>. If true, jump to <span style='font-family:monospace;'>80483ea</span> for another iteration.</li>
<li class="enumerate_item">The blue instruction increase i by 1, making the loop able to terminate once the terminate condition is satisfied.</li>
</ol>

<div class="exercise" id='magicparlabel-39661'><div class="exercise_item"><span class="exercise_label">Exercise 0.10.</span>
Why does the increment instruction (the blue instruction) appears before the compare instructions (the green instructions)?
<br />

</div>

<div class="exercise" id='magicparlabel-39662'><div class="exercise_item"><span class="exercise_label">Exercise 0.11.</span>
What assembly code can be generated for <span style='font-family:monospace;'>while</span> and <span style='font-family:monospace;'>do...while</span>?</div>
</div>
</div>
</dd></dl>
<div class="subsection" id='magicparlabel-39663'>Conditional</div>
<div class="standard" id='magicparlabel-39664'>Again, conditional in C with <span style='font-family:monospace;'>if...else...</span> construct is just another application of <span style='font-family:monospace;'>jmp</span> instruction under the hood. It is also a pervasive pattern that earned its own syntax in C.</div>

<dl class='description' id='magicparlabel-39665'><dt class="description_label">Source
<br />

</dt>
<dd class="description_item">

<div class='float-listings'><pre class ='listings'>#include &lt;stdio.h&gt;

int main(int argc, char *argv[]) {
    int i = 0;

    if (argc) {
        i = 1;
    } else {
        i = 0;
    }

    return 0;
}</pre></div>

</dd><dt class="description_label">Assembly
<br />

</dt>
<dd class="description_item">

<div class="lyx_code" id='magicparlabel-39684'><div class="lyx_code_item">int main(int argc, char *argv[]) {</div>
<div class="lyx_code_item"> 80483db:        push   ebp</div>
<div class="lyx_code_item"> 80483dc:        mov    ebp,esp</div>
<div class="lyx_code_item"> 80483de:        sub    esp,0x10</div>
<div class="lyx_code_item">    int i = 0;</div>
<div class="lyx_code_item"> 80483e1:        mov    DWORD PTR [ebp-0x4],0x0</div>
<div class="lyx_code_item">    if (argc) {</div>
<div class="lyx_code_item"> 80483e8:        cmp    DWORD PTR [ebp+0x8],0x0</div>
<div class="lyx_code_item"> 80483ec:        je     80483f7 &lt;main+0x1c&gt;</div>
<div class="lyx_code_item">        i = 1;</div>
<div class="lyx_code_item"> 80483ee:        mov    DWORD PTR [ebp-0x4],0x1</div>
<div class="lyx_code_item"> 80483f5:        jmp    80483fe &lt;main+0x23&gt;</div>
<div class="lyx_code_item">    } else {</div>
<div class="lyx_code_item">        i = 0;</div>
<div class="lyx_code_item"> 80483f7:        mov    DWORD PTR [ebp-0x4],0x0</div>
<div class="lyx_code_item">    }</div>
<div class="lyx_code_item">    return 0;</div>
<div class="lyx_code_item"> 80483fe:        mov    eax,0x0</div>
<div class="lyx_code_item">}</div>
<div class="lyx_code_item"> 8048403:        leave  </div>
<div class="lyx_code_item"> 8048404:        ret    </div>
</div>
<div class="standard" id='magicparlabel-39705'>The generated assembly code follows the same order as the corresponding high level syntax:</div>

<ul class="itemize" id='magicparlabel-39706'><li class="itemize_item">red instructions represents <span style='font-family:monospace;'>if</span> branch.</li>
<li class="itemize_item">blue instructions represents <span style='font-family:monospace;'>else</span> branch.</li>
<li class="itemize_item">green instruction is the exit point for both <span style='font-family:monospace;'>if</span> and <span style='font-family:monospace;'>else</span> branch.</li>
</ul>
<div class="standard" id='magicparlabel-39709'><span style='font-family:monospace;'>if</span> branch first compares whether <span style='font-family:monospace;'>argc</span> is <em>false</em> (equal to 0) with <span style='font-family:monospace;'>cmp </span>instruction. If true, it proceeds to <span style='font-family:monospace;'>else</span> branch at <span style='font-family:monospace;'>80483f7</span>. Otherwise, <span style='font-family:monospace;'>if</span> branch continues with the code of its branch, which is the next instruction at <span style='font-family:monospace;'>80483ee </span>for copying <span style='font-family:monospace;'>1</span> to <span style='font-family:monospace;'>i</span>.<span style='font-family:monospace;'> </span>Finally, it skips over <span style='font-family:monospace;'>else</span> branch and proceeds to <span style='font-family:monospace;'>80483fe</span>, which is the next instruction pasts the <span style='font-family:monospace;'>if..else...</span> construct.</div>

<div class="standard" id='magicparlabel-39710'><span style='font-family:monospace;'>else</span> branch is entered when <span style='font-family:monospace;'>cmp</span> instruction from <span style='font-family:monospace;'>if</span> branch is true. <span style='font-family:monospace;'>else</span> branch starts at <span style='font-family:monospace;'>80483f7</span>, which is the first instruction of <span style='font-family:monospace;'>else</span> branch. The instruction copies <span style='font-family:monospace;'>0</span> to <span style='font-family:monospace;'>i</span>, and proceeds naturally to the next instruction pasts the <span style='font-family:monospace;'>if...else...</span> construct without any jump.</div>
</dd></dl>
<div class="chapter" id='magicparlabel-39711'>The Anatomy of a Program<a id="chap_The_Anatomy_of_a_program" />
</div>
<div class="standard" id='magicparlabel-39712'>Every program consists of code and data, and only those two components made up a program. However, if a program consists purely code and data of its own, from the perspective of an operating system (as well as human), it does not know in a program, which block of binary is a program and which is just raw data, where in the program to start execution, which region of memory should be protected and which is free to modify. For that reason, each program carries extra metadata to communicate with the operating system how to handle the program.</div>

<div class="standard" id='magicparlabel-39713'>When a source file is compiled, the generated machine code is stored into an <em><a id='magicparlabel-39717' />
</em><div class="marginal"><div class="plain_layout" id='magicparlabel-39721'><em><b>object file</b></em></div>
</div><em>object file</em>, which is just a block of binary. One or more object files can be combined to produce an <em><a id='magicparlabel-39725' />
</em><div class="marginal"><div class="plain_layout" id='magicparlabel-39729'><em><b>executable binary</b></em></div>
</div><em>executable binary</em>, which is a complete program runnable in an operating system.</div>

<div class="standard" id='magicparlabel-39730'><code class="flex_code">readelf</code> is a program that recognizes and displays the ELF metadata of a binary file, be it an object file or an executable binary. <em><b>ELF</b></em>, or <em><b>E</b>xecutable and <b>L</b>inkable <b>F</b>ormat</em>, is the content at the very beginning of an executable to provide an operating system necessary information to load into main memory and run the executable. ELF can be thought of similar to the table of contents of a book. In a book, a table of contents list the page numbers of the main sections, subsections, sometimes even figures and tables for easy lookup. Similarly, ELF lists various sections used for code and data, and the memory addresses of each symbol along with other information.</div>

<div class="standard" id='magicparlabel-39735'>An ELF binary is composed of:</div>

<ul class="itemize" id='magicparlabel-39736'><li class="itemize_item">An <a id='magicparlabel-39740' />
<em><div class="marginal"><div class="plain_layout" id='magicparlabel-39744'><em><b>ELF header</b></em></div>
</div>ELF header</em>: the very first section of an executable that describes the file's organization.</li>
<li class="itemize_item">A <a id='magicparlabel-39749' />
<em><div class="marginal"><div class="plain_layout" id='magicparlabel-39753'><em><b>program header table</b></em></div>
</div>program header table</em>: is an array of fixed-size structures that describes segments of an executable.</li>
<li class="itemize_item">A <a id='magicparlabel-39758' />
<em><div class="marginal"><div class="plain_layout" id='magicparlabel-39762'><em><b>section header table</b></em></div>
</div>section header table</em>: is an array of fixed-size structures that describes sections of an executable. </li>
<li class="itemize_item"><em><a id='magicparlabel-39767' />
<div class="marginal"><div class="plain_layout" id='magicparlabel-39771'><em><b>Segments and section</b></em><b>s</b></div>
</div>Segments and section</em>s are the main content of an ELF binary, which are the code and data, divided into chunks of different purposes.
<br />


<div class="standard" id='magicparlabel-39772'>A <em>segment<a id='magicparlabel-39776' />
</em> is a composition of zero or more sections and is directly loaded by an operating system at runtime.</div>

<div class="standard" id='magicparlabel-39777'>A <em>section<a id='magicparlabel-39781' />
</em> is a block of binary that is either:</div>

<ul class="itemize" id='magicparlabel-39782'><li class="itemize_item">actual program code and data that is available in memory when a program runs. </li>
<li class="itemize_item">metadata about other sections used only in the linking process, and disappear from the final executable.</li>
</ul>
<div class="standard" id='magicparlabel-39784'>Linker uses sections to build segments.</div>
</li></ul>

<div class='float-figure'><div class="plain_layout" id='magicparlabel-39789'><span class='float-caption-Standard float-caption float-caption-standard'>Figure 0.16:  ELF - Linking View vs Executable View (Source: Wikipedia)</span></div>

<div class="plain_layout" id='magicparlabel-39794'><img style='width:30%;' src='26_img_05_Elf-layout--en.png' alt='image: 26_img_05_Elf-layout--en.png' />
</div>
</div>


<div class="standard" id='magicparlabel-39795'>Later we will compile our kernel as an ELF executable with GCC, and explicitly specify how segments are created and where they are loaded in memory through the use a <em>linker script</em>, a text file to instruct how a linker should generate a binary. For now, we will examine the anatomy of an ELF executable in detail.</div>
<div class="section" id='magicparlabel-39796'>Reference documents: </div>
<div class="standard" id='magicparlabel-39797'>The <div class="marginal"><div class="plain_layout" id='magicparlabel-39801'><em><b>ELF specification</b></em></div>
</div>ELF specification is bundled as a <span style='font-family:monospace;'>man</span> page in Linux:</div>



<div class="standard" id='magicparlabel-39807'><span style='font-family:monospace;'>$ man elf</span></div>



<div class="standard" id='magicparlabel-39813'>It is a useful resource to understand and implement ELF. However, it will be much easier to use after you finish this chapter, as the specification mixes implementation details in it.</div>

<div class="standard" id='magicparlabel-39814'>The default specification is a generic one, in which every ELF implementation follows. However, each platform provides extra features unique to it. The ELF specification for x86 is currently maintained on Github by H.J. Lu: <span class="flex_url">https://github.com/hjl-tools/x86-psABI/wiki/X86-psABI</span>. </div>

<div class="standard" id='magicparlabel-39819'>Platform-dependent details are referred to as &ldquo;processor specific&rdquo; in the generic ELF specification. We will not explore these details, but study the generic details, which are enough for crafting an ELF binary image for our operating system.</div>
<div class="section" id='magicparlabel-39820'>ELF header</div>
<div class="standard" id='magicparlabel-39821'>To see the information of an ELF header:</div>



<div class="standard" id='magicparlabel-39827'><span style='font-family:monospace;'>$ readelf -h hello</span></div>


<div class="standard" id='magicparlabel-39828'><br />

</div>

<div class="standard" style='text-align: left;' id='magicparlabel-39833'>The output:</div>



<div class="lyx_code" id='magicparlabel-39839'><div class="lyx_code_item">ELF Header:</div>
<div class="lyx_code_item">  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00</div>
<div class="lyx_code_item">  Class:                             ELF64   </div>
<div class="lyx_code_item">  Data:                              2's complement, little endian</div>
<div class="lyx_code_item">  Version:                           1 (current)</div>
<div class="lyx_code_item">  OS/ABI:                            UNIX - System V</div>
<div class="lyx_code_item">  ABI Version:                       0</div>
<div class="lyx_code_item">  Type:                              EXEC (Executable file)</div>
<div class="lyx_code_item">  Machine:                           Advanced Micro Devices X86-64</div>
<div class="lyx_code_item">  Version:                           0x1</div>
<div class="lyx_code_item">  Entry point address:               0x400430</div>
<div class="lyx_code_item">  Start of program headers:          64 (bytes into file)</div>
<div class="lyx_code_item">  Start of section headers:          6648 (bytes into file)</div>
<div class="lyx_code_item">  Flags:                             0x0</div>
<div class="lyx_code_item">  Size of this header:               64 (bytes)</div>
<div class="lyx_code_item">  Size of program headers:           56 (bytes)</div>
<div class="lyx_code_item">  Number of program headers:         9</div>
<div class="lyx_code_item">  Size of section headers:           64 (bytes)</div>
<div class="lyx_code_item">  Number of section headers:         31</div>
<div class="lyx_code_item">Section header string table index: 28</div>
</div>


<div class="standard" id='magicparlabel-39864'>Let's go through each field:</div>

<dl class='description' id='magicparlabel-39865'><dt class="description_label"><strong class="flex_strong">Magic</strong>
<br />

</dt>
<dd class="description_item">
<div class="standard" id='magicparlabel-39870'>Displays the raw bytes that uniquely addresses a file is an ELF executable binary. Each byte gives a brief information.</div>

<div class="standard" id='magicparlabel-39871'>In the example, we have the following magic bytes:</div>


<div class="standard" id='magicparlabel-39872'><br />

</div>

<div class="lyx_code" id='magicparlabel-39877'><div class="lyx_code" style='text-align: left;'>Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00</div>
</div>


<div class="standard" id='magicparlabel-39883'>Examine byte by byte:</div>

<div class="standard" id='magicparlabel-39884'>&emsp;

<table><tbody><tr><td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-39917'><b>Byte</b></div>
</td>
<td style ="width: 60%;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-39920'><b>Description</b></div>
</td>
</tr><tr><td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-39923'><code class="flex_code">7f 45 4c 46</code></div>
</td>
<td style ="width: 60%;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-39930'>Predefined values. The first byte is always <code class="flex_code">7F</code>, the remaining 3 bytes represent the string <code class="flex_code">&ldquo;ELF</code>&rdquo;.</div>
</td>
</tr><tr><td style ="width: 3cm;" align='left' valign='top'>

</td>
<td style ="width: 60%;" align='left' valign='top'>

</td>
</tr><tr><td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-39947'><code class="flex_code">02</code></div>
</td>
<td style ="width: 60%;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-39954'>See <code class="flex_code">Class</code> field below.</div>
</td>
</tr><tr><td style ="width: 3cm;" align='left' valign='top'>

</td>
<td style ="width: 60%;" align='left' valign='top'>

</td>
</tr><tr><td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-39967'><code class="flex_code">01</code></div>
</td>
<td style ="width: 60%;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-39974'>See <code class="flex_code">Data</code> field below.</div>
</td>
</tr><tr><td style ="width: 3cm;" align='left' valign='top'>

</td>
<td style ="width: 60%;" align='left' valign='top'>

</td>
</tr><tr><td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-39987'><code class="flex_code">01</code></div>
</td>
<td style ="width: 60%;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-39994'>See <code class="flex_code">Version</code> field below.</div>
</td>
</tr><tr><td style ="width: 3cm;" align='left' valign='top'>

</td>
<td style ="width: 60%;" align='left' valign='top'>

</td>
</tr><tr><td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40007'><code class="flex_code">00</code></div>
</td>
<td style ="width: 60%;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40014'>See <code class="flex_code">OS/ABI</code> field below.</div>
</td>
</tr><tr><td style ="width: 3cm;" align='left' valign='top'>

</td>
<td style ="width: 60%;" align='left' valign='top'>

</td>
</tr><tr><td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40027'><code class="flex_code">00 00 00 00 00 00 00 00</code></div>
</td>
<td style ="width: 60%;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40034'>Padding bytes. These bytes are unused and are always set to 0. Padding bytes are added for proper alignment, and is reserved for future use when more information is needed.</div>
</td>
</tr></tbody>
</table>
</div>
</dd><dt class="description_label"><strong class="flex_strong">Class</strong>
<br />

</dt>
<dd class="description_item">
<div class="standard" id='magicparlabel-40040'>A byte in <code class="flex_code">Magic</code> field. It specifies the class or capacity of a file. </div>

<div class="standard" id='magicparlabel-40045'>Possible values:</div>

<div class="standard" id='magicparlabel-40046'>&emsp;

<table><tbody><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-40063'><b>Value</b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-40066'><b>Description</b></div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-40069'><code class="flex_code">0</code></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-40076'>Invalid class</div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-40079'><code class="flex_code">1</code></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-40086'>32-bit objects</div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-40089'><code class="flex_code">2</code></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-40096'>64-bit objects</div>
</td>
</tr></tbody>
</table>
</div>
</dd><dt class="description_label"><strong class="flex_strong">Data</strong>
<br />

</dt>
<dd class="description_item">
<div class="standard" id='magicparlabel-40102'>A byte in <code class="flex_code">Magic</code> field. It specifies the data encoding of the processor-specific data in the object file.</div>

<div class="standard" id='magicparlabel-40107'>Possible values:</div>

<div class="standard" id='magicparlabel-40108'>&emsp;

<table><tbody><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-40125'><b>Value</b></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40128'><b>Description</b></div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-40131'><code class="flex_code">0</code></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40138'>Invalid data encoding</div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-40141'><code class="flex_code">1</code></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40148'>Little endian, 2's complement</div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-40151'><code class="flex_code">2</code></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40158'>Big endian, 2's complement</div>
</td>
</tr></tbody>
</table>
</div>
</dd><dt class="description_label"><strong class="flex_strong">Version</strong>
<br />

</dt>
<dd class="description_item">
<div class="standard" id='magicparlabel-40164'>A byte in <code class="flex_code">Magic</code>. It specifies the ELF header version number.</div>

<div class="standard" id='magicparlabel-40169'>Possible values:</div>

<div class="standard" id='magicparlabel-40170'>&emsp;

<table><tbody><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-40185'><b>Value</b></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40188'><b>Description</b></div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-40191'>0</div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40194'>Invalid version</div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-40197'>1</div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40200'>Current version</div>
</td>
</tr></tbody>
</table>
</div>
</dd><dt class="description_label"><strong class="flex_strong">OS/ABI</strong>
<br />

</dt>
<dd class="description_item">
<div class="standard" id='magicparlabel-40206'>A byte in <code class="flex_code">Magic</code> field. It specifies the target operating system <code class="flex_code">ABI</code>. Originally, it was a padding byte.</div>

<div class="standard" id='magicparlabel-40215'>Possible values: Refer to the latest ABI document, as it is a long list of different operating systems.</div>
</dd><dt class="description_label"><strong class="flex_strong">Type</strong>
<br />

</dt>
<dd class="description_item">
<div class="standard" id='magicparlabel-40221'>Identifies the object file type.</div>

<div class="standard" id='magicparlabel-40222'>&emsp;

<table><tbody><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-40247'><b>Value</b></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40250'><b>Description</b></div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-40253'><code class="flex_code">0</code></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40260'>No file type</div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-40263'><code class="flex_code">1</code></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40270'>Relocatable file</div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-40273'><code class="flex_code">2</code></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40280'>Executable file</div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-40283'><code class="flex_code">3</code></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40290'>Shared object file</div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-40293'><code class="flex_code">4</code></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40300'>Core file</div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-40303'><code class="flex_code">0xff00</code></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40310'>Processor specific, lower bound</div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-40313'><code class="flex_code">0xffff</code></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40320'>Processor specific, upper bound</div>
</td>
</tr></tbody>
</table>
</div>

<div class="standard" id='magicparlabel-40321'>The values from <code class="flex_code">0xff00</code> to <code class="flex_code">0xffff</code> are reserved for a processor to define additional file types meaningful to it.</div>
</dd><dt class="description_label"><strong class="flex_strong">Machine</strong>
<br />

</dt>
<dd class="description_item">
<div class="standard" id='magicparlabel-40335'>Specifies the required architecture value for an ELF file e.g. x86_64, MIPS, SPARC, etc. In the example, the machine is of <code class="flex_code">x86_64</code> architecture.</div>

<div class="standard" id='magicparlabel-40340'>Possible values: Please refer to the latest ABI document, as it is a long list of different architectures.</div>
</dd><dt class="description_label"><strong class="flex_strong">Version</strong>
<br />

</dt>
<dd class="description_item">
<div class="standard" id='magicparlabel-40346'>Specifies the version number of the current <em>object file</em> (not the version of the ELF header, as the above <code class="flex_code">Version</code> field specified).</div>
</dd><dt class="description_label"><strong class="flex_strong">Entry&nbsp;point&nbsp;address</strong>
<br />

</dt>
<dd class="description_item">
<div class="standard" id='magicparlabel-40356'>Specifies the memory address where the very first code to be executed. The address of <code class="flex_code">main</code> function is the default in a normal application program, but it can be any function by explicitly specifying the function name to <span style='font-family:monospace;'>gcc</span>. For the operating system we are going to write, this is the single most important field that we need to retrieve to bootstrap our kernel, and everything else can be ignored.</div>
</dd><dt class="description_label"><strong class="flex_strong">Start&nbsp;of&nbsp;program&nbsp;headers</strong>
<br />

</dt>
<dd class="description_item">
<div class="standard" id='magicparlabel-40366'>The offset of the program header table, in bytes. In the example, this number is <code class="flex_code">64</code> bytes, which means the <code class="flex_code">65th</code> byte, or <code class="flex_code">&lt;start address&gt; + 64</code>, is the start address of the program header table. That is, if a program is loaded at address <code class="flex_code">0x10000</code> in memory, then the start address is <code class="flex_code">0x10000</code> (the very first byte of <code class="flex_code">Magic</code> field, where the value <code class="flex_code">0x7f</code> resides) and the start address of program header table is <code class="flex_code">0x10000 + 0x40 = 0x10040</code>.</div>
</dd><dt class="description_label"><strong class="flex_strong">Start&nbsp;of&nbsp;section&nbsp;headers</strong>
<br />

</dt>
<dd class="description_item">
<div class="standard" id='magicparlabel-40404'>The offset of the section header table in bytes, similar to the start of program headers. In the example, it is <code class="flex_code">6648</code> bytes into file.</div>
</dd><dt class="description_label"><strong class="flex_strong">Flags</strong>
<br />

</dt>
<dd class="description_item">
<div class="standard" id='magicparlabel-40414'>Hold processor-specific flags associated with the file. When the program is loaded, in a x86 machine, <code class="flex_code">EFLAGS</code> register is set according to this value. In the example, the value is <code class="flex_code">0x0</code>, which means <code class="flex_code">EFLAGS</code> register is in a clear state.</div>
</dd><dt class="description_label"><strong class="flex_strong">Size&nbsp;of&nbsp;this&nbsp;header</strong>
<br />

</dt>
<dd class="description_item">
<div class="standard" id='magicparlabel-40432'>Specifies the total size of ELF header's size in bytes. In the example, it is <span style='font-family:monospace;'>64</span> bytes, which is equivalent to Start of program headers. Note that these two numbers are not necessary equivalent, as program header table might be placed far away from the ELF header. The only fixed component in the ELF executable binary is the ELF header, which appears at the very beginning of the file.</div>
</dd><dt class="description_label"><strong class="flex_strong">Size&nbsp;of&nbsp;program&nbsp;headers</strong>
<br />

</dt>
<dd class="description_item">
<div class="standard" id='magicparlabel-40438'>Specifies the size of <em>each</em> program header in bytes. In the example, it is <span style='font-family:monospace;'>64</span> bytes.</div>
</dd><dt class="description_label"><strong class="flex_strong">Number&nbsp;of&nbsp;program&nbsp;headers</strong>
<br />

</dt>
<dd class="description_item">
<div class="standard" id='magicparlabel-40444'>Specifies the total number of program headers. In the example, the file has a total of <span style='font-family:monospace;'>9</span> program headers.</div>
</dd><dt class="description_label"><strong class="flex_strong">Size&nbsp;of&nbsp;section&nbsp;headers</strong>
<br />

</dt>
<dd class="description_item">
<div class="standard" id='magicparlabel-40450'>Specifies the size of <em>each</em> section header in bytes. In the example, it is 64 bytes.</div>
</dd><dt class="description_label"><strong class="flex_strong">Number&nbsp;of&nbsp;section&nbsp;headers</strong>
<br />

</dt>
<dd class="description_item">
<div class="standard" id='magicparlabel-40456'>Specifies the total number of section headers. In the example, the file has a total of <code class="flex_code">31</code> section headers. In a section header table, the first entry in the table is always an empty section.</div>
</dd><dt class="description_label"><strong class="flex_strong">Section&nbsp;header&nbsp;string&nbsp;table&nbsp;index</strong>
<br />

</dt>
<dd class="description_item">
<div class="standard" id='magicparlabel-40466'>Specifies the index of the header in the section header table that points to the section that holds all null-terminated strings. In the example, the index is <span style='font-family:monospace;'>28</span>, which means it's the 28<sup class="script_superscript">th</sup> entry of the table. </div>
</dd></dl>
<div class="section" id='magicparlabel-40471'>Section header table</div>
<div class="standard" id='magicparlabel-40472'>As we know already, code and data compose a program. However, not all types of code and data have the same purpose. For that reason, instead of a big chunk of code and data, they are divided into smaller chunks, and each chunk must satisfy these conditions (according to gABI):</div>

<ul class="itemize" id='magicparlabel-40473'><li class="itemize_item">Every section in an object file has exactly one section header describing it. But, section headers may exist that do not have a section.</li>
<li class="itemize_item">Each section occupies one contiguous (possibly empty) sequence of bytes within a file. That means, there's no two regions of bytes that are the same section.</li>
<li class="itemize_item">Sections in a file may not overlap. No byte in a file resides in more than one section.</li>
<li class="itemize_item">An object file may have inactive space. The various headers and the sections might not &ldquo;cover&rdquo; every byte in an object file. The contents of the inactive data are unspecified.</li>
</ul>
<div class="standard" id='magicparlabel-40477'>To get all the headers from an executable binary e.g. <code class="flex_code">hello</code>, use the following command:</div>



<div class="standard" id='magicparlabel-40487'><span style='font-family:monospace;'>$ readelf -S hello</span></div>


<div class="standard" id='magicparlabel-40488'><br />

</div>

<div class="standard" style='text-align: left;' id='magicparlabel-40493'>Here is a sample output (do not worry if you don't understand the output. Just skim to get your eyes familiar with it. We will dissect it soon enough):</div>



<div class="lyx_code" id='magicparlabel-40499'><div class="lyx_code_item">There are 31 section headers, starting at offset 0x19c8:</div>
<div class="lyx_code_item"></div>
<div class="lyx_code_item">Section Headers:</div>
<div class="lyx_code_item">  [Nr] Name              Type             Address           Offset</div>
<div class="lyx_code_item">       Size              EntSize          Flags  Link  Info  Align</div>
<div class="lyx_code_item">  [ 0]                   NULL             0000000000000000  00000000</div>
<div class="lyx_code_item">       0000000000000000  0000000000000000           0     0     0</div>
<div class="lyx_code_item">  [ 1] .interp           PROGBITS         0000000000400238  00000238</div>
<div class="lyx_code_item">       000000000000001c  0000000000000000   A       0     0     1</div>
<div class="lyx_code_item">  [ 2] .note.ABI-tag     NOTE             0000000000400254  00000254</div>
<div class="lyx_code_item">       0000000000000020  0000000000000000   A       0     0     4</div>
<div class="lyx_code_item">  [ 3] .note.gnu.build-i NOTE             0000000000400274  00000274</div>
<div class="lyx_code_item">       0000000000000024  0000000000000000   A       0     0     4</div>
<div class="lyx_code_item">  [ 4] .gnu.hash         GNU_HASH         0000000000400298  00000298</div>
<div class="lyx_code_item">       000000000000001c  0000000000000000   A       5     0     8</div>
<div class="lyx_code_item">  [ 5] .dynsym           DYNSYM           00000000004002b8  000002b8</div>
<div class="lyx_code_item">       0000000000000048  0000000000000018   A       6     1     8</div>
<div class="lyx_code_item">  [ 6] .dynstr           STRTAB           0000000000400300  00000300</div>
<div class="lyx_code_item">       0000000000000038  0000000000000000   A       0     0     1</div>
<div class="lyx_code_item">  [ 7] .gnu.version      VERSYM           0000000000400338  00000338</div>
<div class="lyx_code_item">       0000000000000006  0000000000000002   A       5     0     2</div>
<div class="lyx_code_item">  [ 8] .gnu.version_r    VERNEED          0000000000400340  00000340</div>
<div class="lyx_code_item">       0000000000000020  0000000000000000   A       6     1     8</div>
<div class="lyx_code_item">  [ 9] .rela.dyn         RELA             0000000000400360  00000360</div>
<div class="lyx_code_item">       0000000000000018  0000000000000018   A       5     0     8</div>
<div class="lyx_code_item">  [10] .rela.plt         RELA             0000000000400378  00000378</div>
<div class="lyx_code_item">       0000000000000018  0000000000000018  AI       5    24     8</div>
<div class="lyx_code_item">  [11] .init             PROGBITS         0000000000400390  00000390</div>
<div class="lyx_code_item">       000000000000001a  0000000000000000  AX       0     0     4</div>
<div class="lyx_code_item">  [12] .plt              PROGBITS         00000000004003b0  000003b0</div>
<div class="lyx_code_item">       0000000000000020  0000000000000010  AX       0     0     16</div>
<div class="lyx_code_item">  [13] .plt.got          PROGBITS         00000000004003d0  000003d0</div>
<div class="lyx_code_item">       0000000000000008  0000000000000000  AX       0     0     8</div>
<div class="lyx_code_item">  [14] .text             PROGBITS         00000000004003e0  000003e0</div>
<div class="lyx_code_item">       0000000000000192  0000000000000000  AX       0     0     16</div>
<div class="lyx_code_item">  [15] .fini             PROGBITS         0000000000400574  00000574</div>
<div class="lyx_code_item">       0000000000000009  0000000000000000  AX       0     0     4</div>
<div class="lyx_code_item">  [16] .rodata           PROGBITS         0000000000400580  00000580</div>
<div class="lyx_code_item">       0000000000000004  0000000000000004  AM       0     0     4</div>
<div class="lyx_code_item">  [17] .eh_frame_hdr     PROGBITS         0000000000400584  00000584</div>
<div class="lyx_code_item">       000000000000003c  0000000000000000   A       0     0     4</div>
<div class="lyx_code_item">  [18] .eh_frame         PROGBITS         00000000004005c0  000005c0</div>
<div class="lyx_code_item">       0000000000000114  0000000000000000   A       0     0     8</div>
<div class="lyx_code_item">  [19] .init_array       INIT_ARRAY       0000000000600e10  00000e10</div>
<div class="lyx_code_item">       0000000000000008  0000000000000000  WA       0     0     8</div>
<div class="lyx_code_item">  [20] .fini_array       FINI_ARRAY       0000000000600e18  00000e18</div>
<div class="lyx_code_item">       0000000000000008  0000000000000000  WA       0     0     8</div>
<div class="lyx_code_item">  [21] .jcr              PROGBITS         0000000000600e20  00000e20</div>
<div class="lyx_code_item">       0000000000000008  0000000000000000  WA       0     0     8</div>
<div class="lyx_code_item">  [22] .dynamic          DYNAMIC          0000000000600e28  00000e28</div>
<div class="lyx_code_item">       00000000000001d0  0000000000000010  WA       6     0     8</div>
<div class="lyx_code_item">  [23] .got              PROGBITS         0000000000600ff8  00000ff8</div>
<div class="lyx_code_item">       0000000000000008  0000000000000008  WA       0     0     8</div>
<div class="lyx_code_item">  [24] .got.plt          PROGBITS         0000000000601000  00001000</div>
<div class="lyx_code_item">       0000000000000020  0000000000000008  WA       0     0     8</div>
<div class="lyx_code_item">  [25] .data             PROGBITS         0000000000601020  00001020</div>
<div class="lyx_code_item">       0000000000000010  0000000000000000  WA       0     0     8</div>
<div class="lyx_code_item">  [26] .bss              NOBITS           0000000000601030  00001030</div>
<div class="lyx_code_item">       0000000000000008  0000000000000000  WA       0     0     1</div>
<div class="lyx_code_item">  [27] .comment          PROGBITS         0000000000000000  00001030</div>
<div class="lyx_code_item">       0000000000000034  0000000000000001  MS       0     0     1</div>
<div class="lyx_code_item">  [28] .shstrtab         STRTAB           0000000000000000  000018b6</div>
<div class="lyx_code_item">       000000000000010c  0000000000000000           0     0     1</div>
<div class="lyx_code_item">  [29] .symtab           SYMTAB           0000000000000000  00001068</div>
<div class="lyx_code_item">       0000000000000648  0000000000000018          30    47     8</div>
<div class="lyx_code_item">  [30] .strtab           STRTAB           0000000000000000  000016b0</div>
<div class="lyx_code_item">       0000000000000206  0000000000000000           0     0     1</div>
<div class="lyx_code_item">Key to Flags:</div>
<div class="lyx_code_item">  W (write), A (alloc), X (execute), M (merge), S (strings), l (large)</div>
<div class="lyx_code_item">  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)</div>
<div class="lyx_code_item">  O (extra OS processing required) o (OS specific), p (processor specific)</div>
</div>


<div class="standard" id='magicparlabel-40575'>The first line:</div>



<div class="lyx_code" id='magicparlabel-40581'><div class="lyx_code_item">There are 31 section headers, starting at offset 0x19c8</div>
</div>

<div class="standard" id='magicparlabel-40582'><br />

</div>

<div class="standard" style='text-align: left;' id='magicparlabel-40587'>summarizes the total number of sections in the file, and where the address where it starts. Then, comes the listing section by section with the following header, is also the format of each section output:</div>



<div class="lyx_code" id='magicparlabel-40593'><div class="lyx_code_item">[Nr] Name              Type             Address           Offset</div>
<div class="lyx_code_item">     Size              EntSize          Flags  Link  Info  Align</div>
</div>


<div class="standard" id='magicparlabel-40600'>Each section has two lines with different fields:</div>

<dl class='description' id='magicparlabel-40601'><dt class="description_label"><strong class="flex_strong"><em><span style='font-family:monospace;'>Nr</span></em></strong></dt>
<dd class="description_item"> The index of each section.</dd>
<dt class="description_label"><strong class="flex_strong"><em><span style='font-family:monospace;'>Name</span></em></strong></dt>
<dd class="description_item"> The name of each section.</dd>
<dt class="description_label"><strong class="flex_strong"><em><span style='font-family:monospace;'>Type</span></em></strong></dt>
<dd class="description_item"> This field (in a section header) identifies the type of each section. Types are used to classify sections. </dd>
<dt class="description_label"><strong class="flex_strong"><em><span style='font-family:monospace;'>Address</span></em></strong></dt>
<dd class="description_item"> The starting <em>virtual</em> address of each section. Note that the addresses are virtual only when a program runs in an OS with support for virtual memory enabled. In our OS, we run on the bare metal, the addresses will all be physical.</dd>
<dt class="description_label"><strong class="flex_strong"><em><span style='font-family:monospace;'>Offset</span></em></strong><a id='magicparlabel-40629' />
</dt>
<dd class="description_item"> is a distance in bytes, from the first byte of a file to the start of an object, such as a section or a segment in the context of an ELF binary file.</dd>
<dt class="description_label"><strong class="flex_strong"><em><span style='font-family:monospace;'>Size</span></em></strong></dt>
<dd class="description_item"> The size in bytes of each section.</dd>
<dt class="description_label"><strong class="flex_strong"><em><span style='font-family:monospace;'>EntSize</span></em></strong></dt>
<dd class="description_item"> Some sections hold a table of fixed-size entries, such as a symbol table. For such a section, this member gives the size in bytes of each entry. The member contains 0 if the section does not hold a table of fixed-size entries.</dd>
<dt class="description_label"><strong class="flex_strong"><em><span style='font-family:monospace;'>Flags</span></em></strong></dt>
<dd class="description_item"><em> </em>describes attributes of a section. Flags together with a type defines the purpose of a section. Two sections can be of the same type, but serve different purposes. For example, even though <span style='font-family:monospace;'>.data</span> and <span style='font-family:monospace;'>.text</span> share the same type, <span style='font-family:monospace;'>.data</span> holds the initialized data of a program while <span style='font-family:monospace;'>.text </span>holds executable instructions of a program. For that reason, <span style='font-family:monospace;'>.data</span> is given read and write permission, but not executable. Any attempt to execute code in <span style='font-family:monospace;'>.data</span> is denied by the running OS: in Linux, such invalid section usage gives a <em>segmentation fault</em>.
<br />


<div class="standard" id='magicparlabel-40645'>ELF gives information to enable an OS with such protection mechanism. However, running on bare metal, nothing can prevent from doing anything. Our OS can execute code in data section, and vice versa, writing to code section.</div>
</dd></dl>


<div class="standard" id='magicparlabel-40646'><div class='longtable' style='text-align: left;'><div class='longtable-caption' style='text-align: left;'><tr><td style ="width: 1cm;" align='center' valign='top' colspan='2'>
<div class="plain_layout" id='magicparlabel-40689'><span class='float-caption-Standard float-caption float-caption-standard'>Table 4:  Section Flags</span></div>
</td>
</tr></div>


<table><tbody><tr><td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40699'><b>Flag</b></div>
</td>
<td style ="width: 14cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40702'><b>Descriptions</b></div>
</td>
</tr><tr><td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40705'><span style='font-family:monospace;'>W</span></div>
</td>
<td style ="width: 14cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40708'>Bytes in this section are writable during execution.</div>
</td>
</tr><tr><td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40711'><span style='font-family:monospace;'>A</span></div>
</td>
<td style ="width: 14cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40714'>Memory is allocated for this section during process execution. Some control sections do not reside in the memory image of an object file; this attribute is off for those sections. </div>
</td>
</tr><tr><td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40717'><span style='font-family:monospace;'>X</span></div>
</td>
<td style ="width: 14cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40720'>The section contains executable instructions.</div>
</td>
</tr><tr><td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40723'><span style='font-family:monospace;'>M</span></div>
</td>
<td style ="width: 14cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40726'>The data <em>in the section</em> may be merged to eliminate duplication. Each element in the section is compared against other elements in sections with the same name, type and flags. Elements that would have identical values at program run-time may be merged. </div>
</td>
</tr><tr><td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40729'><span style='font-family:monospace;'>S</span></div>
</td>
<td style ="width: 14cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40732'>The data elements in the section consist of null-terminated character strings. The size of each character is specified in the section header's <strong class="flex_strong"><em><span style='font-family:monospace;'>EntSize</span></em></strong> field. </div>
</td>
</tr><tr><td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40739'><span style='font-family:monospace;'>l</span></div>
</td>
<td style ="width: 14cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40742'>Specific large section for x86_64 architecture. This flag is not specified in the Generic ABI but in x86_64 ABI.</div>
</td>
</tr><tr><td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40745'><span style='font-family:monospace;'>I</span></div>
</td>
<td style ="width: 14cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40748'>The <em><strong class="flex_strong"><span style='font-family:monospace;'>Info</span></strong></em> field of this section header holds an index of a section header. Otherwise, the number is the index of something else.</div>
</td>
</tr><tr><td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40755'><span style='font-family:monospace;'>L</span></div>
</td>
<td style ="width: 14cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40758'>Preserve section ordering when linking. If this section is combined with other sections in the output file, it must appear in the same relative order with respect to those sections, as the linked-to section appears with respect to sections the linked-to section is combined with. Apply when the <em><b><span style='font-family:monospace;'>Link</span></b></em><!-- Output Error: Tried to close pending tag `b' when other tags were pending. Last pending tag is `<span style='font-family:monospace;'>'. Tag discarded. -->
 field of this section's header references another section (the linked-to section)</div>
</td>
</tr><tr><td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40761'><span style='font-family:monospace;'>G</span></div>
</td>
<td style ="width: 14cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40764'>This section is a member (perhaps the only one) of a section group.</div>
</td>
</tr><tr><td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40767'><span style='font-family:monospace;'>T</span></div>
</td>
<td style ="width: 14cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40770'>This section holds <b>T</b>hread-<b>L</b>ocal<b> S</b>torage, meaning that each thread has its own distinct instance of this data. A thread is a distinct execution flow of code. A program can have multiple threads that pack different pieces of code and execute separately, at the same time. We will learn more about threads when writing our kernel.</div>
</td>
</tr><tr><td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40773'><span style='font-family:monospace;'>E</span></div>
</td>
<td style ="width: 14cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40776'>Link editor is to exclude this section from executable and shared library that it builds when those objects are not to be further relocated.</div>
</td>
</tr><tr><td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40779'><span style='font-family:monospace;'>x </span></div>
</td>
<td style ="width: 14cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40782'>Unknown flag to <span style='font-family:monospace;'>readelf</span>. It happens because the linking process can be done manually with a linker like <span style='font-family:monospace;'>GNU ld</span> (we will later later). That is, section flags can be specified manually, and some flags are for a customized ELF that the open-source<span style='font-family:monospace;'> readelf</span> doesn't know of.</div>
</td>
</tr><tr><td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40785'><span style='font-family:monospace;'>O</span></div>
</td>
<td style ="width: 14cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40788'>This section requires special OS-specific processing (beyond the standard linking rules) to avoid incorrect behavior. A link editor encounters sections whose headers contain OS-specific values it does not recognize by Type or Flags values defined by ELF standard, the link editor should combine those sections.</div>
</td>
</tr><tr><td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40791'><span style='font-family:monospace;'>o</span></div>
</td>
<td style ="width: 14cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40794'>All bits included in this flag are reserved for operating system-specific semantics.</div>
</td>
</tr><tr><td style ="width: 1cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40797'><span style='font-family:monospace;'>p</span></div>
</td>
<td style ="width: 14cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-40800'>All bits included in this flag are reserved for processor-specific semantics. If meanings are specified, the processor supplement explains them. </div>
</td>
</tr></tbody>
</table>
</div>
</div>

<dl class='description' id='magicparlabel-40801'><dt class="description_label"><strong class="flex_strong"><em><span style='font-family:monospace;'>Link&nbsp;and&nbsp;Info</span></em></strong></dt>
<dd class="description_item"><em> </em>are numbers that references the indexes of sections, symbol table entries, hash table entries. <span style='font-family:monospace;'>Link</span> field only holds the index of a section, while <span style='font-family:monospace;'>Info</span> field holds an index of a section, a symbol table entry or a hash table entry, depends on the type of a section. 
<br />


<div class="standard" id='magicparlabel-40806'>Later when writing our OS, we will handcraft the kernel image by explicitly linking the object files (produced by <span style='font-family:monospace;'>gcc</span>) through a linker script. We will specify the memory layout of sections by specifying at what addresses they will appear in the final image. But we will not assign any section flag and let the linker take care of it. Nevertheless, knowing which flag does what is useful.</div>
</dd><dt class="description_label"><strong class="flex_strong"><em><span style='font-family:monospace;'>Align</span></em></strong></dt>
<dd class="description_item"> is a value that enforces the offset of a section should be divisible by the value. Only 0 and positive integral powers of two are allowed. Values 0 and 1 mean the section has no alignment constraint.</dd>
</dl>

<div class="example" id='magicparlabel-40812'><div class="example_item"><span class="example_label">Example 0.19.</span>
Output of <span style='font-family:monospace;'>.interp</span> section:
<br />

</div>


<div class="lyx_code" id='magicparlabel-40818'><div class="lyx_code_item">[Nr] Name              Type             Address           Offset</div>
<div class="lyx_code_item">     Size              EntSize          Flags  Link  Info  Align</div>
<div class="lyx_code_item">[ 1] .interp           PROGBITS         0000000000400238  00000238</div>
<div class="lyx_code_item">     000000000000001c  0000000000000000   A       0     0     1</div>
</div>


<div class="standard" id='magicparlabel-40827'><em><span style='font-family:monospace;'>Nr</span></em> is <span style='font-family:monospace;'>1</span>.</div>

<div class="standard" id='magicparlabel-40828'><em><span style='font-family:monospace;'>Type</span></em> is <span style='font-family:monospace;'>PROGBITS</span>, which means this section is part of the program.</div>

<div class="standard" id='magicparlabel-40829'><em><span style='font-family:monospace;'>Address</span></em> is <span style='font-family:monospace;'>0x0000000000400238</span>, which means the program is loaded at this virtual memory address at runtime.</div>

<div class="standard" id='magicparlabel-40830'><em><span style='font-family:monospace;'>Offset</span></em> is <span style='font-family:monospace;'>0x00000238</span> <em>bytes</em> into file.</div>

<div class="standard" id='magicparlabel-40831'><em><span style='font-family:monospace;'>Size</span></em> is <span style='font-family:monospace;'>0x000000000000001c</span> in bytes.</div>

<div class="standard" id='magicparlabel-40832'><em><span style='font-family:monospace;'>EntSize</span></em> is <span style='font-family:monospace;'>0</span>, which means this section does not have any fixed-size entry.</div>

<div class="standard" id='magicparlabel-40833'><em><span style='font-family:monospace;'>Flags</span></em> are <span style='font-family:monospace;'>A</span> (Allocatable), which means this section consumes memory at runtime.</div>

<div class="standard" id='magicparlabel-40834'><em><span style='font-family:monospace;'>Info</span></em><span style='font-family:monospace;'> and Link</span> are <span style='font-family:monospace;'>0</span> and <span style='font-family:monospace;'>0</span>, which means this section links to no section or entry in any table.</div>

<div class="standard" id='magicparlabel-40835'><em><span style='font-family:monospace;'>Align</span></em> is <span style='font-family:monospace;'>1</span>, which means no alignment.</div>
</div>

<div class="standard" id='magicparlabel-40836'><br />

</div>

<div class="example" id='magicparlabel-40837'><div class="example_item"><span class="example_label">Example 0.20.</span>
Output of the <span style='font-family:monospace;'>.text</span> section:
<br />

</div>


<div class="lyx_code" id='magicparlabel-40843'><div class="lyx_code_item">[14] .text             PROGBITS         00000000004003e0  000003e0</div>
<div class="lyx_code_item">       0000000000000192  0000000000000000  AX       0     0     16</div>
</div>


<div class="standard" id='magicparlabel-40850'><em><span style='font-family:monospace;'>Nr</span></em> is <span style='font-family:monospace;'>14</span>.</div>

<div class="standard" id='magicparlabel-40851'><em><span style='font-family:monospace;'>Type</span></em> is <span style='font-family:monospace;'>PROGBITS</span>, which means this section is part of the program.</div>

<div class="standard" id='magicparlabel-40852'><em><span style='font-family:monospace;'>Address</span></em> is <span style='font-family:monospace;'>0x00000000004003e0</span>, which means the program is loaded at this virtual memory address at runtime.</div>

<div class="standard" id='magicparlabel-40853'><em><span style='font-family:monospace;'>Offset</span></em> is <span style='font-family:monospace;'>0x000003e0</span> <em>bytes</em> into file.</div>

<div class="standard" id='magicparlabel-40854'><em><span style='font-family:monospace;'>Size</span></em> is <span style='font-family:monospace;'>0x0000000000000192</span> in bytes.</div>

<div class="standard" id='magicparlabel-40855'><em><span style='font-family:monospace;'>EntSize</span></em> is <span style='font-family:monospace;'>0</span>, which means this section does not have any fixed-size entry.</div>

<div class="standard" id='magicparlabel-40856'><em><span style='font-family:monospace;'>Flags</span></em> are <span style='font-family:monospace;'>A</span> (Allocatable) and <span style='font-family:monospace;'>X</span> (Executable), which means this section consumes memory and can be executed as code at runtime.</div>

<div class="standard" id='magicparlabel-40857'><em><span style='font-family:monospace;'>Info</span></em><span style='font-family:monospace;'> and Link</span> are <span style='font-family:monospace;'>0</span> and <span style='font-family:monospace;'>0</span>, which means this section links to no section or entry in any table.</div>

<div class="standard" id='magicparlabel-40858'><em><span style='font-family:monospace;'>Align</span></em> is <span style='font-family:monospace;'>16</span>, which means the starting address of the section should be divisible by <span style='font-family:monospace;'>16</span>, or <span style='font-family:monospace;'>0x10</span>. Indeed, it is: <math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mstyle mathvariant='monospace'>
   <mrow><mn>0</mn><mi>x</mi><mn>3</mn><mi>e</mi><mn>0</mn><mo>/</mo><mn>0</mn><mi>x</mi><mn>10</mn><mo>=</mo><mn>0</mn><mi>x</mi><mn>3</mn><mi>e</mi>
   </mrow>
  </mstyle>
 </mrow></math>. </div>
</div>
<div class="section" id='magicparlabel-40859'>Understand Section in-depth</div>
<div class="standard" id='magicparlabel-40860'>In this section, we will learn different details of section types and the purposes of special sections e.g. <span style='font-family:monospace;'>.bss, .text, .data</span>, etc, by looking at each section one by one. We will also examine the content of each section as a hexdump with the commands:</div>



<div class="standard" id='magicparlabel-40866'><span style='font-family:monospace;'>$ readelf -x &lt;section name|section number&gt; &lt;file&gt;</span></div>



<div class="standard" id='magicparlabel-40872'>For example, if you want to examine the content of section with index 25 (the <span style='font-family:monospace;'>.bss</span> section in the sample output) in the file <span style='font-family:monospace;'>hello</span>:</div>



<div class="standard" id='magicparlabel-40878'><span style='font-family:monospace;'>$ readelf -x 25 hello</span></div>



<div class="standard" id='magicparlabel-40884'>Equivalently, using name instead of index works:</div>



<div class="standard" id='magicparlabel-40890'><span style='font-family:monospace;'>$ readelf -x .data hello</span></div>



<div class="standard" id='magicparlabel-40896'>If a section contains strings e.g. string symbol table, the flag <span style='font-family:monospace;'>-x </span>can be replaced with<span style='font-family:monospace;'> -p</span>.</div>

<dl class='description' id='magicparlabel-40897'><dt class="description_label"><strong class="flex_strong"><span style='font-family:monospace;'>NULL</span></strong></dt>
<dd class="description_item"> marks a section header as inactive and does not have an associated section. <span style='font-family:monospace;'>NULL</span> section is always the first entry of section header table. It means, any useful section starts from 1.
<br />



<div class="example" id='magicparlabel-40902'><div class="example_item"><span class="example_label">Example 0.21.</span>
The sample output of <span style='font-family:monospace;'>NULL</span> section:
<br />

</div>


<div class="lyx_code" id='magicparlabel-40908'><div class="lyx_code_item">[Nr] Name             Type             Address           Offset</div>
<div class="lyx_code_item">     Size             EntSize          Flags  Link  Info  Align</div>
<div class="lyx_code_item">[ 0]                  NULL             0000000000000000 00000000</div>
<div class="lyx_code_item">     0000000000000000 0000000000000000           0     0     0</div>
</div>

</div>
<div class="standard" id='magicparlabel-40917'>Examining the content, the section is empty:</div>



<div class="lyx_code" id='magicparlabel-40923'><div class="lyx_code_item"> Section '' has no data to dump.</div>
</div>

</dd><dt class="description_label"><strong class="flex_strong"><span style='font-family:monospace;'>NOTE</span></strong></dt>
<dd class="description_item"> marks a section with special information that other programs will check for conformance, compatibility, etc, by a vendor or a system builder.
<br />



<div class="example" id='magicparlabel-40934'><div class="example_item"><span class="example_label">Example 0.22.</span>
In the sample output, we have 2 <span style='font-family:monospace;'>NOTE</span> sections:
<br />

</div>


<div class="lyx_code" id='magicparlabel-40940'><div class="lyx_code_item">[Nr] Name              Type             Address           Offset</div>
<div class="lyx_code_item">     Size              EntSize          Flags  Link  Info  Align</div>
<div class="lyx_code_item">[ 2] .note.ABI-tag     NOTE             0000000000400254  00000254</div>
<div class="lyx_code_item">     0000000000000020  0000000000000000   A       0     0     4</div>
<div class="lyx_code_item">[ 3] .note.gnu.build-i NOTE             0000000000400274  00000274          </div>
<div class="lyx_code_item">     0000000000000024  0000000000000000   A       0     0     4</div>
</div>

</div>
<div class="standard" id='magicparlabel-40951'>Examine 2nd section with the command:</div>



<div class="standard" id='magicparlabel-40957'><span style='font-family:monospace;'>$ readelf -x 2 hello</span></div>



<div class="standard" id='magicparlabel-40963'>we have:</div>



<div class="lyx_code" id='magicparlabel-40969'><div class="lyx_code_item">Hex dump of section '.note.ABI-tag':</div>
<div class="lyx_code_item">  0x00400254 04000000 10000000 01000000 474e5500 ............GNU.</div>
<div class="lyx_code_item">  0x00400264 00000000 02000000 06000000 20000000 ............ ...</div>
</div>

</dd><dt class="description_label"><strong class="flex_strong"><span style='font-family:monospace;'>PROGBITS</span></strong></dt>
<dd class="description_item"> indicates a section holding the main content of a program, either code or data.
<br />



<div class="example" id='magicparlabel-40982'><div class="example_item"><span class="example_label">Example 0.23.</span>
There are many PROGBITS sections:
<br />

</div>


<div class="lyx_code" id='magicparlabel-40988'><div class="lyx_code_item">  [Nr] Name              Type             Address           Offset</div>
<div class="lyx_code_item">       Size              EntSize          Flags  Link  Info  Align</div>
<div class="lyx_code_item">  [ 1] .interp           PROGBITS         0000000000400238  00000238</div>
<div class="lyx_code_item">       000000000000001c  0000000000000000   A       0     0     1</div>
<div class="lyx_code_item">  ...</div>
<div class="lyx_code_item">  [11] .init             PROGBITS         0000000000400390  00000390</div>
<div class="lyx_code_item">       000000000000001a  0000000000000000  AX       0     0     4</div>
<div class="lyx_code_item">  [12] .plt              PROGBITS         00000000004003b0  000003b0</div>
<div class="lyx_code_item">       0000000000000020  0000000000000010  AX       0     0     16</div>
<div class="lyx_code_item">  [13] .plt.got          PROGBITS         00000000004003d0  000003d0</div>
<div class="lyx_code_item">       0000000000000008  0000000000000000  AX       0     0     8</div>
<div class="lyx_code_item">  [14] .text             PROGBITS         00000000004003e0  000003e0</div>
<div class="lyx_code_item">       0000000000000192  0000000000000000  AX       0     0     16</div>
<div class="lyx_code_item">  [15] .fini             PROGBITS         0000000000400574  00000574</div>
<div class="lyx_code_item">       0000000000000009  0000000000000000  AX       0     0     4</div>
<div class="lyx_code_item">  [16] .rodata           PROGBITS         0000000000400580  00000580</div>
<div class="lyx_code_item">       0000000000000004  0000000000000004  AM       0     0     4</div>
<div class="lyx_code_item">  [17] .eh_frame_hdr     PROGBITS         0000000000400584  00000584</div>
<div class="lyx_code_item">       000000000000003c  0000000000000000   A       0     0     4</div>
<div class="lyx_code_item">  [18] .eh_frame         PROGBITS         00000000004005c0  000005c0</div>
<div class="lyx_code_item">       0000000000000114  0000000000000000   A       0     0     8</div>
<div class="lyx_code_item">  ...</div>
<div class="lyx_code_item">  [23] .got              PROGBITS         0000000000600ff8  00000ff8</div>
<div class="lyx_code_item">       0000000000000008  0000000000000008  WA       0     0     8</div>
<div class="lyx_code_item">  [24] .got.plt          PROGBITS         0000000000601000  00001000</div>
<div class="lyx_code_item">       0000000000000020  0000000000000008  WA       0     0     8</div>
<div class="lyx_code_item">  [25] .data             PROGBITS         0000000000601020  00001020</div>
<div class="lyx_code_item">       0000000000000010  0000000000000000  WA       0     0     8</div>
<div class="lyx_code_item">  [27] .comment          PROGBITS         0000000000000000  00001030</div>
<div class="lyx_code_item">       0000000000000034  0000000000000001  MS       0     0     1</div>
</div>

<div class="standard" id='magicparlabel-41018'><br />

</div>
</div>
<div class="standard" style='text-align: left;' id='magicparlabel-41023'>For our operating system, we only need the following section:</div>

<dl class='description' id='magicparlabel-41024'><dt class="description_label">.text
<br />

</dt>
<dd class="description_item">
<div class="standard" id='magicparlabel-41025'>This section holds all the compiled code of a program. </div>
</dd><dt class="description_label">.data
<br />

</dt>
<dd class="description_item">
<div class="standard" id='magicparlabel-41027'>This section holds the initialized data of a program. Since the data are initialized with actual values, <span style='font-family:monospace;'>gcc </span>allocates the section with actual byte in the executable binary.</div>
</dd><dt class="description_label">.rodata
<br />

</dt>
<dd class="description_item">
<div class="standard" id='magicparlabel-41029'>This section holds read-only data, such as fixed-size strings in a program, e.g. &ldquo;Hello World&rdquo;, and others.</div>
</dd><dt class="description_label">.bss
<br />

</dt>
<dd class="description_item">
<div class="standard" id='magicparlabel-41031'>This section, shorts for <em><b>B</b>lock <b>S</b>tarted by <b>S</b>ymbol</em>, holds uninitialized data of a program. Unlike other sections, no space is allocated for this section in the image of the executable binary on disk. The section is allocated only when the program is loaded into main memory.
<br />

</div>
</dd></dl>
<div class="standard" style='text-align: left;' id='magicparlabel-41032'>Other sections are mainly needed for dynamic linking, that is code linking at runtime for sharing between many programs. To enable such feature, an OS as a runtime environment must be presented. Since we run our OS on bare metal, we are effectively creating such environment. For simplicity, we won't add dynamic linking to our OS.</div>
</dd><dt class="description_label"><strong class="flex_strong"><span style='font-family:monospace;'>SYMTAB&nbsp;and&nbsp;DYNSYM</span></strong></dt>
<dd class="description_item"> These sections hold symbol table. A <em>symbol table</em> is an array of entries that describe symbols in a program. A <em>symbol </em>is a name assigned to an entity in a program. The types of these entities are also the types of symbols, and these are the possible types of an entity:
<br />



<div class="example" id='magicparlabel-41038'><div class="example_item"><span class="example_label">Example 0.24.</span>
In the sample output, section 5 and 29 are symbol tables:
<br />

</div>


<div class="lyx_code" id='magicparlabel-41044'><div class="lyx_code_item">[Nr] Name              Type             Address           Offset</div>
<div class="lyx_code_item">     Size              EntSize          Flags  Link  Info  Align</div>
<div class="lyx_code_item">[ 5] .dynsym           DYNSYM           00000000004002b8  000002b8</div>
<div class="lyx_code_item">     0000000000000048  0000000000000018   A       6     1     8</div>
<div class="lyx_code_item">...</div>
<div class="lyx_code_item">[29] .symtab           SYMTAB           0000000000000000  00001068</div>
<div class="lyx_code_item">     0000000000000648  0000000000000018          30    47     8</div>
</div>


<div class="standard" id='magicparlabel-41056'>To show the symbol table:</div>



<div class="standard" id='magicparlabel-41062'><span style='font-family:monospace;'>$ readelf -s hello</span></div>



<div class="standard" id='magicparlabel-41068'>Output consists of 2 symbol tables, corresponding to the two sections above, <span style='font-family:monospace;'>.dynsym </span>and <span style='font-family:monospace;'>.symtab</span>:</div>



<div class="lyx_code" id='magicparlabel-41074'><div class="lyx_code_item"><span style='font-size:small;'>Symbol table '.dynsym' contains 4 entries:</span></div>
<div class="lyx_code_item"><span style='font-size:small;'>   Num:    Value          Size Type    Bind   Vis      Ndx Name</span></div>
<div class="lyx_code_item"><span style='font-size:small;'>     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND </span></div>
<div class="lyx_code_item"><span style='font-size:small;'>     1: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND puts@GLIBC_2.2.5 (2)</span></div>
<div class="lyx_code_item"><span style='font-size:small;'>     2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@GLIBC_2.2.5 (2)</span></div>
<div class="lyx_code_item"><span style='font-size:small;'>     3: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__</span></div>
<div class="lyx_code_item"><span style='font-size:small;'>Symbol table '.symtab' contains 67 entries:</span></div>
<div class="lyx_code_item"><span style='font-size:small;'>   Num:    Value          Size Type    Bind   Vis      Ndx Name</span></div>
<div class="lyx_code_item"><span style='font-size:small;'>    ..........................................</span></div>
<div class="lyx_code_item"><span style='font-size:small;'>    59: 0000000000601040     0 NOTYPE  GLOBAL DEFAULT   26 _end</span></div>
<div class="lyx_code_item"><span style='font-size:small;'>    60: 0000000000400430    42 FUNC    GLOBAL DEFAULT   14 _start</span></div>
<div class="lyx_code_item"><span style='font-size:small;'>    61: 0000000000601038     0 NOTYPE  GLOBAL DEFAULT   26 __bss_start</span></div>
<div class="lyx_code_item"><span style='font-size:small;'>    62: 0000000000400526    32 FUNC    GLOBAL DEFAULT   14 main</span></div>
<div class="lyx_code_item"><span style='font-size:small;'>    63: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses</span></div>
<div class="lyx_code_item"><span style='font-size:small;'>    64: 0000000000601038     0 OBJECT  GLOBAL HIDDEN    25 __TMC_END__</span></div>
<div class="lyx_code_item"><span style='font-size:small;'>    65: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable</span></div>
<div class="lyx_code_item"><span style='font-size:small;'>    66: 00000000004003c8     0 FUNC    GLOBAL DEFAULT   11 _init</span></div>
</div>

</div>

<dl class='description' id='magicparlabel-41096'><dt class="description_label">TLS	The</dt>
<dd class="description_item"> symbol is associated with a Thread-Local Storage entity.</dd>
<dt class="description_label">Num</dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>is the index of an entry in a table.</dd>
<dt class="description_label">Value</dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>is the virtual memory address where the symbol is located.</dd>
<dt class="description_label">Size</dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>is the size of the entity associated with a symbol.</dd>
<dt class="description_label">Type</dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>is a symbol type according to table.
<br />



<dl class='description' id='magicparlabel-41101'><dt class="description_label">NOTYPE</dt>
<dd class="description_item"> The type of a symbol is not specified. </dd>
<dt class="description_label">OBJECT	The</dt>
<dd class="description_item"> symbol is associated with a data object. In C, any variable definition is of <span style='font-family:monospace;'>OBJECT</span> type.</dd>
<dt class="description_label">FUNC</dt>
<dd class="description_item"> The symbol is associated with a function or other executable code. </dd>
<dt class="description_label">SECTION	The</dt>
<dd class="description_item"> symbol is associated with a section, and exists primarily for relocation.</dd>
<dt class="description_label">FILE</dt>
<dd class="description_item"> The symbol is the name of a source file associated with an executable binary.</dd>
<dt class="description_label">COMMON	The</dt>
<dd class="description_item"> symbol labels an uninitialized variable. That is, when a variable in C is defined as global variable without an initial value, or as an external variable using the extern keyword. In other words, these variables stay in <span style='font-family:monospace;'>.bss</span> section.</dd>
</dl>
</dd><dt class="description_label">Bind</dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>is the scope of a symbol. 
<br />



<dl class='description' id='magicparlabel-41108'><dt class="description_label"><strong class="flex_strong">LOCAL</strong></dt>
<dd class="description_item"> are symbols that are only visible in the object files that defined them. In C, the <span style='font-family:monospace;'>static </span>modifier marks a symbol (e.g. a variable/function) as local to only the file that defines it.
<br />



<div class="example" id='magicparlabel-41113'><div class="example_item"><span class="example_label">Example 0.25.</span>
If we define variables and functions with <span style='font-family:monospace;'>static</span> modifer:
<br />

</div>

<div class='float-listings'><pre class ='listings'>static int global_static_var = 0;

static void local_func() {
}

int main(int argc, char *argv[])
{
    static int local_static_var = 0;

    return 0;
}</pre></div>

<div class="example_item">Then we get the <span style='font-family:monospace;'>static</span> variables listed as local symbols after compiling:
<br />

</div>


<div class="standard" id='magicparlabel-41135'><span style='font-family:monospace;'>$ gcc -m32 hello.c -o hello</span></div>

<div class="standard" id='magicparlabel-41136'><span style='font-family:monospace;'>$ readelf -s hello</span></div>





<div class="lyx_code" id='magicparlabel-41147'><div class="lyx_code_item">Symbol table '.dynsym' contains 5 entries:</div>
<div class="lyx_code_item">   Num:    Value  Size Type    Bind   Vis      Ndx Name</div>
<div class="lyx_code_item">     0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND </div>
<div class="lyx_code_item">     1: 00000000     0 FUNC    GLOBAL DEFAULT  UND puts@GLIBC_2.0 (2)</div>
<div class="lyx_code_item">     2: 00000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__</div>
<div class="lyx_code_item">     3: 00000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@GLIBC_2.0 (2)</div>
<div class="lyx_code_item">     4: 080484bc     4 OBJECT  GLOBAL DEFAULT   16 _IO_stdin_used</div>
<div class="lyx_code_item">Symbol table '.symtab' contains 72 entries:</div>
<div class="lyx_code_item">   Num:    Value  Size Type    Bind   Vis      Ndx Name</div>
<div class="lyx_code_item">     0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND 
<br />

</div>

<div class="lyx_code" id='magicparlabel-41157'><div class="lyx_code_item">      ......... output omitted .........</div>
</div>
<div class="lyx_code_item">    38: 0804a020     4 OBJECT  LOCAL  DEFAULT   26 global_static_var</div>
<div class="lyx_code_item">    39: 0804840b     6 FUNC    LOCAL  DEFAULT   14 local_func</div>
<div class="lyx_code_item">    40: 0804a024     4 OBJECT  LOCAL  DEFAULT   26 local_static_var.1938</div>
<div class="lyx_code_item"> ......... output omitted .........</div>
</div>

</div>
</dd><dt class="description_label"><strong class="flex_strong">GLOBAL</strong>	are</dt>
<dd class="description_item"> symbols that are accessible by other object files when linking together. These symbols are primarily non-<span style='font-family:monospace;'>static</span> functions and non-<span style='font-family:monospace;'>static</span> global data. The <span style='font-family:monospace;'>extern</span> modifier marks a symbol as externally defined elsewhere but is accessible in the final executable binary, so an <span style='font-family:monospace;'>extern</span> variable is also considered <span style='font-family:monospace;'>GLOBAL</span>.
<br />



<div class="example" id='magicparlabel-41172'><div class="example_item"><span class="example_label">Example 0.26.</span>
Similar to the <span style='font-family:monospace;'>LOCAL</span> example above, the output lists many <span style='font-family:monospace;'>GLOBAL</span> symbols such as <span style='font-family:monospace;'>main</span>:
<br />

</div>

<div class="lyx_code" id='magicparlabel-41173'><div class="lyx_code_item">Num:    Value  Size Type    Bind   Vis      Ndx Name</div>
<div class="lyx_code_item">......... output omitted .........</div>
<div class="lyx_code_item"> 66: 080483e1    10 FUNC    GLOBAL DEFAULT   14 main</div>
<div class="lyx_code_item">......... output omitted .........</div>
</div>
</div>
</dd><dt class="description_label"><strong class="flex_strong">WEAK</strong></dt>
<dd class="description_item"> are symbols whose definitions can be redefined. Normally, a symbol with multiple definitions are reported as an error by a compiler. However, this constraint is lax when a definition is explicitly marked as weak, which means the default implementation can be replaced by a different definition at link time.
<br />



<div class="example" id='magicparlabel-41182'><div class="example_item"><span class="example_label">Example 0.27.</span>
Suppose we have a default implementation of the function <span style='font-family:monospace;'>add</span>:
<br />

</div>

<div class='float-listings'><pre class ='listings C'>#include &lt;stdio.h&gt;

__attribute__((weak)) int add(int a, int b) {
    printf("warning: function is not implemented.\n");
    return 0;
}

int main(int argc, char *argv[])
{
    printf("add(1,2) is %d\n", add(1,2));
    return 0;
}</pre></div>


<div class="standard" id='magicparlabel-41199'><span style='font-family:monospace;'>__attribute__((weak))</span> is a <div class="marginal"><div class="plain_layout" id='magicparlabel-41203'><em><b>function attribute</b></em></div>
</div>function attribute. A <em><a id='magicparlabel-41207' />
function attribute</em> is extra information for a compiler to handle a function differently from a normal function. In this example, <span style='font-family:monospace;'>weak</span> attribute makes the function <span style='font-family:monospace;'>add </span>a weak function,which means the default implementation can be replaced by a different definition at link time. Function attribute is a feature of a compiler, not standard C.</div>

<div class="standard" id='magicparlabel-41208'>If we do not supply a different function definition in a different file (must be in a different file, otherwise <span style='font-family:monospace;'>gcc</span> reports as an error), then the default implementation is applied. When the function <span style='font-family:monospace;'>add</span> is called, it only prints the message: <span style='font-family:monospace;'>"warning: function not implemented"</span>and returns 0:</div>



<div class="standard" id='magicparlabel-41214'><span style='font-family:monospace;'>$ ./hello </span></div>

<div class="standard" id='magicparlabel-41215'><span style='font-family:monospace;'>warning: function is not implemented.</span></div>

<div class="standard" id='magicparlabel-41216'><span style='font-family:monospace;'>add(1,2) is 0</span></div>



<div class="standard" id='magicparlabel-41222'>However, if we supply a different definition in another file e.g. <span style='font-family:monospace;'>math.c</span>:</div>


<div class="standard" id='magicparlabel-41223'><br />

</div>
<div class='float-listings'><pre class ='listings C'>int add(int a, int b) {
    return a + b;
}</pre></div>


<div class="standard" style='text-align: left;' id='magicparlabel-41230'>and compile the two files together:</div>



<div class="standard" id='magicparlabel-41236'><span style='font-family:monospace;'>$ gcc math.c hello.c -o hello</span></div>



<div class="standard" id='magicparlabel-41242'>Then, when running <span style='font-family:monospace;'>hello</span>, no warning message is printed and the correct value is returned.</div>

<div class="standard" id='magicparlabel-41243'>Weak symbol is a mechanism to provide a default implementation, but replaceable when a better implementation is available (e.g. more specialized and optimized) at link-time.</div>
</div>
</dd></dl>
</dd><dt class="description_label">Vis</dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>is the visibility of a symbol. The following values are available:
<br />




<div class="standard" id='magicparlabel-41245'><div class='longtable' style='text-align: center;'><div class='longtable-caption' style='text-align: center;'><tr><td style ="width: 2.5cm;" align='center' valign='top' colspan='2'>
<div class="plain_layout" id='magicparlabel-41266'><span class='float-caption-Standard float-caption float-caption-standard'>Table 5:  Symbol Visibility</span></div>
</td>
</tr></div>


<table><tbody><tr><td style ="width: 2.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-41276'><b>Value</b></div>
</td>
<td style ="width: 13.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-41279'><b>Description</b></div>
</td>
</tr><tr><td style ="width: 2.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-41282'><span style='font-family:monospace;'>DEFAULT</span></div>
</td>
<td style ="width: 13.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-41285'>The visibility is specified by the binding type of asymbol. </div>

<ul class="itemize" id='magicparlabel-41286'><li class="itemize_item">Global and weak symbols are visible outside of their defining component (executable file or shared object).</li>
<li class="itemize_item">Local symbols are hidden. See <span style='font-family:monospace;'>HIDDEN</span> below.</li>
</ul>
</td>
</tr><tr><td style ="width: 2.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-41290'><span style='font-family:monospace;'>HIDDEN</span></div>
</td>
<td style ="width: 13.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-41293'>A symbol is hidden when the name is not visible to any other program outside of its running program.</div>
</td>
</tr><tr><td style ="width: 2.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-41296'><span style='font-family:monospace;'>PROTECTED</span></div>
</td>
<td style ="width: 13.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-41299'>A symbol is protected when it is shared outside of its running program or shared libary and cannot be overridden. That is, there can only be one definition for this symbol across running programs that use it. No program can define its own definition of the same symbol.</div>
</td>
</tr><tr><td style ="width: 2.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-41302'><span style='font-family:monospace;'>INTERNAL</span></div>
</td>
<td style ="width: 13.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-41305'>Visibility is processor-specific and is defined by processor-specific ABI. </div>
</td>
</tr></tbody>
</table>
</div>
</div>
</dd><dt class="description_label">Ndx</dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>is the index of a section that the symbol is in. Aside from fixed index numbers that represent section indexes, index has these special values:
<br />




<div class="standard" id='magicparlabel-41307'><div class='longtable' style='text-align: center;'><div class='longtable-caption' style='text-align: center;'><tr><td style ="width: 2cm;" align='center' valign='top' colspan='2'>
<div class="plain_layout" id='magicparlabel-41332'><span class='float-caption-Standard float-caption float-caption-standard'>Table 6:  Symbol Index</span></div>
</td>
</tr></div>


<table><tbody><tr><td style ="width: 2cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-41342'><b>Value</b></div>
</td>
<td style ="width: 14cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-41345'><b>Description</b></div>
</td>
</tr><tr><td style ="width: 2cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-41348'><span style='font-family:monospace;'>ABS</span></div>
</td>
<td style ="width: 14cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-41351'>The index will not be changed by any symbol relocation.</div>
</td>
</tr><tr><td style ="width: 2cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-41354'><span style='font-family:monospace;'>COM</span></div>
</td>
<td style ="width: 14cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-41357'>The index refers to an unallocated common block.</div>
</td>
</tr><tr><td style ="width: 2cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-41360'><span style='font-family:monospace;'>UND</span></div>
</td>
<td style ="width: 14cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-41363'>The symbol is undefined in the current object file, which means the symbol depends on the actual definition in another file. Undefined symbols appears when the object file refers to symbols that are available at runtime, from shared library. </div>
</td>
</tr><tr><td style ="width: 2cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-41366'><span style='font-family:monospace;'>LORESERVE</span></div>

<div class="plain_layout" id='magicparlabel-41367'><span style='font-family:monospace;'>HIRESERVE</span></div>
</td>
<td style ="width: 14cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-41370'><span style='font-family:monospace;'>LORESERVE</span> is the lower boundary of the reserve indexes. Its value is <span style='font-family:monospace;'>0xff00</span>.</div>

<div class="plain_layout" id='magicparlabel-41371'><span style='font-family:monospace;'>HIREVERSE</span> is the upper boundary of the reserve indexes. Its value is <span style='font-family:monospace;'>0xffff</span>.</div>

<div class="plain_layout" id='magicparlabel-41372'>The operating system reserves exclusive indexes between <span style='font-family:monospace;'>LORESERVE</span> and <span style='font-family:monospace;'>HIRESERVE</span>, which do not map to any actual section header.</div>
</td>
</tr><tr><td style ="width: 2cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-41375'><span style='font-family:monospace;'>XINDEX</span></div>
</td>
<td style ="width: 14cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-41378'>The index is larger than <span style='font-family:monospace;'>LORESERVE</span>. The actual value will be contained in the section <span style='font-family:monospace;'>SYMTAB_SHNDX</span>, where each entry is a mapping between a symbol, whose <span style='font-family:monospace;'>Ndx</span> field is a <span style='font-family:monospace;'>XINDEX</span> value, and the actual index value.</div>
</td>
</tr><tr><td style ="width: 2cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-41381'>Others</div>
</td>
<td style ="width: 14cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-41384'>Sometimes, values such as <span style='font-family:monospace;'>ANSI_COM</span>, <span style='font-family:monospace;'>LARGE_COM</span>, <span style='font-family:monospace;'>SCOM</span>, <span style='font-family:monospace;'>SUND </span>appear. This means that the index is processor-specific.</div>
</td>
</tr></tbody>
</table>
</div>
</div>
</dd><dt class="description_label">Name</dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>is the symbol name.</dd>
</dl>

<div class="example" id='magicparlabel-41386'><div class="example_item"><span class="example_label">Example 0.28.</span>
A C application program always starts from symbol <span style='font-family:monospace;'>main</span>. The entry for <span style='font-family:monospace;'>main</span> in the symbol table in <span style='font-family:monospace;'>.symtab</span> section is:
<br />

</div>


<div class="lyx_code" id='magicparlabel-41392'><div class="lyx_code_item">Num:                Value  Size Type    Bind   Vis      Ndx Name</div>
<div class="lyx_code_item"> 62:     0000000000400526    32 FUNC    GLOBAL DEFAULT   14 main</div>
</div>

</div>
<div class="standard" id='magicparlabel-41399'>The entry shows that:</div>

<ul class="itemize" id='magicparlabel-41400'><li class="itemize_item"><span style='font-family:monospace;'>main</span> is the 62<sup class="script_superscript">th</sup> entry in the table.</li>
<li class="itemize_item"><span style='font-family:monospace;'>main </span>starts at address <span style='font-family:monospace;'>0x0000000000400526</span>.</li>
<li class="itemize_item"><span style='font-family:monospace;'>main </span>consumes 32 bytes.</li>
<li class="itemize_item"><span style='font-family:monospace;'>main </span>is a function.</li>
<li class="itemize_item"><span style='font-family:monospace;'>main </span>is in global scope.</li>
<li class="itemize_item"><span style='font-family:monospace;'>main </span>is visible to other object files that use it.</li>
<li class="itemize_item"><span style='font-family:monospace;'>main </span>is inside the 14<sup class="script_superscript">th</sup> section, which is <span style='font-family:monospace;'>.text</span>. This is logical, since <span style='font-family:monospace;'>.text</span> holds all program code.</li>
</ul>
</dd><dt class="description_label"><strong class="flex_strong"><span style='font-family:monospace;'>STRTAB</span></strong></dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>hold a table of null-terminated strings, called <em>string table</em>. The first and last byte of this section is always a NULL character. A string table section exists because a string can be reused by more than one section to represent symbol and section names, so a program like <span style='font-family:monospace;'>readelf</span> or <span style='font-family:monospace;'>objdump</span> can display various objects in a program, e.g. variable, functions, section names, in a human-readable text instead of its raw hex address.
<br />



<div class="example" id='magicparlabel-41420'><div class="example_item"><span class="example_label">Example 0.29.</span>
In the sample output, section <span style='font-family:monospace;'>28</span> and <span style='font-family:monospace;'>30</span> are of <span style='font-family:monospace;'>STRTAB</span> type:
<br />

</div>


<div class="lyx_code" id='magicparlabel-41426'><div class="lyx_code_item">[Nr] Name              Type             Address           Offset</div>
<div class="lyx_code_item">     Size              EntSize          Flags  Link  Info  Align</div>
<div class="lyx_code_item">[28] .shstrtab         STRTAB           0000000000000000  000018b6</div>
<div class="lyx_code_item">     000000000000010c  0000000000000000           0     0     1</div>
<div class="lyx_code_item">[30] .strtab           STRTAB           0000000000000000  000016b0</div>
<div class="lyx_code_item">     0000000000000206  0000000000000000           0     0     1</div>
</div>

</div>

<dl class='description' id='magicparlabel-41437'><dt class="description_label">.shstrtab</dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>holds all the section names.</dd>
<dt class="description_label">.strtab</dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>holds the symbols e.g. variable names, function names, struct names, etc., in a C program, but not fixed-size null-terminated C strings; the C strings are kept in <span style='font-family:monospace;'>.rodata</span> section.</dd>
</dl>

<div class="example" id='magicparlabel-41439'><div class="example_item"><span class="example_label">Example 0.30.</span>
Strings in those<span style='font-family:monospace;'> </span>section can be inspected with the command:
<br />

</div>


<div class="standard" id='magicparlabel-41445'><span style='font-family:monospace;'>$ readelf -p 29 hello</span></div>



<div class="standard" id='magicparlabel-41451'>The output shows all the section names, with the offset (also the string index) into <span style='font-family:monospace;'>.shstrtab</span> the table to the left:</div>



<div class="lyx_code" id='magicparlabel-41457'><div class="lyx_code_item">String dump of section '.shstrtab':  </div>
<div class="lyx_code_item">  [     1]  .symtab</div>
<div class="lyx_code_item">  [     9]  .strtab</div>
<div class="lyx_code_item">  [    11]  .shstrtab</div>
<div class="lyx_code_item">  [    1b]  .interp</div>
<div class="lyx_code_item">  [    23]  .note.ABI-tag</div>
<div class="lyx_code_item">  [    31]  .note.gnu.build-id</div>
<div class="lyx_code_item">  [    44]  .gnu.hash</div>
<div class="lyx_code_item">  [    4e]  .dynsym</div>
<div class="lyx_code_item">  [    56]  .dynstr</div>
<div class="lyx_code_item">  [    5e]  .gnu.version</div>
<div class="lyx_code_item">  [    6b]  .gnu.version_r</div>
<div class="lyx_code_item">  [    7a]  .rela.dyn</div>
<div class="lyx_code_item">  [    84]  .rela.plt</div>
<div class="lyx_code_item">  [    8e]  .init</div>
<div class="lyx_code_item">  [    94]  .plt.got</div>
<div class="lyx_code_item">  [    9d]  .text</div>
<div class="lyx_code_item">  [    a3]  .fini</div>
<div class="lyx_code_item">  [    a9]  .rodata</div>
<div class="lyx_code_item">  [    b1]  .eh_frame_hdr</div>
<div class="lyx_code_item">  [    bf]  .eh_frame</div>
<div class="lyx_code_item">  [    c9]  .init_array</div>
<div class="lyx_code_item">  [    d5]  .fini_array</div>
<div class="lyx_code_item">  [    e1]  .jcr</div>
<div class="lyx_code_item">  [    e6]  .dynamic</div>
<div class="lyx_code_item">  [    ef]  .got.plt</div>
<div class="lyx_code_item">  [    f8]  .data</div>
<div class="lyx_code_item">  [    fe]  .bss</div>
<div class="lyx_code_item">  [   103]  .comment</div>
</div>


<div class="standard" id='magicparlabel-41491'>The actual implementation of a string table is a contiguous array of null-terminated strings. The index of a string is the position of its first character in the array. For example, in the above string table, <span style='font-family:monospace;'>.symtab</span> is at index 1 in the array (NULL character is at index 0). The length of <span style='font-family:monospace;'>.symtab</span> is 7, plus the NULL character, which occurs 8 bytes in total. So, <span style='font-family:monospace;'>.strtab </span>starts at index 9, and so on.</div>





<div class="standard" id='magicparlabel-41498'><table><tbody><tr><td align='center' valign='top'>

</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41627'><b><span style='font-family:monospace;'>00</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41630'><b><span style='font-family:monospace;'>01</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41633'><b><span style='font-family:monospace;'>02</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41636'><b><span style='font-family:monospace;'>03</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41639'><b><span style='font-family:monospace;'>04</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41642'><b><span style='font-family:monospace;'>05</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41645'><b><span style='font-family:monospace;'>06</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41648'><b><span style='font-family:monospace;'>07</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41651'><b><span style='font-family:monospace;'>08</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41654'><b><span style='font-family:monospace;'>09</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41657'><b><span style='font-family:monospace;'>0a</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41660'><b><span style='font-family:monospace;'>0b</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41663'><b><span style='font-family:monospace;'>0c</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41666'><b><span style='font-family:monospace;'>0d</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41669'><b><span style='font-family:monospace;'>0e</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41672'><b><span style='font-family:monospace;'>0f</span></b></div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41675'><b><span style='font-family:monospace;'>00000000</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41678'><span style='font-family:monospace;'>\0</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41681'><span style='font-family:monospace;'>.</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41684'><span style='font-family:monospace;'>s</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41687'><span style='font-family:monospace;'>y</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41690'><span style='font-family:monospace;'>m</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41693'><span style='font-family:monospace;'>t</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41696'><span style='font-family:monospace;'>a</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41699'><span style='font-family:monospace;'>b</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41702'><span style='font-family:monospace;'>\0</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41705'><span style='font-family:monospace;'>.</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41708'><span style='font-family:monospace;'>s</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41711'><span style='font-family:monospace;'>t</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41714'><span style='font-family:monospace;'>r</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41717'><span style='font-family:monospace;'>t</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41720'><span style='font-family:monospace;'>a</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41723'><span style='font-family:monospace;'>b</span></div>
</td>
</tr><tr><td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
<td align='center' valign='top'>

</td>
</tr><tr><td align='center' valign='top'>

</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41780'><b><span style='font-family:monospace;'>00</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41783'><b><span style='font-family:monospace;'>01</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41786'><b><span style='font-family:monospace;'>02</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41789'><b><span style='font-family:monospace;'>03</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41792'><b><span style='font-family:monospace;'>04</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41795'><b><span style='font-family:monospace;'>05</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41798'><b><span style='font-family:monospace;'>06</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41801'><b><span style='font-family:monospace;'>07</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41804'><b><span style='font-family:monospace;'>08</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41807'><b><span style='font-family:monospace;'>09</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41810'><b><span style='font-family:monospace;'>0a</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41813'><b><span style='font-family:monospace;'>0b</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41816'><b><span style='font-family:monospace;'>0c</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41819'><b><span style='font-family:monospace;'>0d</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41822'><b><span style='font-family:monospace;'>0e</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41825'><b><span style='font-family:monospace;'>0f</span></b></div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41828'><b><span style='font-family:monospace;'>00000010</span></b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41831'><span style='font-family:monospace;'>\0</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41834'><span style='font-family:monospace;'>.</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41837'><span style='font-family:monospace;'>s</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41840'><span style='font-family:monospace;'>h</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41843'><span style='font-family:monospace;'>s</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41846'><span style='font-family:monospace;'>t</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41849'><span style='font-family:monospace;'>r</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41852'><span style='font-family:monospace;'>t</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41855'><span style='font-family:monospace;'>a</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41858'><span style='font-family:monospace;'>b</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41861'><span style='font-family:monospace;'>\0</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41864'><span style='font-family:monospace;'>.</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41867'><span style='font-family:monospace;'>i</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41870'><span style='font-family:monospace;'>n</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41873'><span style='font-family:monospace;'>t</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-41876'><span style='font-family:monospace;'>e</span></div>
</td>
</tr><tr><td align='center' valign='top' colspan='17'>
<div class="plain_layout" id='magicparlabel-41879'><span style='font-family:monospace;'>.... and so on ....</span></div>
</td>
</tr></tbody>
</table>
</div>



<div class="standard" id='magicparlabel-41933'><div style='height:5ex'></div></div>

<div class="standard" id='magicparlabel-41934'>Similarly, the output of <span style='font-family:monospace;'>.strtab</span>:</div>



<div class="lyx_code" id='magicparlabel-41940'><div class="lyx_code_item">String dump of section '.strtab':</div>
<div class="lyx_code_item">  [     1]  crtstuff.c</div>
<div class="lyx_code_item">  [     c]  __JCR_LIST__</div>
<div class="lyx_code_item">  [    19]  deregister_tm_clones</div>
<div class="lyx_code_item">  [    2e]  __do_global_dtors_aux</div>
<div class="lyx_code_item">  [    44]  completed.7585</div>
<div class="lyx_code_item">  [    53]  __do_global_dtors_aux_fini_array_entry</div>
<div class="lyx_code_item">  [    7a]  frame_dummy</div>
<div class="lyx_code_item">  [    86]  __frame_dummy_init_array_entry</div>
<div class="lyx_code_item">  [    a5]  <b><span style='font-size:x-large;'>hello.c</span></b></div>
<div class="lyx_code_item">  [    ad]  __FRAME_END__</div>
<div class="lyx_code_item">  [    bb]  __JCR_END__</div>
<div class="lyx_code_item">  [    c7]  __init_array_end</div>
<div class="lyx_code_item">  [    d8]  _DYNAMIC</div>
<div class="lyx_code_item">  [    e1]  __init_array_start</div>
<div class="lyx_code_item">  [    f4]  __GNU_EH_FRAME_HDR</div>
<div class="lyx_code_item">  [   107]  _GLOBAL_OFFSET_TABLE_</div>
<div class="lyx_code_item">  [   11d]  __libc_csu_fini</div>
<div class="lyx_code_item">  [   12d]  _ITM_deregisterTMCloneTable</div>
<div class="lyx_code_item">  [   149]  j</div>
<div class="lyx_code_item">  [   14b]  _edata</div>
<div class="lyx_code_item">  [   152]  __libc_start_main@@GLIBC_2.2.5</div>
<div class="lyx_code_item">  [   171]  __data_start</div>
<div class="lyx_code_item">  [   17e]  __gmon_start__</div>
<div class="lyx_code_item">  [   18d]  __dso_handle</div>
<div class="lyx_code_item">  [   19a]  _IO_stdin_used</div>
<div class="lyx_code_item">  [   1a9]  __libc_csu_init</div>
<div class="lyx_code_item">  [   1b9]  __bss_start</div>
<div class="lyx_code_item">  [   1c5]  <b><span style='font-size:x-large;'>main</span></b></div>
<div class="lyx_code_item">  [   1ca]  _Jv_RegisterClasses</div>
<div class="lyx_code_item">  [   1de]  __TMC_END__</div>
<div class="lyx_code_item">  [   1ea]  _ITM_registerTMCloneTable</div>
</div>

</div>
</dd><dt class="description_label"><strong class="flex_strong"><span style='font-family:monospace;'>HASH</span></strong></dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>holds a symbol hash table, which supports symbol table access.</dd>
<dt class="description_label"><strong class="flex_strong"><span style='font-family:monospace;'>DYNAMIC</span></strong></dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>holds information for dynamic linking. </dd>
<dt class="description_label"><strong class="flex_strong"><span style='font-family:monospace;'>NOBITS</span></strong></dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>is similar to <span style='font-family:monospace;'>PROGBITS</span> but occupies no space.
<br />



<div class="example" id='magicparlabel-41992'><div class="example_item"><span class="example_label">Example 0.31.</span>
<span style='font-family:monospace;'>.bss</span> section holds uninitialized data, which means the bytes in the section can have any value. Until a operating system actually loads the section into main memory, there is no need to allocate space for the binary image on disk to reduce the size of a binary file. Here is the details of <span style='font-family:monospace;'>.bss</span> from the example output:</div>
</div>


<div class="lyx_code" id='magicparlabel-41998'><div class="lyx_code_item">[Nr] Name              Type             Address           Offset</div>
<div class="lyx_code_item">     Size              EntSize          Flags  Link  Info  Align</div>
<div class="lyx_code_item">[26] .bss              NOBITS           0000000000601038  00001038</div>
<div class="lyx_code_item">     0000000000000008  0000000000000000  WA       0     0     1   </div>
<div class="lyx_code_item">[27] .comment          PROGBITS         0000000000000000  00001038</div>
<div class="lyx_code_item">     0000000000000034  0000000000000001  MS       0     0     1 </div>
</div>


<div class="standard" id='magicparlabel-42009'>In the above output, the size of the section is only 8 bytes, while the offsets of both sections are the same, which means <span style='font-family:monospace;'>.bss</span> consumes no byte of the executable binary on disk. </div>

<div class="standard" id='magicparlabel-42010'>Notice that the <span style='font-family:monospace;'>.comment</span> section has no starting address. This means that this section is discarded when the executable binary is loaded into memory.</div>
</dd><dt class="description_label"><strong class="flex_strong"><span style='font-family:monospace;'>REL</span></strong></dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>holds relocation entries without explicit addends. This type will be explained in details in <a href="#sec_Understand_relocations_with_readelf">7</a></dd>
<dt class="description_label"><strong class="flex_strong"><span style='font-family:monospace;'>RELA</span></strong></dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>holds relocation entries with explicit addends. This type will be explained in details in <a href="#sec_Understand_relocations_with_readelf">7</a></dd>
<dt class="description_label"><strong class="flex_strong"><span style='font-family:monospace;'>INIT_ARRAY</span></strong></dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>is an array of function pointers for program initialization. When an application program runs, before getting to<span style='font-family:monospace;'> main()</span>, initialization code in <span style='font-family:monospace;'>.init</span> and this section are executed first. The first element in this array is an ignored function pointer. 
<br />


<div class="standard" id='magicparlabel-42026'>It might not make sense when we can include initialization code in the <span style='font-family:monospace;'>main()</span> function. However, for shared object files where there are no <span style='font-family:monospace;'>main()</span>, this section ensures that the initialization code from an object file executes before any other code to ensure a proper environment for main code to run properly. It also makes an object file more modularity, as the main application code needs not to be responsible for initializing a proper environment for using a particular object file, but the object file itself. Such a clear division makes code cleaner.</div>

<div class="standard" id='magicparlabel-42027'>However, we will not use any <span style='font-family:monospace;'>.init</span> and<span style='font-family:monospace;'> INIT_ARRAY </span>sections in our operating system, for simplicity, as initializing an environment is part of the operating-system domain.</div>

<div class="example" id='magicparlabel-42028'><div class="example_item"><span class="example_label">Example 0.32.</span>
To use the <span style='font-family:monospace;'>INIT_ARRAY</span>, we simply mark a function with the attribute <span style='font-family:monospace;'>constructor</span>:
<br />

</div>

<div class='float-listings'><pre class ='listings'>#include &lt;stdio.h&gt;

__attribute__((constructor)) static void init1(){
    printf("%s\n", __FUNCTION__);
}

__attribute__((constructor)) static void init2(){
    printf("%s\n", __FUNCTION__);
}


int main(int argc, char *argv[])
{
    printf("hello world\n");

    return 0;
}</pre></div>


<div class="standard" id='magicparlabel-42050'>The program automatically calls the constructor without explicitly invoking it:</div>



<div class="standard" id='magicparlabel-42056'><span style='font-family:monospace;'>$ gcc -m32 hello.c -o hello</span></div>

<div class="standard" id='magicparlabel-42057'><span style='font-family:monospace;'>$ ./hello </span></div>

<div class="standard" id='magicparlabel-42058'><span style='font-family:monospace;'>init1</span></div>

<div class="standard" id='magicparlabel-42059'><span style='font-family:monospace;'>init2</span></div>

<div class="standard" id='magicparlabel-42060'><span style='font-family:monospace;'>hello world</span></div>


</div>

<div class="standard" id='magicparlabel-42066'><br />

</div>

<div class="example" id='magicparlabel-42067'><div class="example_item"><span class="example_label">Example 0.33.</span>
Optionally, a constructor can be assigned with a priority from 101 onward. The priorities from 0 to 100 are reserved for <span style='font-family:monospace;'>gcc</span>. If we want <span style='font-family:monospace;'>init2</span> to run before <span style='font-family:monospace;'>init1</span>, we give it a higher priority:
<br />

</div>

<div class='float-listings'><pre class ='listings'>#include &lt;stdio.h&gt;

__attribute__((constructor(102))) static void init1(){
    printf("%s\n", __FUNCTION__);
}

__attribute__((constructor(101))) static void init2(){
    printf("%s\n", __FUNCTION__);
}


int main(int argc, char *argv[])
{
    printf("hello world\n");

    return 0;
}</pre></div>


<div class="standard" id='magicparlabel-42089'>The call order should be exactly as specified:</div>
<div class="example_item"></div>
<div class="example_item"><span style='font-family:monospace;'>$ gcc -m32 hello.c -o hello</span></div>
<div class="example_item"><span style='font-family:monospace;'>$ ./hello</span></div>
<div class="example_item"><span style='font-family:monospace;'>init2</span></div>
<div class="example_item"><span style='font-family:monospace;'>init1</span></div>
<div class="example_item"><span style='font-family:monospace;'>hello world</span></div>
<div class="example_item"></div>
</div>

<div class="standard" id='magicparlabel-42105'><br />

</div>

<div class="example" id='magicparlabel-42106'><div class="example_item"><span class="example_label">Example 0.34.</span>
We can add initialization functions using another method:
<br />

</div>

<div class='float-listings'><pre class ='listings'>#include &lt;stdio.h&gt;

void init1() {
    printf("%s\n", __FUNCTION__);
}

void init2() {
    printf("%s\n", __FUNCTION__);
}

/* Without typedef, init is a definition of a function pointer.
   With typedef, init is a declaration of a type.*/
typedef void (*init)();

__attribute__((section(".init_array"))) init init_arr[2] = {init1, init2};

int main(int argc, char *argv[])
{
    printf("hello world!\n");

    return 0;
}</pre></div>


<div class="standard" id='magicparlabel-42133'>The attribute <span style='font-family:monospace;'>section(&ldquo;...&rdquo;)</span> put a function into a particular section rather than the default <span style='font-family:monospace;'>.text</span>. In this example, it is <span style='font-family:monospace;'>.init_array</span>. The section name is not necessary the same as the standard header in an ELF file (such as <span style='font-family:monospace;'>.text</span> or <span style='font-family:monospace;'>.init_array</span>, but can be anything. Non-standard section names are often used for controlling the final binary layout of a compiled program. We will explore this techinque in more details when learning the <span style='font-family:monospace;'>GNU ld</span> linker and the linking process. Again, the program automatically calls the constructors without explicitly invoking it:</div>



<div class="standard" id='magicparlabel-42139'><span style='font-family:monospace;'>$ gcc -m32 hello.c -o hello</span></div>

<div class="standard" id='magicparlabel-42140'><span style='font-family:monospace;'>$ ./hello </span></div>

<div class="standard" id='magicparlabel-42141'><span style='font-family:monospace;'>init1</span></div>
<div class="example_item"><span style='font-family:monospace;'>init2</span></div>
<div class="example_item"><span style='font-family:monospace;'>hello world!</span>
<br />

</div>

</div>
</dd><dt class="description_label"><strong class="flex_strong"><span style='font-family:monospace;'>FINI_ARRAY</span></strong></dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>is an array of function pointers for program termination, called after exiting <span style='font-family:monospace;'>main()</span>. If the application terminate abnormally, such as through <span style='font-family:monospace;'>abort()</span> call or a crash, the <span style='font-family:monospace;'>.finit_array</span> is ignored.
<br />



<div class="example" id='magicparlabel-42154'><div class="example_item"><span class="example_label">Example 0.35.</span>
A destructor is automatically called after exiting main(), if one or more available:</div>
</div>

<div class='float-listings'><pre class ='listings'>#include &lt;stdio.h&gt;

__attribute__((destructor)) static void destructor(){
    printf("%s\n", __FUNCTION__);
}

int main(int argc, char *argv[])
{
    printf("hello world\n");

    return 0;
}</pre></div>




<div class="standard" id='magicparlabel-42176'><span style='font-family:monospace;'>$ gcc -m32 hello.c -o hello</span></div>

<div class="standard" id='magicparlabel-42177'><span style='font-family:monospace;'>$ ./hello </span></div>

<div class="standard" id='magicparlabel-42178'><span style='font-family:monospace;'>hello world</span></div>

<div class="standard" id='magicparlabel-42179'><span style='font-family:monospace;'>destructor</span></div>


</dd><dt class="description_label"><strong class="flex_strong"><span style='font-family:monospace;'>PREINIT_ARRAY</span></strong></dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>is an array of function pointers that are invoked before all other initialization functions in <span style='font-family:monospace;'>INIT_ARRAY</span>.
<br />



<div class="example" id='magicparlabel-42190'><div class="example_item"><span class="example_label">Example 0.36.</span>
To use the <span style='font-family:monospace;'>.preinit_array</span>, the only way to put functions into this section is to use the attribute <span style='font-family:monospace;'>section()</span>:</div>
</div>

<div class='float-listings'><pre class ='listings'>#include &lt;stdio.h&gt;

void preinit1() {
    printf("%s\n", __FUNCTION__);
}

void preinit2() {
    printf("%s\n", __FUNCTION__);
}

void init1() {
    printf("%s\n", __FUNCTION__);
}

void init2() {
    printf("%s\n", __FUNCTION__);
}


typedef void (*preinit)();
typedef void (*init)();

__attribute__((section(".init_array"))) preinit preinit_arr[2] = {preinit1, preinit2};
__attribute__((section(".init_array"))) init init_arr[2] = {init1, init2};

int main(int argc, char *argv[])
{
    printf("hello world!\n");

    return 0;
}</pre></div>




<div class="standard" id='magicparlabel-42231'><span style='font-family:monospace;'>$ gcc -m32 hello2.c -o hello2</span></div>

<div class="standard" id='magicparlabel-42232'><span style='font-family:monospace;'>$ ./hello2</span></div>

<div class="standard" id='magicparlabel-42233'><span style='font-family:monospace;'>preinit1</span></div>

<div class="standard" id='magicparlabel-42234'><span style='font-family:monospace;'>preinit2</span></div>

<div class="standard" id='magicparlabel-42235'><span style='font-family:monospace;'>init1</span></div>

<div class="standard" id='magicparlabel-42236'><span style='font-family:monospace;'>init2</span></div>

<div class="standard" id='magicparlabel-42237'><span style='font-family:monospace;'>hello world!</span></div>


</dd><dt class="description_label"><strong class="flex_strong"><span style='font-family:monospace;'>GROUP</span></strong></dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>defines a section group, which is the same section that appears in different object files but when merged into the final executable binary file, only one copy is kept and the rest in other object files are discarded. This section is only relevant in C++ object files, so we will not examine further.</dd>
<dt class="description_label"><strong class="flex_strong"><span style='font-family:monospace;'>SYMTAB_SHNDX</span></strong></dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>is a section containing extended section indexes, that are associated with a symbol table. This section only appears when the <span style='font-family:monospace;'>Ndx</span> value of an entry in the symbol table exceeds the <span style='font-family:monospace;'>LORESERVE</span> value. This section then maps between a symbol and an actual index value of a section header.</dd>
</dl>
<div class="standard" id='magicparlabel-42253'>Upon understanding section types, we can understand the number in <span style='font-family:monospace;'>Link<em> </em></span>and <span style='font-family:monospace;'>Info<em> </em></span>fields:</div>





<div class="standard" id='magicparlabel-42260'><table><tbody><tr><td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-42291'><b>Type</b></div>
</td>
<td style ="width: 6cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-42294'><b>Link</b></div>
</td>
<td style ="width: 6cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-42297'><b>Info</b></div>
</td>
</tr><tr><td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-42300'><span style='font-family:monospace;'>DYNAMIC</span></div>
</td>
<td style ="width: 6cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-42303'>Entries in this section uses the section index of the dynamic string table. </div>
</td>
<td style ="width: 6cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-42306'>0</div>
</td>
</tr><tr><td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-42309'><span style='font-family:monospace;'>HASH</span></div>

<div class="plain_layout" id='magicparlabel-42310'><span style='font-family:monospace;'>GNU_HASH</span></div>
</td>
<td style ="width: 6cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-42313'>The section index of the symbol table to which the hash table applies.</div>
</td>
<td style ="width: 6cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-42316'>0</div>
</td>
</tr><tr><td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-42319'><span style='font-family:monospace;'>REL</span></div>

<div class="plain_layout" id='magicparlabel-42320'><span style='font-family:monospace;'>RELA</span></div>
</td>
<td style ="width: 6cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-42323'>The section index of the associated symbol table.</div>
</td>
<td style ="width: 6cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-42326'>The section index to which the relocation applies.</div>
</td>
</tr><tr><td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-42329'><span style='font-family:monospace;'>SYMTAB</span></div>

<div class="plain_layout" id='magicparlabel-42330'><span style='font-family:monospace;'>DYNSYM</span></div>
</td>
<td style ="width: 6cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-42333'>The section index of the associated string table.</div>
</td>
<td style ="width: 6cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-42336'>One greater than the symbol table index of the last local symbol.</div>
</td>
</tr><tr><td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-42339'><span style='font-family:monospace;'>GROUP</span></div>
</td>
<td style ="width: 6cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-42342'>The section index of the associated symbol table.</div>
</td>
<td style ="width: 6cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-42345'>The symbol index of an entry in the associated symbol table. The name of the specified symbol table entry provides a signature for the section group.</div>
</td>
</tr><tr><td style ="width: 3cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-42348'><span style='font-family:monospace;'>SYMTAB_SHNDX</span></div>
</td>
<td style ="width: 6cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-42351'>The section header index of the associated symbol table.</div>
</td>
<td style ="width: 6cm;" align='left' valign='top'>

</td>
</tr></tbody>
</table>
</div>



<div class="exercise" id='magicparlabel-42361'><div class="exercise_item"><span class="exercise_label">Exercise 0.12.</span>
Verify that the value of the <span style='font-family:monospace;'>Link</span> field of a <span style='font-family:monospace;'>SYMTAB</span> section is the index of a <span style='font-family:monospace;'>STRTAB</span> section.</div>
</div>

<div class="standard" id='magicparlabel-42362'><br />

</div>

<div class="exercise" id='magicparlabel-42363'><div class="exercise_item"><span class="exercise_label">Exercise 0.13.</span>
Verify that the value of the <span style='font-family:monospace;'>Info</span> field of a <span style='font-family:monospace;'>SYMTAB</span> section is the index of last local symbol + 1. It means, in the symbol table, from the index listed by <span style='font-family:monospace;'>Info</span> field onward, no local symbol appears.</div>
</div>

<div class="standard" id='magicparlabel-42364'><br />

</div>

<div class="exercise" id='magicparlabel-42365'><div class="exercise_item"><span class="exercise_label">Exercise 0.14.</span>
Verify that the value of the <span style='font-family:monospace;'>Info</span> field of a <span style='font-family:monospace;'>REL</span> section is the index of the <span style='font-family:monospace;'>SYMTAB</span> section.</div>
</div>

<div class="standard" id='magicparlabel-42366'><br />

</div>

<div class="exercise" id='magicparlabel-42367'><div class="exercise_item"><span class="exercise_label">Exercise 0.15.</span>
Verify that the value of the <span style='font-family:monospace;'>Link</span> field of a <span style='font-family:monospace;'>REL</span> section is the index of the section where relocation is applied. For example. if the section is <span style='font-family:monospace;'>.rel.text</span>, then the relocating section should be <span style='font-family:monospace;'>.text</span>.</div>
</div>
<div class="section" id='magicparlabel-42368'>Program header table<a id="sec_Program_header_table" />
</div>
<div class="standard" id='magicparlabel-42369'>A <em>program header table<a id='magicparlabel-42373' />
</em> is an array of program headers that defines the memory layout of a program at runtime. </div>

<div class="standard" id='magicparlabel-42374'>A <em>program header<a id='magicparlabel-42378' />
</em> is a description of a program segment.</div>

<div class="standard" id='magicparlabel-42379'>A <em>program segment<a id='magicparlabel-42383' />
</em> is a collection of related sections. A segment contains zero or more sections. An operating system when loading a program, <em>only use segments</em>, not sections. To see the information of a program header table, we use the <span style='font-family:monospace;'>-l </span>option with <span style='font-family:monospace;'>readelf:</span></div>



<div class="standard" id='magicparlabel-42389'><span style='font-family:monospace;'>$ readelf -l &lt;binary file&gt;</span></div>



<div class="standard" id='magicparlabel-42395'>Similar to a section, a program header also has types:</div>

<dl class='description' id='magicparlabel-42396'><dt class="description_label">PHDR</dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>specifies the location and size of the program header table itself, both in the file and in the memory image of the program</dd>
<dt class="description_label">INTERP</dt>
<dd class="description_item"> specifies the location and size of a null-terminated path name to invoke as an interpreter for linking runtime libraries.</dd>
<dt class="description_label">LOAD</dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>specifies a loadable segment. That is, this segment is loaded into main memory.</dd>
<dt class="description_label">DYNAMIC</dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>specifies dynamic linking information.</dd>
<dt class="description_label">NOTE</dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>specifies the location and size of auxiliary information.</dd>
<dt class="description_label">TLS</dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>specifies the <em>Thread-Local Storage template</em>, which is formed from the combination of all sections with the flag <span style='font-family:monospace;'>TLS</span>.</dd>
<dt class="description_label">GNU_STACK</dt>
<dd class="description_item"> indicates whether the program's stack should be made executable or not. Linux kernel uses this type.</dd>
</dl>
<div class="standard" id='magicparlabel-42403'>A segment also has permission, which is a combination of these 3 values:</div>
<div class='float-margintable'><div class="plain_layout" id='magicparlabel-42407'><span class='float-caption-Standard float-caption float-caption-standard'>MarginTable 4:  Segment Permission</span></div>



<div class="plain_layout" id='magicparlabel-42412'><table><tbody><tr><td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-42429'><b>Permission</b></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-42432'><b>Description</b></div>
</td>
</tr><tr><td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-42435'>R</div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-42438'>Readable</div>
</td>
</tr><tr><td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-42441'>W</div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-42444'>Writable</div>
</td>
</tr><tr><td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-42447'>E</div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-42450'>Executable</div>
</td>
</tr></tbody>
</table>
</div>
</div>


<ul class="itemize" id='magicparlabel-42451'><li class="itemize_item">Read (<span style='font-family:monospace;'>R</span>)</li>
<li class="itemize_item">Write (<span style='font-family:monospace;'>W</span>)</li>
<li class="itemize_item">Execute (<span style='font-family:monospace;'>E</span>)</li>
</ul>
<div class="standard" style='text-align: left;' id='magicparlabel-42454'><hr />

</div>

<div class="example" id='magicparlabel-42455'><div class="example_item"><span class="example_label">Example 0.37.</span>
The command to get the program header table:
<br />

</div>


<div class="standard" id='magicparlabel-42461'><span style='font-family:monospace;'>$ readelf -l hello</span></div>



<div class="standard" id='magicparlabel-42467'>Output:</div>



<div class="lyx_code" id='magicparlabel-42473'><div class="lyx_code_item">Elf file type is EXEC (Executable file)</div>
<div class="lyx_code_item">Entry point 0x400430</div>
<div class="lyx_code_item">There are 9 program headers, starting at offset 64</div>
<div class="lyx_code_item"></div>
<div class="lyx_code_item">Program Headers:</div>
<div class="lyx_code_item">  Type           Offset             VirtAddr           PhysAddr</div>
<div class="lyx_code_item">                 FileSiz            MemSiz              Flags  Align</div>
<div class="lyx_code_item">  PHDR           0x0000000000000040 0x0000000000400040 0x0000000000400040</div>
<div class="lyx_code_item">                 0x00000000000001f8 0x00000000000001f8  R E    8</div>
<div class="lyx_code_item">  INTERP         0x0000000000000238 0x0000000000400238 0x0000000000400238</div>
<div class="lyx_code_item">                 0x000000000000001c 0x000000000000001c  R      1</div>
<div class="lyx_code_item">      [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]</div>
<div class="lyx_code_item">  LOAD           0x0000000000000000 0x0000000000400000 0x0000000000400000</div>
<div class="lyx_code_item">                 0x000000000000070c 0x000000000000070c  R E    200000</div>
<div class="lyx_code_item">  LOAD           0x0000000000000e10 0x0000000000600e10 0x0000000000600e10</div>
<div class="lyx_code_item">                 0x0000000000000228 0x0000000000000230  RW     200000</div>
<div class="lyx_code_item">  DYNAMIC        0x0000000000000e28 0x0000000000600e28 0x0000000000600e28</div>
<div class="lyx_code_item">                 0x00000000000001d0 0x00000000000001d0  RW     8</div>
<div class="lyx_code_item">  NOTE           0x0000000000000254 0x0000000000400254 0x0000000000400254</div>
<div class="lyx_code_item">                 0x0000000000000044 0x0000000000000044  R      4</div>
<div class="lyx_code_item">  GNU_EH_FRAME   0x00000000000005e4 0x00000000004005e4 0x00000000004005e4</div>
<div class="lyx_code_item">                 0x0000000000000034 0x0000000000000034  R      4</div>
<div class="lyx_code_item">  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000</div>
<div class="lyx_code_item">                 0x0000000000000000 0x0000000000000000  RW     10</div>
<div class="lyx_code_item">  GNU_RELRO      0x0000000000000e10 0x0000000000600e10 0x0000000000600e10</div>
<div class="lyx_code_item">                 0x00000000000001f0 0x00000000000001f0  R      1</div>
<div class="lyx_code_item"></div>
<div class="lyx_code_item"> Section to Segment mapping:</div>
<div class="lyx_code_item">  Segment Sections...</div>
<div class="lyx_code_item">   00     </div>
<div class="lyx_code_item">   01     .interp</div>
<div class="lyx_code_item">   02     .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dynsym .dynstr </div>
<div class="lyx_code_item">.gnu.version .gnu.version_r .rela.dyn .rela.plt .init .plt .plt.got .text .fini</div>
<div class="lyx_code_item">.rodata .eh_frame_hdr .eh_frame </div>
<div class="lyx_code_item">   03     .init_array .fini_array .jcr .dynamic .got .got.plt .data .bss </div>
<div class="lyx_code_item">   04     .dynamic </div>
<div class="lyx_code_item">   05     .note.ABI-tag .note.gnu.build-id </div>
<div class="lyx_code_item">   06     .eh_frame_hdr </div>
<div class="lyx_code_item">   07     </div>
<div class="lyx_code_item">   08     .init_array .fini_array .jcr .dynamic .got </div>
</div>


<div class="standard" id='magicparlabel-42518'>In the sample output, <span style='font-family:monospace;'>LOAD </span>segment appears twice:</div>



<div class="lyx_code" id='magicparlabel-42524'><div class="lyx_code_item">LOAD           0x0000000000000000 0x0000000000400000 0x0000000000400000</div>
<div class="lyx_code_item">               0x000000000000070c 0x000000000000070c  R E    200000</div>
<div class="lyx_code_item">LOAD           0x0000000000000e10 0x0000000000600e10 0x0000000000600e10</div>
<div class="lyx_code_item">               0x0000000000000228 0x0000000000000230  RW     200000</div>
</div>


<div class="standard" id='magicparlabel-42533'>Why? Notice the permission: </div>

<ul class="itemize" id='magicparlabel-42534'><li class="itemize_item">the upper <span style='font-family:monospace;'>LOAD</span> has Read and Execute permission. This is a <em>text</em> segment. A text segment contains read-only instructions and read-only data.</li>
<li class="itemize_item">the lower <span style='font-family:monospace;'>LOAD</span> has Read and Write permission. This is a <em>data</em> segment. It means that this segment can be read and written to, but is not allowed to be used as executable code, for security reason.</li>
</ul>
<div class="standard" id='magicparlabel-42536'>Then, <span style='font-family:monospace;'>LOAD </span>contains the following sections:</div>



<div class="lyx_code" id='magicparlabel-42542'><div class="lyx_code_item">   02     .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dynsym .dynstr </div>
<div class="lyx_code_item">.gnu.version .gnu.version_r .rela.dyn .rela.plt .init .plt .plt.got .text .fini </div>
<div class="lyx_code_item">.rodata .eh_frame_hdr .eh_frame </div>
<div class="lyx_code_item">   03     .init_array .fini_array .jcr .dynamic .got .got.plt .data .bss </div>
</div>


<div class="standard" id='magicparlabel-42551'>The first number is the index of a program header in program header table, and the remaining text is the list of all sections within a segment. Unfortunately, <span style='font-family:monospace;'>readelf</span> does not print the index, so a user needs to keep track manually which segment is of which index. First segment starts at index 0, second at index 1 and so on. <span style='font-family:monospace;'>LOAD</span> are segments at index 2 and 3. As can be seen from the two lists of sections, most sections are loadable and is available at runtime.
<br />

</div>
</div>
<div class="standard" style='text-align: left;' id='magicparlabel-42552'><hr />

</div>
<div class="section" id='magicparlabel-42553'>Segments vs sections</div>
<div class="standard" id='magicparlabel-42554'>As mentioned earlier, an operating system loads program segments, not sections. However, a question arises: Why doesn't the operating system use sections instead? After all, a section also contains similar information to a program segment, such as the type, the virtual memory address to be loaded, the size, the attributes, the flags and align. As explained before, a segment is the perspective of an operating system, while a section is the perspective of a linker. To understand why, looking into the structure of a segment, we can easily see:</div>

<ul class="itemize" id='magicparlabel-42555'><li class="itemize_item">A segment is a collection of sections. It means that sections are logically grouped together by their attributes. For example, all sections in a <span style='font-family:monospace;'>LOAD</span> segment are always loaded by the operating system; all sections have the same permission, either a <span style='font-family:monospace;'>RE </span>(Read + Execute) for executable sections, or <span style='font-family:monospace;'>RW</span> (Read + Write) for data sections.</li>
<li class="itemize_item">By grouping sections into a segment, it is easier for an operating system to batch load sections just once by loading the start and end of a segment, instead of loading section by section.</li>
<li class="itemize_item">Since a segment is for loading a program and a section is for linking a program, all the sections in a segment is <em>within its start and end virtual memory addresses of a segment</em>.</li>
</ul>
<div class="standard" id='magicparlabel-42558'>To see the last point clearer, consider an example of linking two object files. Suppose we have two source files:</div>


<div class='float-listings'><pre class ='listings C'>#include &lt;stdio.h&gt;

int main(int argc, char *argv[])
{
    printf("Hello World\n");
    return 0;
}</pre></div>


<div class="standard" id='magicparlabel-42570'>and:</div>


<div class='float-listings'><pre class ='listings C'>int add(int a, int b) {
    return a + b;
}</pre></div>


<div class="standard" id='magicparlabel-42578'>Now, compile the two source files as <em>object files</em>:</div>



<div class="standard" id='magicparlabel-42584'><span style='font-family:monospace;'>$ gcc -m32 -c math.c </span></div>

<div class="standard" id='magicparlabel-42585'><span style='font-family:monospace;'>$ gcc -m32 -c hello.c</span></div>



<div class="standard" id='magicparlabel-42591'>Then, we check the sections of <span style='font-family:monospace;'>math.o</span>:</div>



<div class="standard" id='magicparlabel-42597'><span style='font-family:monospace;'>$ readelf -S math.o</span></div>





<div class="lyx_code" id='magicparlabel-42608'><div class="lyx_code_item">There are 11 section headers, starting at offset 0x1a8:</div>
<div class="lyx_code_item">Section Headers:</div>
<div class="lyx_code_item">  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al</div>
<div class="lyx_code_item">  [ 0]                   NULL            00000000 000000 000000 00      0   0  0</div>
<div class="lyx_code_item">  [ 1] .text             PROGBITS        00000000 000034 00000d 00  AX  0   0  1</div>
<div class="lyx_code_item">  [ 2] .data             PROGBITS        00000000 000041 000000 00  WA  0   0  1</div>
<div class="lyx_code_item">  [ 3] .bss              NOBITS          00000000 000041 000000 00  WA  0   0  1</div>
<div class="lyx_code_item">  [ 4] .comment          PROGBITS        00000000 000041 000035 01  MS  0   0  1</div>
<div class="lyx_code_item">  [ 5] .note.GNU-stack   PROGBITS        00000000 000076 000000 00      0   0  1</div>
<div class="lyx_code_item">  [ 6] .eh_frame         PROGBITS        00000000 000078 000038 00   A  0   0  4</div>
<div class="lyx_code_item">  [ 7] .rel.eh_frame     REL             00000000 00014c 000008 08   I  9   6  4</div>
<div class="lyx_code_item">  [ 8] .shstrtab         STRTAB          00000000 000154 000053 00      0   0  1</div>
<div class="lyx_code_item">  [ 9] .symtab           SYMTAB          00000000 0000b0 000090 10     10   8  4</div>
<div class="lyx_code_item">  [10] .strtab           STRTAB          00000000 000140 00000c 00      0   0  1</div>
<div class="lyx_code_item">Key to Flags:</div>
<div class="lyx_code_item">  W (write), A (alloc), X (execute), M (merge), S (strings)</div>
<div class="lyx_code_item">  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)</div>
<div class="lyx_code_item">  O (extra OS processing required) o (OS specific), p (processor specific)</div>
</div>


<div class="standard" id='magicparlabel-42631'>As shown in the output, all the section virtual memory addresses of every section are set to 0. At this stage, each object file is simply a <em>block of binary</em> that contains code and data. Its existence is to serve as a material container for the final product, which is the executable binary. As such, the virtual addresses in <span style='font-family:monospace;'>hello.o</span> are all zeroes.</div>

<div class="standard" id='magicparlabel-42632'>No segment exists at this stage:</div>



<div class="standard" id='magicparlabel-42638'><span style='font-family:monospace;'>$ readelf -l math.o</span></div>

<div class="standard" id='magicparlabel-42639'><span style='font-family:monospace;'>There are no program headers in this file.</span></div>



<div class="standard" id='magicparlabel-42645'>The same happens to other object file:</div>



<div class="lyx_code" id='magicparlabel-42651'><div class="lyx_code_item">There are 13 section headers, starting at offset 0x224:</div>
<div class="lyx_code_item">Section Headers:</div>
<div class="lyx_code_item">  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al</div>
<div class="lyx_code_item">  [ 0]                   NULL            00000000 000000 000000 00      0   0  0</div>
<div class="lyx_code_item">  [ 1] .text             PROGBITS        00000000 000034 00002e 00  AX  0   0  1</div>
<div class="lyx_code_item">  [ 2] .rel.text         REL             00000000 0001ac 000010 08   I 11   1  4</div>
<div class="lyx_code_item">  [ 3] .data             PROGBITS        00000000 000062 000000 00  WA  0   0  1</div>
<div class="lyx_code_item">  [ 4] .bss              NOBITS          00000000 000062 000000 00  WA  0   0  1</div>
<div class="lyx_code_item">  [ 5] .rodata           PROGBITS        00000000 000062 00000c 00   A  0   0  1</div>
<div class="lyx_code_item">  [ 6] .comment          PROGBITS        00000000 00006e 000035 01  MS  0   0  1</div>
<div class="lyx_code_item">  [ 7] .note.GNU-stack   PROGBITS        00000000 0000a3 000000 00      0   0  1</div>
<div class="lyx_code_item">  [ 8] .eh_frame         PROGBITS        00000000 0000a4 000044 00   A  0   0  4</div>
<div class="lyx_code_item">  [ 9] .rel.eh_frame     REL             00000000 0001bc 000008 08   I 11   8  4</div>
<div class="lyx_code_item">  [10] .shstrtab         STRTAB          00000000 0001c4 00005f 00      0   0  1</div>
<div class="lyx_code_item">  [11] .symtab           SYMTAB          00000000 0000e8 0000b0 10     12   9  4</div>
<div class="lyx_code_item">  [12] .strtab           STRTAB          00000000 000198 000013 00      0   0  1</div>
<div class="lyx_code_item">Key to Flags:</div>
<div class="lyx_code_item">  W (write), A (alloc), X (execute), M (merge), S (strings)</div>
<div class="lyx_code_item">  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)</div>
<div class="lyx_code_item">  O (extra OS processing required) o (OS specific), p (processor specific)</div>
</div>




<div class="standard" id='magicparlabel-42681'><span style='font-family:monospace;'>$ readelf -l hello.o</span></div>

<div class="standard" id='magicparlabel-42682'><span style='font-family:monospace;'>There are no program headers in this file.</span></div>



<div class="standard" id='magicparlabel-42688'>Only when object files are combined into a final executable binary, sections are fully realized:</div>



<div class="standard" id='magicparlabel-42694'><span style='font-family:monospace;'>$ gcc -m32 math.o hello.o -o hello</span></div>

<div class="standard" id='magicparlabel-42695'><span style='font-family:monospace;'>$ readelf -S hello.</span></div>





<div class="lyx_code" id='magicparlabel-42706'><div class="lyx_code_item">There are 31 section headers, starting at offset 0x1804:</div>
<div class="lyx_code_item">Section Headers:</div>
<div class="lyx_code_item">  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al</div>
<div class="lyx_code_item">  [ 0]                   NULL            00000000 000000 000000 00      0   0  0</div>
<div class="lyx_code_item">  [ 1] .interp           PROGBITS        08048154 000154 000013 00   A  0   0  1</div>
<div class="lyx_code_item">  [ 2] .note.ABI-tag     NOTE            08048168 000168 000020 00   A  0   0  4</div>
<div class="lyx_code_item">  [ 3] .note.gnu.build-i NOTE            08048188 000188 000024 00   A  0   0  4</div>
<div class="lyx_code_item">  [ 4] .gnu.hash         GNU_HASH        080481ac 0001ac 000020 04   A  5   0  4</div>
<div class="lyx_code_item">  [ 5] .dynsym           DYNSYM          080481cc 0001cc 000050 10   A  6   1  4</div>
<div class="lyx_code_item">  [ 6] .dynstr           STRTAB          0804821c 00021c 00004a 00   A  0   0  1</div>
<div class="lyx_code_item">  [ 7] .gnu.version      VERSYM          08048266 000266 00000a 02   A  5   0  2</div>
<div class="lyx_code_item">  [ 8] .gnu.version_r    VERNEED         08048270 000270 000020 00   A  6   1  4</div>
<div class="lyx_code_item">  [ 9] .rel.dyn          REL             08048290 000290 000008 08   A  5   0  4</div>
<div class="lyx_code_item">  [10] .rel.plt          REL             08048298 000298 000010 08  AI  5  24  4</div>
<div class="lyx_code_item">  [11] .init             PROGBITS        080482a8 0002a8 000023 00  AX  0   0  4</div>
<div class="lyx_code_item">  [12] .plt              PROGBITS        080482d0 0002d0 000030 04  AX  0   0 16</div>
<div class="lyx_code_item">  [13] .plt.got          PROGBITS        08048300 000300 000008 00  AX  0   0  8</div>
<div class="lyx_code_item">  [14] .text             PROGBITS        08048310 000310 0001a2 00  AX  0   0 16</div>
<div class="lyx_code_item">  [15] .fini             PROGBITS        080484b4 0004b4 000014 00  AX  0   0  4</div>
<div class="lyx_code_item">  [16] .rodata           PROGBITS        080484c8 0004c8 000014 00   A  0   0  4</div>
<div class="lyx_code_item">  [17] .eh_frame_hdr     PROGBITS        080484dc 0004dc 000034 00   A  0   0  4</div>
<div class="lyx_code_item">  [18] .eh_frame         PROGBITS        08048510 000510 0000ec 00   A  0   0  4</div>
<div class="lyx_code_item">  [19] .init_array       INIT_ARRAY      08049f08 000f08 000004 00  WA  0   0  4</div>
<div class="lyx_code_item">  [20] .fini_array       FINI_ARRAY      08049f0c 000f0c 000004 00  WA  0   0  4</div>
<div class="lyx_code_item">  [21] .jcr              PROGBITS        08049f10 000f10 000004 00  WA  0   0  4</div>
<div class="lyx_code_item">  [22] .dynamic          DYNAMIC         08049f14 000f14 0000e8 08  WA  6   0  4</div>
<div class="lyx_code_item">  [23] .got              PROGBITS        08049ffc 000ffc 000004 04  WA  0   0  4</div>
<div class="lyx_code_item">  [24] .got.plt          PROGBITS        0804a000 001000 000014 04  WA  0   0  4</div>
<div class="lyx_code_item">  [25] .data             PROGBITS        0804a014 001014 000008 00  WA  0   0  4</div>
<div class="lyx_code_item">  [26] .bss              NOBITS          0804a01c 00101c 000004 00  WA  0   0  1</div>
<div class="lyx_code_item">  [27] .comment          PROGBITS        00000000 00101c 000034 01  MS  0   0  1</div>
<div class="lyx_code_item">  [28] .shstrtab         STRTAB          00000000 0016f8 00010a 00      0   0  1</div>
<div class="lyx_code_item">  [29] .symtab           SYMTAB          00000000 001050 000470 10     30  48  4</div>
<div class="lyx_code_item">  [30] .strtab           STRTAB          00000000 0014c0 000238 00      0   0  1</div>
<div class="lyx_code_item">Key to Flags:</div>
<div class="lyx_code_item">  W (write), A (alloc), X (execute), M (merge), S (strings)</div>
<div class="lyx_code_item">  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)</div>
<div class="lyx_code_item">  O (extra OS processing required) o (OS specific), p (processor specific)</div>
</div>


<div class="standard" id='magicparlabel-42749'>Every loadable section is assigned an address, highlighted in green. The reason each section got its own address is that in reality, <span style='font-family:monospace;'>gcc</span> <em>does not combine an object by itself, but invokes the linker</em> <span style='font-family:monospace;'>ld</span>. The linker <span style='font-family:monospace;'>ld</span> uses the default script that it can find in the system to build the executable binary. In the default script, a segment is assigned a starting address <span style='font-family:monospace;'>0x8048000</span> and sections belong to it. Then:</div>

<ul class="itemize" id='magicparlabel-42750'><li class="itemize_item"><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mstyle mathvariant='monospace'>
   <mrow>
    <msup>
     <mrow><mn>1</mn>
     </mrow>
     <mrow>
      <mrow><mi>s</mi><mi>t</mi>
      </mrow>
     </mrow>
    </msup><mspace width="6px" /><mi>s</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mspace width="6px" /><mi>a</mi><mi>d</mi><mi>d</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mo>=</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>g</mi><mspace width="6px" /><mi>s</mi><mi>e</mi><mi>g</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mspace width="6px" /><mi>a</mi><mi>d</mi><mi>d</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mo>+</mo><mi>s</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mspace width="6px" /><mi>o</mi><mi>f</mi><mi>f</mi><mi>s</mi><mi>e</mi><mi>t</mi><mo>=</mo><mn>0</mn><mi>x</mi><mn>8048000</mn><mo>+</mo><mn>0</mn><mi>x</mi><mn>154</mn><mo>=</mo><mn>0</mn><mi>x</mi><mn>08048154</mn>
   </mrow>
  </mstyle>
 </mrow></math></li>
<li class="itemize_item"><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mstyle mathvariant='monospace'>
   <mrow>
    <msup>
     <mrow><mn>2</mn>
     </mrow>
     <mrow>
      <mrow><mi>n</mi><mi>d</mi>
      </mrow>
     </mrow>
    </msup><mspace width="6px" /><mi>s</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mspace width="6px" /><mi>a</mi><mi>d</mi><mi>d</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mo>=</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>g</mi><mspace width="6px" /><mi>s</mi><mi>e</mi><mi>g</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mspace width="6px" /><mi>a</mi><mi>d</mi><mi>d</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mo>+</mo><mi>s</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mspace width="6px" /><mi>o</mi><mi>f</mi><mi>f</mi><mi>s</mi><mi>e</mi><mi>t</mi><mo>=</mo><mn>0</mn><mi>x</mi><mn>8048000</mn><mo>+</mo><mn>0</mn><mi>x</mi><mn>168</mn><mo>=</mo><mn>0</mn><mi>x</mi><mn>08048168</mn>
   </mrow>
  </mstyle>
 </mrow></math></li>
<li class="itemize_item">and so on until the last loadable section.</li>
</ul>
<div class="standard" id='magicparlabel-42753'>Indeed, the end address of a segment is also the end address of the final section. We can see this by listing all the segments:</div>



<div class="standard" id='magicparlabel-42759'><span style='font-family:monospace;'>$ readelf -l hello</span></div>



<div class="standard" id='magicparlabel-42765'>And check, for example, <span style='font-family:monospace;'>LOAD</span> segment which starts at <span style='font-family:monospace;'>0x08048000</span> and end at <math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mstyle mathvariant='monospace'>
   <mrow><mn>0</mn><mi>x</mi><mn>08048000</mn><mo>+</mo><mn>0</mn><mi>x</mi><mn>005</mn><mi>f</mi><mi>c</mi><mo>=</mo><mn>0</mn><mi>x</mi><mn>080485</mn><mi>f</mi><mi>c</mi>
   </mrow>
  </mstyle>
 </mrow></math>:</div>



<div class="lyx_code" id='magicparlabel-42771'><div class="lyx_code_item">Elf file type is EXEC (Executable file)</div>
<div class="lyx_code_item">Entry point 0x8048310</div>
<div class="lyx_code_item">There are 9 program headers, starting at offset 52</div>
<div class="lyx_code_item">Program Headers:</div>
<div class="lyx_code_item">  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align</div>
<div class="lyx_code_item">  PHDR           0x000034 0x08048034 0x08048034 0x00120 0x00120 R E 0x4</div>
<div class="lyx_code_item">  INTERP         0x000154 0x08048154 0x08048154 0x00013 0x00013 R   0x1</div>
<div class="lyx_code_item">      [Requesting program interpreter: /lib/ld-linux.so.2]</div>
<div class="lyx_code_item">  LOAD           0x000000 0x08048000 0x08048000 0x005fc 0x005fc R E 0x1000</div>
<div class="lyx_code_item">  LOAD           0x000f08 0x08049f08 0x08049f08 0x00114 0x00118 RW  0x1000</div>
<div class="lyx_code_item">  DYNAMIC        0x000f14 0x08049f14 0x08049f14 0x000e8 0x000e8 RW  0x4</div>
<div class="lyx_code_item">  NOTE           0x000168 0x08048168 0x08048168 0x00044 0x00044 R   0x4</div>
<div class="lyx_code_item">  GNU_EH_FRAME   0x0004dc 0x080484dc 0x080484dc 0x00034 0x00034 R   0x4</div>
<div class="lyx_code_item">  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0x10</div>
<div class="lyx_code_item">  GNU_RELRO      0x000f08 0x08049f08 0x08049f08 0x000f8 0x000f8 R   0x1</div>
<div class="lyx_code_item"> Section to Segment mapping:</div>
<div class="lyx_code_item">  Segment Sections...</div>
<div class="lyx_code_item">   00     </div>
<div class="lyx_code_item">   01     .interp </div>
<div class="lyx_code_item">   02     .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dynsym .dynstr </div>
<div class="lyx_code_item">.gnu.version .gnu.version_r .rel.dyn .rel.plt .init .plt .plt.got .text .fini </div>
<div class="lyx_code_item">.rodata .eh_frame_hdr .eh_frame </div>
<div class="lyx_code_item">   03     .init_array .fini_array .jcr .dynamic .got .got.plt .data .bss </div>
<div class="lyx_code_item">   04     .dynamic </div>
<div class="lyx_code_item">   05     .note.ABI-tag .note.gnu.build-id </div>
<div class="lyx_code_item">   06     .eh_frame_hdr </div>
<div class="lyx_code_item">   07     </div>
<div class="lyx_code_item">   08     .init_array .fini_array .jcr .dynamic .got </div>
</div>


<div class="standard" id='magicparlabel-42804'>The last section in the first <span style='font-family:monospace;'>LOAD</span> segment is <span style='font-family:monospace;'>.eh_frame</span>. The <span style='font-family:monospace;'>.eh_frame</span> section starts at <span style='font-family:monospace;'>0x0804851</span> because the start address is <span style='font-family:monospace;'>0x08048000</span>, the offset into the file is <span style='font-family:monospace;'>0x510</span>. The end address of <span style='font-family:monospace;'>.eh_frame</span> should be: <math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mstyle mathvariant='monospace'>
   <mrow><mn>0</mn><mi>x</mi><mn>08048000</mn><mo>+</mo><mn>0</mn><mi>x</mi><mn>510</mn><mo>+</mo><mn>0</mn><mi>x</mi><mi>e</mi><mi>c</mi><mo>=</mo><mn>0</mn><mi>x</mi><mn>080485</mn><mi>f</mi><mi>c</mi>
   </mrow>
  </mstyle>
 </mrow></math> because the segment size is <span style='font-family:monospace;'>0x</span>ec. This is exactly the same as the end address of the first <span style='font-family:monospace;'>LOAD</span> segment above: <math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mstyle mathvariant='monospace'>
   <mrow><mn>0</mn><mi>x</mi><mn>08048000</mn><mo>+</mo><mn>0</mn><mi>x</mi><mn>5</mn><mi>e</mi><mi>c</mi><mo>=</mo><mn>0</mn><mi>x</mi><mn>080485</mn><mi>f</mi><mi>c</mi>
   </mrow>
  </mstyle>
 </mrow></math>.</div>

<div class="standard" id='magicparlabel-42805'>Chapter <a href="#chap_Linking_and_loading">7</a> will explore this whole process in detail.</div>
<div class="chapter" id='magicparlabel-42806'>Runtime inspection and debug</div>
<div class="standard" id='magicparlabel-42807'>A<em> <div class="marginal"><div class="plain_layout" id='magicparlabel-42811'><em><b>debugger</b></em></div>
</div>debugger<a id='magicparlabel-42815' />
</em> is a program that allows inspection of a running program. A debugger can start and run a program then stop at a specific line for examining the state of the program at that point. The point where the debugger stop (but not halt) is called a <em>breakpoint</em>.</div>

<div class="standard" id='magicparlabel-42816'>We will be using the <em><b>GDB -</b> <b>G</b>NU<b> D</b>e<b>b</b>ugger</em> for debugging our kernel. <code class="flex_code"><em>gdb</em></code> is the program name. <code class="flex_code"><em>gdb</em></code> can do four main kinds of things:</div>

<ul class="itemize" id='magicparlabel-42825'><li class="itemize_item">Start your program, specifying anything that might affect its behavior.</li>
<li class="itemize_item">Make your program stop on specified conditions.</li>
<li class="itemize_item">Examine what has happened, when your program has stopped</li>
<li class="itemize_item">Change things in your program, so you can experiment with correcting the effects of one bug and go on to learn about another</li>
</ul>
<div class="section" id='magicparlabel-42829'>A sample program</div>
<div class="standard" id='magicparlabel-42830'>There must be an existing program for debugging. The good old &ldquo;Hello World&rdquo; program suffices for the educational purpose in this chapter:
<br />

</div>


<div class='float-listings'><pre class ='listings C'>#include &lt;stdio.h&gt;

int main(int argc, char *argv[])
{
    printf("Hello World!\n");
    return 0;
}</pre></div>


<div class="standard" id='magicparlabel-42842'>We compile it with debugging information with the option <span style='font-family:monospace;'>-g</span>:</div>



<div class="standard" id='magicparlabel-42848'><span style='font-family:monospace;'>$ gcc -m32 -g hello.c -o hello</span></div>



<div class="standard" id='magicparlabel-42854'>Finally, we start gdb with the program as argument:</div>



<div class="standard" id='magicparlabel-42860'><span style='font-family:monospace;'>$ gdb hello</span></div>


<div class="section" id='magicparlabel-42866'>Static inspection of a program</div>
<div class="standard" id='magicparlabel-42867'>Before inspecting a program at runtime, <span style='font-family:monospace;'>gdb</span> loads it first. Upon loading into memory (but without running), a lot of useful information can be retrieve for inspection. The commands in this section can be used before the program runs. However, they are also usable when the program runs and can display even more information.</div>
<div class="subsection" id='magicparlabel-42868'>Command:<span style='font-family:monospace;'> info target/info file/info files</span></div>
<div class="standard" id='magicparlabel-42869'>This command prints the information of the target being debugged. A <em>target</em> is the debugging program.</div>

<div class="example" id='magicparlabel-42870'><div class="example_item"><span class="example_label">Example 0.38.</span>
The output of the command from <span style='font-family:monospace;'>hello</span> program, a local target in detail:
<br />

</div>


<div class="standard" id='magicparlabel-42876'><span style='font-family:monospace;'>(gdb) info target</span></div>





<div class="lyx_code" id='magicparlabel-42887'><div class="lyx_code_item">Symbols from "/tmp/hello".</div>
<div class="lyx_code_item">Local exec file:</div>
<div class="lyx_code_item">	`/tmp/hello', file type elf32-i386.</div>
<div class="lyx_code_item">	Entry point: 0x8048310</div>
<div class="lyx_code_item">	0x08048154 - 0x08048167 is .interp</div>
<div class="lyx_code_item">	0x08048168 - 0x08048188 is .note.ABI-tag</div>
<div class="lyx_code_item">	0x08048188 - 0x080481ac is .note.gnu.build-id</div>
<div class="lyx_code_item">	0x080481ac - 0x080481cc is .gnu.hash</div>
<div class="lyx_code_item">	0x080481cc - 0x0804821c is .dynsym</div>
<div class="lyx_code_item">	0x0804821c - 0x08048266 is .dynstr</div>
<div class="lyx_code_item">	0x08048266 - 0x08048270 is .gnu.version</div>
<div class="lyx_code_item">	0x08048270 - 0x08048290 is .gnu.version_r</div>
<div class="lyx_code_item">	0x08048290 - 0x08048298 is .rel.dyn</div>
<div class="lyx_code_item">	0x08048298 - 0x080482a8 is .rel.plt</div>
<div class="lyx_code_item">	0x080482a8 - 0x080482cb is .init</div>
<div class="lyx_code_item">	0x080482d0 - 0x08048300 is .plt</div>
<div class="lyx_code_item">	0x08048300 - 0x08048308 is .plt.got</div>
<div class="lyx_code_item">	0x08048310 - 0x080484a2 is .text</div>
<div class="lyx_code_item">	0x080484a4 - 0x080484b8 is .fini</div>
<div class="lyx_code_item">	0x080484b8 - 0x080484cd is .rodata</div>
<div class="lyx_code_item">	0x080484d0 - 0x080484fc is .eh_frame_hdr</div>
<div class="lyx_code_item">	0x080484fc - 0x080485c8 is .eh_frame</div>
<div class="lyx_code_item">	0x08049f08 - 0x08049f0c is .init_array</div>
<div class="lyx_code_item">	0x08049f0c - 0x08049f10 is .fini_array</div>
<div class="lyx_code_item">	0x08049f10 - 0x08049f14 is .jcr</div>
<div class="lyx_code_item">	0x08049f14 - 0x08049ffc is .dynamic</div>
<div class="lyx_code_item">	0x08049ffc - 0x0804a000 is .got</div>
<div class="lyx_code_item">	0x0804a000 - 0x0804a014 is .got.plt</div>
<div class="lyx_code_item">	0x0804a014 - 0x0804a01c is .data</div>
<div class="lyx_code_item">	0x0804a01c - 0x0804a020 is .bss</div>
</div>


<div class="standard" id='magicparlabel-42922'>The output displayed reports:</div>

<ul class="itemize" id='magicparlabel-42923'><li class="itemize_item">Path of a symbol file. A <em>symbol file</em> is the file that contains the debugging information. Usually, this is the same file as the binary, but it is common to separate between an executable binary and its debugging information into 2 files, especially for remote debugging. In the example, it is this line:
<br />



<div class="lyx_code" id='magicparlabel-42924'><div class="lyx_code_item">Symbols from "/tmp/hello".</div>
</div>
</li><li class="itemize_item">The path of the debugging program and its file type. In the example, it is this line:
<br />



<div class="lyx_code" id='magicparlabel-42926'><div class="lyx_code_item">Local exec file:</div>
<div class="lyx_code_item">	`/tmp/hello', file type elf32-i386.</div>
</div>
</li><li class="itemize_item">The entry point to the debugging program. That is, the very first code the program runs. In the example, it is this line:
<br />



<div class="lyx_code" id='magicparlabel-42929'><div class="lyx_code_item">Entry point: 0x8048310</div>
</div>
</li><li class="itemize_item">A list of sections with its starting and ending addresses. In the example, it is the remaining output.</li>
</ul>
</div>

<div class="standard" id='magicparlabel-42931'><br />

</div>

<div class="example" id='magicparlabel-42932'><div class="example_item"><span class="example_label">Example 0.39.</span>
If the debugging program runs in a different machine, it is a remote target and <span style='font-family:monospace;'>gdb</span> only prints a brief information:
<br />

</div>


<div class="standard" id='magicparlabel-42938'><span style='font-family:monospace;'>(gdb) info target</span></div>





<div class="lyx_code" id='magicparlabel-42949'><div class="lyx_code_item">Remote serial target in gdb-specific protocol:</div>
<div class="lyx_code_item">Debugging a target over a serial line.</div>
</div>

</div>

<div class="lyx_code" id='magicparlabel-42956'><div class="lyx_code_item"></div>
</div>
<div class="subsection" id='magicparlabel-42957'>Command: <span style='font-family:monospace;'>maint info sections</span></div>
<div class="standard" id='magicparlabel-42958'>This command is similar to <span style='font-family:monospace;'>info targe</span>t but give extra information about program sections, specifically the file offset and the flags of each section.</div>

<div class="example" id='magicparlabel-42959'><div class="example_item"><span class="example_label">Example 0.40.</span>
Here is the output when running against <span style='font-family:monospace;'>hello</span> program:
<br />

</div>


<div class="standard" id='magicparlabel-42965'><span style='font-family:monospace;'>(gdb) maint info sections</span></div>





<div class="lyx_code" id='magicparlabel-42976'><div class="lyx_code_item"><span style='font-size:x-small;'>Exec file:</span></div>
<div class="lyx_code_item"><span style='font-size:x-small;'>    `/tmp/hello', file type elf64-x86-64.</span></div>
<div class="lyx_code_item"><span style='font-size:x-small;'> [0]     0x00400238-&gt;0x00400254 at 0x00000238: .interp ALLOC LOAD READONLY DATA HAS_CONTENTS</span></div>
<div class="lyx_code_item"><span style='font-size:x-small;'> [1]     0x00400254-&gt;0x00400274 at 0x00000254: .note.ABI-tag ALLOC LOAD READONLY DATA HAS_CONTENTS</span></div>
<div class="lyx_code_item"><span style='font-size:x-small;'> [2]     0x00400274-&gt;0x00400298 at 0x00000274: .note.gnu.build-id ALLOC LOAD READONLY DATA HAS_CONTENTS</span></div>
<div class="lyx_code_item"><span style='font-size:x-small;'> [3]     0x00400298-&gt;0x004002b4 at 0x00000298: .gnu.hash ALLOC LOAD READONLY DATA HAS_CONTENTS</span></div>
<div class="lyx_code_item"><span style='font-size:x-small;'> [4]     0x004002b8-&gt;0x00400318 at 0x000002b8: .dynsym ALLOC LOAD READONLY DATA HAS_CONTENTS</span></div>
<div class="lyx_code_item"><span style='font-size:x-small;'> [5]     0x00400318-&gt;0x00400355 at 0x00000318: .dynstr ALLOC LOAD READONLY DATA HAS_CONTENTS</span></div>
<div class="lyx_code_item"><span style='font-size:x-small;'> [6]     0x00400356-&gt;0x0040035e at 0x00000356: .gnu.version ALLOC LOAD READONLY DATA HAS_CONTENTS</span></div>
<div class="lyx_code_item"><span style='font-size:x-small;'> [7]     0x00400360-&gt;0x00400380 at 0x00000360: .gnu.version_r ALLOC LOAD READONLY DATA HAS_CONTENTS</span></div>
<div class="lyx_code_item"><span style='font-size:x-small;'>....remaining output omitted....</span></div>
</div>

</div>
<div class="standard" id='magicparlabel-42992'>The output is similar to <span style='font-family:monospace;'>info target</span>, but with more details. Next to the section names are the section flags, which are attributes of a section. Here, we can see that the sections with <span style='font-family:monospace;'>LOAD</span> flag are from <span style='font-family:monospace;'>LOAD</span> segment. The command can be combined with the section flags for filtered outputs:</div>

<dl class='description' id='magicparlabel-42993'><dt class="description_label">ALLOBJ</dt>
<dd class="description_item"> displays sections for all loaded object files, including shared libraries. Shared libraries are only displayed when the program is already running.</dd>
<dt class="description_label">section&nbsp;names</dt>
<dd class="description_item"> displays only named sections. 
<br />



<div class="example" id='magicparlabel-42995'><div class="example_item"><span class="example_label">Example 0.41.</span>
The command:
<br />

</div>


<div class="standard" id='magicparlabel-43001'><span style='font-family:monospace;'>(gdb) maint info sections .text .data .bss</span></div>


<div class="standard" id='magicparlabel-43002'><br />

</div>

<div class="standard" style='text-align: left;' id='magicparlabel-43007'>only displays <span style='font-family:monospace;'>.text</span>, <span style='font-family:monospace;'>.data</span> and <span style='font-family:monospace;'>.bss</span> sections:</div>



<div class="lyx_code" id='magicparlabel-43013'><div class="lyx_code_item"><span style='font-size:x-small;'>Exec file:</span></div>
<div class="lyx_code_item"><span style='font-size:x-small;'>    `/tmp/hello', file type elf64-x86-64.</span></div>
<div class="lyx_code_item"><span style='font-size:x-small;'> [13]     0x00400430-&gt;0x004005c2 at 0x00000430: .text ALLOC LOAD READONLY CODE HAS_CONTENTS</span></div>
<div class="lyx_code_item"><span style='font-size:x-small;'> [24]     0x00601028-&gt;0x00601038 at 0x00001028: .data ALLOC LOAD DATA HAS_CONTENTS</span></div>
<div class="lyx_code_item"><span style='font-size:x-small;'> [25]     0x00601038-&gt;0x00601040 at 0x00001038: .bss ALLOC</span></div>
</div>

</div>
</dd><dt class="description_label">section-flags</dt>
<dd class="description_item"> displays only sections with specified section flags. Note that these section flags are specific to <span style='font-family:monospace;'>gdb</span>, though it is based on the section attributes defined previously. Currently, <span style='font-family:monospace;'>gdb</span> understands the following flags:
<br />



<dl class='description' id='magicparlabel-43024'><dt class="description_label">ALLOC</dt>
<dd class="description_item"> Section will have space allocated in the process when loaded. Set for all sections except those containing debug information. </dd>
<dt class="description_label">LOAD</dt>
<dd class="description_item"> Section will be loaded from the file into the child process memory. Set for pre-initialized code and data, clear for .bss sections. </dd>
<dt class="description_label">RELOC</dt>
<dd class="description_item"> Section needs to be relocated before loading. </dd>
<dt class="description_label">READONLY</dt>
<dd class="description_item"> Section cannot be modified by the child process. </dd>
<dt class="description_label">CODE</dt>
<dd class="description_item"> Section contains executable code only. </dd>
<dt class="description_label">DATA</dt>
<dd class="description_item"> Section contains data only (no executable code). </dd>
<dt class="description_label">ROM</dt>
<dd class="description_item"> Section will reside in ROM. </dd>
<dt class="description_label">CONSTRUCTOR</dt>
<dd class="description_item"> Section contains data for constructor/destructor lists. </dd>
<dt class="description_label">HAS_CONTENTS</dt>
<dd class="description_item"> Section is not empty. </dd>
<dt class="description_label">NEVER_LOAD</dt>
<dd class="description_item"> An instruction to the linker to not output the section. </dd>
<dt class="description_label">COFF_SHARED_LIBRARY</dt>
<dd class="description_item"> A notification to the linker that the section contains COFF shared library information. COFF is an object file format, similar to ELF. While ELF is the file format for an executable binary, COFF is the file format for an object file.</dd>
<dt class="description_label">IS_COMMON</dt>
<dd class="description_item"> Section contains common symbols.</dd>
</dl>

<div class="example" id='magicparlabel-43036'><div class="example_item"><span class="example_label">Example 0.42.</span>
We can restrict the output to only display sections that contain code with the command:
<br />

</div>


<div class="standard" id='magicparlabel-43042'><span style='font-family:monospace;'>(gdb) maint info sections CODE</span></div>



<div class="standard" id='magicparlabel-43048'>The output:</div>



<div class="lyx_code" id='magicparlabel-43054'><div class="lyx_code_item"><span style='font-size:x-small;'>Exec file:</span></div>
<div class="lyx_code_item"><span style='font-size:x-small;'>    `/tmp/hello', file type elf64-x86-64.</span></div>
<div class="lyx_code_item"><span style='font-size:x-small;'> [10]     0x004003c8-&gt;0x004003e2 at 0x000003c8: .init ALLOC LOAD READONLY CODE HAS_CONTENTS</span></div>
<div class="lyx_code_item"><span style='font-size:x-small;'> [11]     0x004003f0-&gt;0x00400420 at 0x000003f0: .plt ALLOC LOAD READONLY CODE HAS_CONTENTS</span></div>
<div class="lyx_code_item"><span style='font-size:x-small;'> [12]     0x00400420-&gt;0x00400428 at 0x00000420: .plt.got ALLOC LOAD READONLY CODE HAS_CONTENTS</span></div>
<div class="lyx_code_item"><span style='font-size:x-small;'> [13]     0x00400430-&gt;0x004005c2 at 0x00000430: .text ALLOC LOAD READONLY CODE HAS_CONTENTS</span></div>
<div class="lyx_code_item"><span style='font-size:x-small;'> [14]     0x004005c4-&gt;0x004005cd at 0x000005c4: .fini ALLOC LOAD READONLY CODE HAS_CONTENTS</span></div>
</div>

</div>
</dd></dl>
<div class="subsection" id='magicparlabel-43066'>Command:<span style='font-family:monospace;'> info functions</span></div>
<div class="standard" id='magicparlabel-43067'>This commands list all function names and their loaded addresses. The names can be filtered with a regular expression.</div>

<div class="example" id='magicparlabel-43068'><div class="example_item"><span class="example_label">Example 0.43.</span>
Run the command, we get the following output:
<br />

</div>


<div class="standard" id='magicparlabel-43074'><span style='font-family:monospace;'>(gdb) info functions</span></div>





<div class="lyx_code" id='magicparlabel-43085'><div class="lyx_code_item">All defined functions:</div>
<div class="lyx_code_item">File hello.c:</div>
<div class="lyx_code_item">int main(int, char **);</div>
<div class="lyx_code_item">Non-debugging symbols:</div>
<div class="lyx_code_item">0x00000000004003c8  _init</div>
<div class="lyx_code_item">0x0000000000400400  puts@plt</div>
<div class="lyx_code_item">0x0000000000400410  __libc_start_main@plt</div>
<div class="lyx_code_item">0x0000000000400430  _start</div>
<div class="lyx_code_item">0x0000000000400460  deregister_tm_clones</div>
<div class="lyx_code_item">0x00000000004004a0  register_tm_clones</div>
<div class="lyx_code_item">0x00000000004004e0  __do_global_dtors_aux</div>
<div class="lyx_code_item">0x0000000000400500  frame_dummy</div>
<div class="lyx_code_item">0x0000000000400550  __libc_csu_init</div>
<div class="lyx_code_item">0x00000000004005c0  __libc_csu_fini</div>
<div class="lyx_code_item">0x00000000004005c4  _fini</div>
</div>

</div>
<div class="subsection" id='magicparlabel-43105'>Command: <span style='font-family:monospace;'>info variables</span></div>
<div class="standard" id='magicparlabel-43106'>This command lists all global and static variable names, or filtered with a regular expression.</div>

<div class="example" id='magicparlabel-43107'><div class="example_item"><span class="example_label">Example 0.44.</span>
If we add a global variable <span style='font-family:monospace;'>int</span> <span style='font-family:monospace;'>i</span> into the sample source program and recompile then run the command, we get the following output:
<br />

</div>


<div class="standard" id='magicparlabel-43113'><span style='font-family:monospace;'>(gdb) info variables</span></div>





<div class="lyx_code" id='magicparlabel-43124'><div class="lyx_code_item">All defined variables:</div>
<div class="lyx_code_item"></div>
<div class="lyx_code_item">File hello.c:</div>
<div class="lyx_code_item">int i;</div>
<div class="lyx_code_item"></div>
<div class="lyx_code_item">Non-debugging symbols:</div>
<div class="lyx_code_item">0x00000000004005d0  _IO_stdin_used</div>
<div class="lyx_code_item">0x00000000004005e4  __GNU_EH_FRAME_HDR</div>
<div class="lyx_code_item">0x0000000000400708  __FRAME_END__</div>
<div class="lyx_code_item">0x0000000000600e10  __frame_dummy_init_array_entry</div>
<div class="lyx_code_item">0x0000000000600e10  __init_array_start</div>
<div class="lyx_code_item">0x0000000000600e18  __do_global_dtors_aux_fini_array_entry</div>
<div class="lyx_code_item">0x0000000000600e18  __init_array_end</div>
<div class="lyx_code_item">0x0000000000600e20  __JCR_END__</div>
<div class="lyx_code_item">0x0000000000600e20  __JCR_LIST__</div>
<div class="lyx_code_item">0x0000000000600e28  _DYNAMIC</div>
<div class="lyx_code_item">0x0000000000601000  _GLOBAL_OFFSET_TABLE_</div>
<div class="lyx_code_item">0x0000000000601028  __data_start</div>
<div class="lyx_code_item">0x0000000000601028  data_start</div>
<div class="lyx_code_item">0x0000000000601030  __dso_handle</div>
<div class="lyx_code_item">0x000000000060103c  __bss_start</div>
<div class="lyx_code_item">0x000000000060103c  _edata</div>
<div class="lyx_code_item">0x000000000060103c  completed</div>
<div class="lyx_code_item">0x0000000000601040  __TMC_END__</div>
<div class="lyx_code_item">0x0000000000601040  _end</div>
</div>

</div>
<div class="subsection" id='magicparlabel-43154'>Command: <span style='font-family:monospace;'>disassemble/disas</span></div>
<div class="standard" id='magicparlabel-43155'>This command displays the assembly code of the executable file. </div>

<div class="example" id='magicparlabel-43156'><div class="example_item"><span class="example_label">Example 0.45.</span>
<span style='font-family:monospace;'>gdb</span> can display the assembly code of a function:
<br />

</div>


<div class="standard" id='magicparlabel-43162'><span style='font-family:monospace;'>(gdb) disassemble main</span></div>





<div class="lyx_code" id='magicparlabel-43173'><div class="lyx_code_item">Dump of assembler code for function main:</div>
<div class="lyx_code_item">   0x0804840b &lt;+0&gt;: 	lea    ecx,[esp+0x4]</div>
<div class="lyx_code_item">   0x0804840f &lt;+4&gt;: 	and    esp,0xfffffff0</div>
<div class="lyx_code_item">   0x08048412 &lt;+7&gt;: 	push   DWORD PTR [ecx-0x4]</div>
<div class="lyx_code_item">   0x08048415 &lt;+10&gt;:	push   ebp</div>
<div class="lyx_code_item">   0x08048416 &lt;+11&gt;:	mov    ebp,esp</div>
<div class="lyx_code_item">   0x08048418 &lt;+13&gt;:	push   ecx</div>
<div class="lyx_code_item">   0x08048419 &lt;+14&gt;:	sub    esp,0x4</div>
<div class="lyx_code_item">   0x0804841c &lt;+17&gt;:	sub    esp,0xc</div>
<div class="lyx_code_item">   0x0804841f &lt;+20&gt;:	push   0x80484c0</div>
<div class="lyx_code_item">   0x08048424 &lt;+25&gt;:	call   0x80482e0 &lt;puts@plt&gt;</div>
<div class="lyx_code_item">   0x08048429 &lt;+30&gt;:	add    esp,0x10</div>
<div class="lyx_code_item">   0x0804842c &lt;+33&gt;:	mov    eax,0x0</div>
<div class="lyx_code_item">   0x08048431 &lt;+38&gt;:	mov    ecx,DWORD PTR [ebp-0x4]</div>
<div class="lyx_code_item">   0x08048434 &lt;+41&gt;:	leave  </div>
<div class="lyx_code_item">   0x08048435 &lt;+42&gt;:	lea    esp,[ecx-0x4]</div>
<div class="lyx_code_item">   0x08048438 &lt;+45&gt;:	ret    </div>
<div class="lyx_code_item">End of assembler dump.</div>
</div>


<div class="example" id='magicparlabel-43196'><div class="example_item"><span class="example_label">Example 0.46.</span>
It would be more useful if source is included:</div>
</div>


<div class="standard" id='magicparlabel-43202'><span style='font-family:monospace;'>(gdb) disassemble /s main</span></div>





<div class="lyx_code" id='magicparlabel-43213'><div class="lyx_code_item">Dump of assembler code for function main:</div>
<div class="lyx_code_item">hello.c:</div>
<div class="lyx_code_item">4	{</div>
<div class="lyx_code_item">   0x0804840b &lt;+0&gt;:	lea     ecx,[esp+0x4]</div>
<div class="lyx_code_item">   0x0804840f &lt;+4&gt;:	and     esp,0xfffffff0</div>
<div class="lyx_code_item">   0x08048412 &lt;+7&gt;:	push    DWORD PTR [ecx-0x4]</div>
<div class="lyx_code_item">   0x08048415 &lt;+10&gt;:	push   ebp</div>
<div class="lyx_code_item">   0x08048416 &lt;+11&gt;:	mov    ebp,esp</div>
<div class="lyx_code_item">   0x08048418 &lt;+13&gt;:	push   ecx</div>
<div class="lyx_code_item">   0x08048419 &lt;+14&gt;:	sub    esp,0x4</div>
<div class="lyx_code_item">5	    printf("Hello World!\n");</div>
<div class="lyx_code_item">   0x0804841c &lt;+17&gt;:	sub    esp,0xc</div>
<div class="lyx_code_item">   0x0804841f &lt;+20&gt;:	push   0x80484c0</div>
<div class="lyx_code_item">   0x08048424 &lt;+25&gt;:	call   0x80482e0 &lt;puts@plt&gt;</div>
<div class="lyx_code_item">   0x08048429 &lt;+30&gt;:	add    esp,0x10</div>
<div class="lyx_code_item">6	    return 0;</div>
<div class="lyx_code_item">   0x0804842c &lt;+33&gt;:	mov    eax,0x0</div>
<div class="lyx_code_item">7	}</div>
<div class="lyx_code_item">   0x08048431 &lt;+38&gt;:	mov    ecx,DWORD PTR [ebp-0x4]</div>
<div class="lyx_code_item">   0x08048434 &lt;+41&gt;:	leave  </div>
<div class="lyx_code_item">   0x08048435 &lt;+42&gt;:	lea    esp,[ecx-0x4]</div>
<div class="lyx_code_item">   0x08048438 &lt;+45&gt;:	ret    </div>
<div class="lyx_code_item">End of assembler dump.</div>
</div>


<div class="standard" id='magicparlabel-43241'>Now the high level source (in green text) is included as part of the assembly dump. Each line is backed by the corresponding assembly code below it. </div>
</div>

<div class="standard" id='magicparlabel-43242'><br />

</div>

<div class="example" id='magicparlabel-43243'><div class="example_item"><span class="example_label">Example 0.47.</span>
If the option <span style='font-family:monospace;'>/r</span> is added, raw instructions in hex are included, just like how <span style='font-family:monospace;'>objdump</span> displays assembly code by default:
<br />

</div>


<div class="standard" id='magicparlabel-43249'><span style='font-family:monospace;'>(gdb) disassemble /rs main</span></div>





<div class="lyx_code" id='magicparlabel-43260'><div class="lyx_code_item">Dump of assembler code for function main:</div>
<div class="lyx_code_item">hello.c:</div>
<div class="lyx_code_item">4	{</div>
<div class="lyx_code_item">   0x0804840b &lt;+0&gt;:	 8d 4c 24 04	   lea    ecx,[esp+0x4]</div>
<div class="lyx_code_item">   0x0804840f &lt;+4&gt;:	 83 e4 f0	      and    esp,0xfffffff0</div>
<div class="lyx_code_item">   0x08048412 &lt;+7&gt;:	 ff 71 fc	      push   DWORD PTR [ecx-0x4]</div>
<div class="lyx_code_item">   0x08048415 &lt;+10&gt;:	55	  push   ebp</div>
<div class="lyx_code_item">   0x08048416 &lt;+11&gt;:	89 e5   mov    ebp,esp</div>
<div class="lyx_code_item">   0x08048418 &lt;+13&gt;:	51	  push   ecx</div>
<div class="lyx_code_item">   0x08048419 &lt;+14&gt;:	83 ec 04	      sub    esp,0x4</div>
<div class="lyx_code_item">5	    printf("Hello World!\n");</div>
<div class="lyx_code_item">   0x0804841c &lt;+17&gt;:	83 ec 0c	      sub    esp,0xc</div>
<div class="lyx_code_item">   0x0804841f &lt;+20&gt;:	68 c0 84 04 08	push   0x80484c0</div>
<div class="lyx_code_item">   0x08048424 &lt;+25&gt;:	e8 b7 fe ff ff	call   0x80482e0 &lt;puts@plt&gt;</div>
<div class="lyx_code_item">   0x08048429 &lt;+30&gt;:	83 c4 10	      add    esp,0x10</div>
<div class="lyx_code_item">6	    return 0;</div>
<div class="lyx_code_item">   0x0804842c &lt;+33&gt;:	b8 00 00 00 00	mov    eax,0x0</div>
<div class="lyx_code_item">7	}</div>
<div class="lyx_code_item">   0x08048431 &lt;+38&gt;:	8b 4d fc	      mov    ecx,DWORD PTR [ebp-0x4]</div>
<div class="lyx_code_item">   0x08048434 &lt;+41&gt;:	c9	leave  </div>
<div class="lyx_code_item">   0x08048435 &lt;+42&gt;:	8d 61 fc	      lea    esp,[ecx-0x4]</div>
<div class="lyx_code_item">   0x08048438 &lt;+45&gt;:	c3	ret    </div>
<div class="lyx_code_item">End of assembler dump.</div>
</div>


<div class="example" id='magicparlabel-43288'><div class="example_item"><span class="example_label">Example 0.48.</span>
A function in a specific file can also be specified:</div>
</div>


<div class="standard" id='magicparlabel-43294'><span style='font-family:monospace;'>(gdb) disassemble /sr 'hello.c'::main</span></div>





<div class="lyx_code" id='magicparlabel-43305'><div class="lyx_code_item">Dump of assembler code for function main:</div>
<div class="lyx_code_item">hello.c:</div>
<div class="lyx_code_item">4	{</div>
<div class="lyx_code_item">   0x0804840b &lt;+0&gt;:	 8d 4c 24 04	  lea    ecx,[esp+0x4]</div>
<div class="lyx_code_item">   0x0804840f &lt;+4&gt;:	 83 e4 f0	     and    esp,0xfffffff0</div>
<div class="lyx_code_item">   0x08048412 &lt;+7&gt;:	 ff 71 fc	     push   DWORD PTR [ecx-0x4]</div>
<div class="lyx_code_item">   0x08048415 &lt;+10&gt;:	55	   push   ebp</div>
<div class="lyx_code_item">   0x08048416 &lt;+11&gt;:	89 e5	mov    ebp,esp</div>
<div class="lyx_code_item">   0x08048418 &lt;+13&gt;:	51	   push   ecx</div>
<div class="lyx_code_item">   0x08048419 &lt;+14&gt;:	83 ec 04	      sub    esp,0x4</div>
<div class="lyx_code_item">5	    printf("Hello World!\n");</div>
<div class="lyx_code_item">   0x0804841c &lt;+17&gt;:	83 ec 0c	      sub    esp,0xc</div>
<div class="lyx_code_item">   0x0804841f &lt;+20&gt;:	68 c0 84 04 08	push   0x80484c0</div>
<div class="lyx_code_item">   0x08048424 &lt;+25&gt;:	e8 b7 fe ff ff	call   0x80482e0 &lt;puts@plt&gt;</div>
<div class="lyx_code_item">   0x08048429 &lt;+30&gt;:	83 c4 10	      add    esp,0x10</div>
<div class="lyx_code_item">6	    return 0;</div>
<div class="lyx_code_item">   0x0804842c &lt;+33&gt;:	b8 00 00 00 00	mov    eax,0x0</div>
<div class="lyx_code_item">7	}</div>
<div class="lyx_code_item">   0x08048431 &lt;+38&gt;:	8b 4d fc	      mov    ecx,DWORD PTR [ebp-0x4]</div>
<div class="lyx_code_item">   0x08048434 &lt;+41&gt;:	c9	leave  </div>
<div class="lyx_code_item">   0x08048435 &lt;+42&gt;:	8d 61 fc	      lea    esp,[ecx-0x4]</div>
<div class="lyx_code_item">   0x08048438 &lt;+45&gt;:	c3	ret    </div>
<div class="lyx_code_item">End of assembler dump.</div>
</div>


<div class="standard" id='magicparlabel-43333'>The filename must be included in a single quote, and the function must be prefixed by double colons e.g. <span style='font-family:monospace;'>'hello.c'::main</span> to specify disassembling of the function <span style='font-family:monospace;'>main</span> in the file <span style='font-family:monospace;'>hello.c</span>.</div>
</div>
<div class="subsection" id='magicparlabel-43334'>Command: <span style='font-family:monospace;'>x</span></div>
<div class="standard" id='magicparlabel-43335'>This command examines the content of a given memory range.</div>

<div class="example" id='magicparlabel-43336'><div class="example_item"><span class="example_label">Example 0.49.</span>
We can examine the raw content in <span style='font-family:monospace;'>main</span>:
<br />

</div>


<div class="standard" id='magicparlabel-43342'><span style='font-family:monospace;'>(gdb) x main</span></div>





<div class="lyx_code" id='magicparlabel-43353'><div class="lyx_code_item">0x804840b &lt;main&gt;:	0x04244c8d</div>
</div>


<div class="standard" id='magicparlabel-43359'>By default, without any argument, the command only prints the content of a single memory address. In this case, that is the starting memory address in <span style='font-family:monospace;'>main</span>.</div>
</div>

<div class="standard" id='magicparlabel-43360'><br />

</div>

<div class="example" id='magicparlabel-43361'><div class="example_item"><span class="example_label">Example 0.50.</span>
With format arguments, the command can print a range of memory in a specific format.
<br />

</div>


<div class="standard" id='magicparlabel-43367'><span style='font-family:monospace;'>(gdb) x/20b main</span></div>





<div class="lyx_code" id='magicparlabel-43378'><div class="lyx_code_item">0x804840b &lt;main&gt;:	   0x8d	0x4c	0x24	0x04	0x83	0xe40xf0	0xff</div>
<div class="lyx_code_item">0x8048413 &lt;main+8&gt;:	 0x71	0xfc	0x55	0x89	0xe5	0x510x83	0xec</div>
<div class="lyx_code_item">0x804841b &lt;main+16&gt;:	0x04	0x83	0xec	0x0c</div>
</div>


<div class="standard" id='magicparlabel-43386'><span style='font-family:monospace;'>/20b main</span> argument means that the command prints 20 bytes, where <span style='font-family:monospace;'>main</span> starts in memory.</div>
<div class="example_item">The general form for format argument is: <span style='font-family:monospace;'>/&lt;repeated count&gt;&lt;format letter&gt;</span></div>
<div class="example_item">If the repeated count is not supplied, by default <span style='font-family:monospace;'>gdb</span> supplies the count as 1. The format letter is one the following value:</div>
<div class="example_item">

<table><tbody><tr><td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-43420'><b>Letter</b></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-43423'><b>Description</b></div>
</td>
</tr><tr><td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-43426'><span style='font-family:monospace;'>o</span></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-43429'>Print the memory content in <em>octal</em> format.</div>
</td>
</tr><tr><td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-43432'><span style='font-family:monospace;'>x</span></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-43435'>Print the memory content in hex format.</div>
</td>
</tr><tr><td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-43438'><span style='font-family:monospace;'>d</span></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-43441'>Print the memory content in decimal format.</div>
</td>
</tr><tr><td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-43444'><span style='font-family:monospace;'>u</span></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-43447'>Print the memory content in <em>unsigned decimal</em> format.</div>
</td>
</tr><tr><td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-43450'><span style='font-family:monospace;'>t</span></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-43453'>Print the memory content in <em>binary</em> format.</div>
</td>
</tr><tr><td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-43456'><span style='font-family:monospace;'>f</span></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-43459'>Print the memory content in <em>float</em> format.</div>
</td>
</tr><tr><td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-43462'><span style='font-family:monospace;'>a</span></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-43465'>Print the memory content as <em>memory addresses</em>.</div>
</td>
</tr><tr><td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-43468'><span style='font-family:monospace;'>i</span></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-43471'>Print the memory content as a series of assembly instructions, similar to <span style='font-family:monospace;'>disassemble</span> command.</div>
</td>
</tr><tr><td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-43474'><span style='font-family:monospace;'>c</span></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-43477'>Print the memory content as an array of ASCII characters.</div>
</td>
</tr><tr><td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-43480'><span style='font-family:monospace;'>s</span></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-43483'>Print the memory content as a string</div>
</td>
</tr></tbody>
</table>
</div>
<div class="example_item">Depends on the circumstance, certain format is advantageous than the others. For example, if a memory region contains floating-point numbers, then it is better to use the format <span style='font-family:monospace;'>f</span> than viewing the number as separated 1-byte hex numbers.</div>
</div>
<div class="subsection" id='magicparlabel-43485'>Command: <span style='font-family:monospace;'>print/p</span></div>
<div class="standard" id='magicparlabel-43486'>Examining raw memory is useful but usually it is better to have a more human-readable output. This command does precisely the task: it pretty-prints an expression. An expression can be a global variable, a local variable in current stack frame, a function, a register, a number, etc.</div>
<div class="section" id='magicparlabel-43487'>Runtime inspection of a program</div>
<div class="standard" id='magicparlabel-43488'>The main use of a debugger is to examine the state of a program, when it is running. <span style='font-family:monospace;'>gdb</span> provides a set of useful commands for retrieving useful runtime information.</div>
<div class="subsection" id='magicparlabel-43489'>Command: <span style='font-family:monospace;'>run</span></div>
<div class="standard" id='magicparlabel-43490'>This command starts running the program.</div>

<div class="example" id='magicparlabel-43491'><div class="example_item"><span class="example_label">Example 0.51.</span>
Run the hello program:
<br />

</div>


<div class="standard" id='magicparlabel-43497'><span style='font-family:monospace;'>(gdb) r</span></div>





<div class="lyx_code" id='magicparlabel-43508'><div class="lyx_code_item">Starting program: /tmp/hello </div>
<div class="lyx_code_item">Hello World!</div>
<div class="lyx_code_item">[Inferior 1 (process 1002) exited normally]</div>
</div>


<div class="standard" id='magicparlabel-43516'>The program runs successfully and printed the message &ldquo;Hello World&rdquo;. However, it would not be useful if all <span style='font-family:monospace;'>gdb</span> can do is run a program.</div>
</div>
<div class="subsection" id='magicparlabel-43517'>Command: <span style='font-family:monospace;'>break/b</span></div>
<div class="standard" id='magicparlabel-43518'>This command sets a breakpoint at a location in the high-level source code. When <span style='font-family:monospace;'>gdb</span> runs to a specific location marked by a breakpoint, it stops executing for a programmer to inspect the current state of a program.</div>

<div class="example" id='magicparlabel-43519'><div class="example_item"><span class="example_label">Example 0.52.</span>
A breakpoint can be set on a line as displayed by an editor. Suppose we want to set a breakpoint at line 3 of the program, which is the start of <span style='font-family:monospace;'>main</span> function:
<br />

</div>

<div class='float-listings'><pre class ='listings C'>#include &lt;stdio.h&gt;

int main(int argc, char *argv[])
{
    printf("Hello World!\n");
    return 0;
}</pre></div>


<div class="standard" id='magicparlabel-43531'>When running a program, instead of running from start to finish, <span style='font-family:monospace;'>gdb</span> stopped at line 3:</div>



<div class="standard" id='magicparlabel-43537'><span style='font-family:monospace;'>(gdb) b 3</span></div>





<div class="lyx_code" id='magicparlabel-43548'><div class="lyx_code_item">Breakpoint 1 at 0x400535: file hello.c, line 3.</div>
</div>




<div class="standard" id='magicparlabel-43559'><span style='font-family:monospace;'>(gdb) r</span></div>





<div class="lyx_code" id='magicparlabel-43570'><div class="lyx_code_item">Starting program: /tmp/hello </div>
<div class="lyx_code_item">Breakpoint 1, main (argc=1, argv=0x7fffffffdfb8) at hello.c:5</div>
<div class="lyx_code_item">5	    printf("Hello World!\n");</div>
</div>


<div class="standard" id='magicparlabel-43578'>The breakpoint is at line 3, but <span style='font-family:monospace;'>gdb</span> stopped line 5. The reason is that line 3 does not contain code, but a function signature; <span style='font-family:monospace;'>gdb</span> only stops where it can execute code. The code in the function starts at line 5, the call to <span style='font-family:monospace;'>printf</span>, so <span style='font-family:monospace;'>gdb</span> stops there.</div>
</div>

<div class="standard" id='magicparlabel-43579'><br />

</div>

<div class="example" id='magicparlabel-43580'><div class="example_item"><span class="example_label">Example 0.53.</span>
Line of code is not always the reliable way to specify a breakpoint, as the source code can be changed. What if <span style='font-family:monospace;'>gdb</span> should always stop at <span style='font-family:monospace;'>main</span> function? In this case, a better method is to use the function name directly:
<br />

</div>


<div class="standard" id='magicparlabel-43586'><span style='font-family:monospace;'>b main</span></div>



<div class="standard" id='magicparlabel-43592'>Then, regardless of how the source code changes, <span style='font-family:monospace;'>gdb</span> always stops at the <span style='font-family:monospace;'>main</span> function.</div>
</div>

<div class="standard" id='magicparlabel-43593'><br />

</div>

<div class="example" id='magicparlabel-43594'><div class="example_item"><span class="example_label">Example 0.54.</span>
Sometimes, the debugging program does not contain debug info, or <span style='font-family:monospace;'>gdb</span> is debugging assembly code. In that case, a memory address can be specified as a stop point. To get the function address, <span style='font-family:monospace;'>print</span> command can be used:
<br />

</div>


<div class="standard" id='magicparlabel-43600'><span style='font-family:monospace;'>(gdb) print main</span></div>





<div class="lyx_code" id='magicparlabel-43611'><div class="lyx_code_item">$3 = {int (int, char **)} 0x400526 &lt;main&gt;</div>
</div>


<div class="standard" id='magicparlabel-43617'>Knowing the address of main, we can easily set a breakpoint with a memory address:</div>



<div class="lyx_code" id='magicparlabel-43623'><div class="lyx_code_item">b *0x400526</div>
</div>

</div>

<div class="standard" id='magicparlabel-43629'><br />

</div>

<div class="example" id='magicparlabel-43630'><div class="example_item"><span class="example_label">Example 0.55.</span>
<span style='font-family:monospace;'>gdb</span> can also set breakpoint in any source file. Suppose that <span style='font-family:monospace;'>hello</span> program is composed not just one file but many files e.g. <span style='font-family:monospace;'>hello1.c</span>, <span style='font-family:monospace;'>hello2.c</span>, <span style='font-family:monospace;'>hello3.c</span>... In that case, simply add the filename before either a line number:
<br />

</div>


<div class="standard" id='magicparlabel-43636'><span style='font-family:monospace;'>b hello.c:3</span></div>


</div>

<div class="standard" id='magicparlabel-43642'><br />

</div>

<div class="example" id='magicparlabel-43643'><div class="example_item"><span class="example_label">Example 0.56.</span>
A function name in a specific file can also be set:
<br />

</div>


<div class="standard" id='magicparlabel-43649'><span style='font-family:monospace;'>b hello.c:main</span></div>


</div>
<div class="subsection" id='magicparlabel-43655'>Command: <span style='font-family:monospace;'>next/n</span></div>
<div class="standard" id='magicparlabel-43656'>This command executes the current line and stops at the next line. When the current line is a function call, steps over it.</div>

<div class="example" id='magicparlabel-43657'><div class="example_item"><span class="example_label">Example 0.57.</span>
After setting a breakpoint at <span style='font-family:monospace;'>main</span>, run a program and stop at the first <span style='font-family:monospace;'>printf</span>:
<br />

</div>


<div class="standard" id='magicparlabel-43663'><span style='font-family:monospace;'>(gdb) r</span></div>





<div class="lyx_code" id='magicparlabel-43674'><div class="lyx_code_item">Starting program: /tmp/hello </div>
<div class="lyx_code_item">Breakpoint 1, main (argc=1, argv=0x7fffffffdfb8) at hello.c:5</div>
<div class="lyx_code_item">5	    printf("Hello World!\n");</div>
</div>


<div class="standard" id='magicparlabel-43682'>Then, to proceed to the next statement, we use the <span style='font-family:monospace;'>next</span> command:</div>



<div class="standard" id='magicparlabel-43688'><span style='font-family:monospace;'>(gdb) n</span></div>





<div class="lyx_code" id='magicparlabel-43699'><div class="lyx_code_item">Hello World!</div>
<div class="lyx_code_item">6	    return 0;</div>
</div>


<div class="standard" id='magicparlabel-43706'>In the output, the first line shows the output produced after executing line 5; then, the next line shows where <span style='font-family:monospace;'>gdb</span> stops currently, which is line 6.</div>
</div>
<div class="subsection" id='magicparlabel-43707'>Command: <span style='font-family:monospace;'>step/s</span></div>
<div class="standard" id='magicparlabel-43708'>This command executes the current line and stops at the next line. When the current line is a function call, steps into it to the first next line in the called function.</div>

<div class="example" id='magicparlabel-43709'><div class="example_item"><span class="example_label">Example 0.58.</span>
Suppose we have a new function <span style='font-family:monospace;'>add</span><div class="foot"><span class="foot_label">25</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-43713'>Why should we add a new function and function call instead of using the existing <span style='font-family:monospace;'>printf</span> call? Stepping into shared library functions is tricky because to make debugging works, the debug info must be installed and loaded. It is not worth the trouble for demonstrating this simple command.</div>
</div></div>:
<br />

</div>

<div class='float-listings'><pre class ='listings C'>#include &lt;stdio.h&gt;

int add(int a, int b) {
	return a + b;
}

int main(int argc, char *argv[])
{
	add(1, 2);
    printf("Hello World!\n");
    return 0;
}</pre></div>


<div class="standard" id='magicparlabel-43730'>If <span style='font-family:monospace;'>step</span> command is used instead of <span style='font-family:monospace;'>next</span> on the function call <span style='font-family:monospace;'>printf</span>, gdb steps inside the function:</div>



<div class="standard" id='magicparlabel-43736'><span style='font-family:monospace;'>(gdb) r</span></div>





<div class="lyx_code" id='magicparlabel-43747'><div class="lyx_code_item">Starting program: /tmp/hello </div>
<div class="lyx_code_item">Breakpoint 1, main (argc=1, argv=0xffffd154) at hello.c:11</div>
<div class="lyx_code_item">11	    add(1, 2);</div>
</div>




<div class="standard" id='magicparlabel-43760'><span style='font-family:monospace;'>(gdb) s</span></div>





<div class="lyx_code" id='magicparlabel-43771'><div class="lyx_code_item">add (a=1, b=2) at hello.c:6</div>
<div class="lyx_code_item">6	    return a + b;</div>
</div>


<div class="standard" id='magicparlabel-43778'>After executing the command <span style='font-family:monospace;'>s</span>, <span style='font-family:monospace;'>gdb</span> stepped into the <span style='font-family:monospace;'>add</span> function where the first statement is a <span style='font-family:monospace;'>return</span>.</div>
</div>
<div class="subsection" id='magicparlabel-43779'>Command: <span style='font-family:monospace;'>ni</span></div>
<div class="standard" id='magicparlabel-43780'>At the core, <span style='font-family:monospace;'>gdb</span> operates on assembly instruction. Source line by line debugging is simply an enhancement to make it friendlier for programmers. Each statement in C translates to one or more assembly instruction, as shown with <span style='font-family:monospace;'>objdump</span> and <span style='font-family:monospace;'>disassemble</span> command. With the debug info available, <span style='font-family:monospace;'>gdb </span>knows how many instructions belong to one line of high-level code; line by line debugging is just a execution of assembly instructions of a line when moving from the current line to the next.</div>

<div class="standard" id='magicparlabel-43781'>This command executes the <em>one</em> assembly instruction belongs to the current line. Until all assembly instructions of the current line are executed, <span style='font-family:monospace;'>gdb</span> will not move to the next line. If the current instruction is a <span style='font-family:monospace;'>call</span>, step over it to the next instruction.</div>

<div class="example" id='magicparlabel-43782'><div class="example_item"><span class="example_label">Example 0.59.</span>
When breakpoint is on the <span style='font-family:monospace;'>printf</span> call and <span style='font-family:monospace;'>ni</span> is used, it steps through each assembly instruction:
<br />

</div>


<div class="standard" id='magicparlabel-43788'><span style='font-family:monospace;'>(gdb) disassemble /s main</span></div>





<div class="lyx_code" id='magicparlabel-43799'><div class="lyx_code_item">Dump of assembler code for function main:</div>
<div class="lyx_code_item">hello.c:</div>
<div class="lyx_code_item">4	{</div>
<div class="lyx_code_item">   0x0804840b &lt;+0&gt;:	 lea    ecx,[esp+0x4]</div>
<div class="lyx_code_item">   0x0804840f &lt;+4&gt;:	 and    esp,0xfffffff0</div>
<div class="lyx_code_item">   0x08048412 &lt;+7&gt;:	 push   DWORD PTR [ecx-0x4]</div>
<div class="lyx_code_item">   0x08048415 &lt;+10&gt;:	push   ebp</div>
<div class="lyx_code_item">   0x08048416 &lt;+11&gt;:	mov    ebp,esp</div>
<div class="lyx_code_item">   0x08048418 &lt;+13&gt;:	push   ecx</div>
<div class="lyx_code_item">   0x08048419 &lt;+14&gt;:	sub    esp,0x4</div>
<div class="lyx_code_item">5	    printf("Hello World!\n");</div>
<div class="lyx_code_item">   0x0804841c &lt;+17&gt;:	sub    esp,0xc</div>
<div class="lyx_code_item">   0x0804841f &lt;+20&gt;:	push   0x80484c0</div>
<div class="lyx_code_item">   0x08048424 &lt;+25&gt;:	call   0x80482e0 &lt;puts@plt&gt;</div>
<div class="lyx_code_item">   0x08048429 &lt;+30&gt;:	add    esp,0x10</div>
<div class="lyx_code_item">6	    return 0;</div>
<div class="lyx_code_item">=&gt; 0x0804842c &lt;+33&gt;:	mov    eax,0x0</div>
<div class="lyx_code_item">7	}</div>
<div class="lyx_code_item">   0x08048431 &lt;+38&gt;:	mov    ecx,DWORD PTR [ebp-0x4]</div>
<div class="lyx_code_item">   0x08048434 &lt;+41&gt;:	leave  </div>
<div class="lyx_code_item">   0x08048435 &lt;+42&gt;:	lea    esp,[ecx-0x4]</div>
<div class="lyx_code_item">   0x08048438 &lt;+45&gt;:	ret    </div>
<div class="lyx_code_item">End of assembler dump.</div>
</div>




<div class="standard" id='magicparlabel-43832'><span style='font-family:monospace;'>(gdb) r</span></div>





<div class="lyx_code" id='magicparlabel-43843'><div class="lyx_code_item">Starting program: /tmp/hello </div>
<div class="lyx_code_item">Breakpoint 1, main (argc=1, argv=0xffffd154) at hello.c:5</div>
<div class="lyx_code_item">5	    printf("Hello World!\n");</div>
</div>




<div class="standard" id='magicparlabel-43856'><span style='font-family:monospace;'>(gdb) ni</span></div>





<div class="lyx_code" id='magicparlabel-43867'><div class="lyx_code_item">0x0804841f	5	    printf("Hello World!\n");</div>
</div>




<div class="standard" id='magicparlabel-43878'><span style='font-family:monospace;'>(gdb) ni</span></div>





<div class="lyx_code" id='magicparlabel-43889'><div class="lyx_code_item">0x08048424	5	    printf("Hello World!\n");</div>
</div>




<div class="standard" id='magicparlabel-43900'><span style='font-family:monospace;'>(gdb) ni</span></div>





<div class="lyx_code" id='magicparlabel-43911'><div class="lyx_code_item">Hello World!</div>
<div class="lyx_code_item">0x08048429	5	    printf("Hello World!\n");</div>
</div>




<div class="standard" id='magicparlabel-43923'><span style='font-family:monospace;'>(gdb)</span></div>





<div class="lyx_code" id='magicparlabel-43934'><div class="lyx_code_item">6	    return 0;</div>
</div>


<div class="standard" id='magicparlabel-43940'>Upon entering <span style='font-family:monospace;'>ni</span>, <span style='font-family:monospace;'>gdb </span>executes current instruction and display the <em>next</em> instruction. That's why from the output, <span style='font-family:monospace;'>gdb</span> only displays 3 addresses: <span style='font-family:monospace;'>0x0804841f</span>, <span style='font-family:monospace;'>0x08048424</span> and <span style='font-family:monospace;'>0x08048429</span>. The instruction at <span style='font-family:monospace;'>0x0804841c</span>, which is the first instruction of <span style='font-family:monospace;'>printf</span>, is not displayed because it is the first instruction that <span style='font-family:monospace;'>gdb</span> stopped at. Assume that <span style='font-family:monospace;'>gdb</span> stopped at the first instruction of <span style='font-family:monospace;'>printf</span> at <span style='font-family:monospace;'>0x0804841c</span>, the current instruction can be displayed using <span style='font-family:monospace;'>x</span> command:</div>



<div class="lyx_code" id='magicparlabel-43946'><div class="lyx_code_item">(gdb) x/i $eip</div>
</div>




<div class="lyx_code" id='magicparlabel-43957'><div class="lyx_code_item">=&gt; 0x804841c &lt;main+17&gt;: sub    esp,0xc</div>
</div>

</div>
<div class="subsection" id='magicparlabel-43963'>Command: <span style='font-family:monospace;'>si</span></div>
<div class="standard" id='magicparlabel-43964'>Similar to <span style='font-family:monospace;'>ni</span>, this command executes the current assembly instruction belongs to the current line. But if the current instruction is a <span style='font-family:monospace;'>call</span>, step into it to the first next instruction in the called function.</div>

<div class="example" id='magicparlabel-43965'><div class="example_item"><span class="example_label">Example 0.60.</span>
Recall that the assembly code generated from <span style='font-family:monospace;'>printf</span> contains a <span style='font-family:monospace;'>call</span> instruction:
<br />

</div>


<div class="standard" id='magicparlabel-43971'><span style='font-family:monospace;'>(gdb) disassemble /s main</span></div>





<div class="lyx_code" id='magicparlabel-43982'><div class="lyx_code_item">Dump of assembler code for function main:</div>
<div class="lyx_code_item">hello.c:</div>
<div class="lyx_code_item">4	{</div>
<div class="lyx_code_item">   0x0804840b &lt;+0&gt;:	lea    ecx,[esp+0x4]</div>
<div class="lyx_code_item">   0x0804840f &lt;+4&gt;:	and    esp,0xfffffff0</div>
<div class="lyx_code_item">   0x08048412 &lt;+7&gt;:	push   DWORD PTR [ecx-0x4]</div>
<div class="lyx_code_item">   0x08048415 &lt;+10&gt;:	push   ebp</div>
<div class="lyx_code_item">   0x08048416 &lt;+11&gt;:	mov    ebp,esp</div>
<div class="lyx_code_item">   0x08048418 &lt;+13&gt;:	push   ecx</div>
<div class="lyx_code_item">   0x08048419 &lt;+14&gt;:	sub    esp,0x4</div>
<div class="lyx_code_item">5	    printf("Hello World!\n");</div>
<div class="lyx_code_item">   0x0804841c &lt;+17&gt;:	sub    esp,0xc</div>
<div class="lyx_code_item">   0x0804841f &lt;+20&gt;:	push   0x80484c0</div>
<div class="lyx_code_item">   0x08048424 &lt;+25&gt;:	call   0x80482e0 &lt;puts@plt&gt;</div>
<div class="lyx_code_item">   0x08048429 &lt;+30&gt;:	add    esp,0x10</div>
<div class="lyx_code_item">6	    return 0;</div>
<div class="lyx_code_item">=&gt; 0x0804842c &lt;+33&gt;:	mov    eax,0x0</div>
<div class="lyx_code_item">7	}</div>
<div class="lyx_code_item">   0x08048431 &lt;+38&gt;:	mov    ecx,DWORD PTR [ebp-0x4]</div>
<div class="lyx_code_item">   0x08048434 &lt;+41&gt;:	leave  </div>
<div class="lyx_code_item">   0x08048435 &lt;+42&gt;:	lea    esp,[ecx-0x4]</div>
<div class="lyx_code_item">   0x08048438 &lt;+45&gt;:	ret    </div>
<div class="lyx_code_item">End of assembler dump.</div>
</div>


<div class="standard" id='magicparlabel-44010'>We try instruction by instruction stepping again, but this time by running <span style='font-family:monospace;'>si</span> at <span style='font-family:monospace;'>0x08048424</span>, where <span style='font-family:monospace;'>call</span> resides:</div>



<div class="standard" id='magicparlabel-44016'><span style='font-family:monospace;'>(gdb) si</span></div>





<div class="lyx_code" id='magicparlabel-44027'><div class="lyx_code_item">0x0804841f	5	        printf("Hello World!\n");</div>
</div>




<div class="standard" id='magicparlabel-44038'><span style='font-family:monospace;'>(gdb) si</span></div>





<div class="lyx_code" id='magicparlabel-44049'><div class="lyx_code_item">0x08048424	5	        printf("Hello World!\n");</div>
</div>




<div class="standard" id='magicparlabel-44060'><span style='font-family:monospace;'>(gdb) x/i $eip</span></div>





<div class="lyx_code" id='magicparlabel-44071'><div class="lyx_code_item">=&gt; 0x8048424 &lt;main+25&gt;:	call   0x80482e0 &lt;puts@plt&gt;</div>
</div>




<div class="standard" id='magicparlabel-44082'><span style='font-family:monospace;'>(gdb) si</span></div>





<div class="lyx_code" id='magicparlabel-44093'><div class="lyx_code_item">0x080482e0 in puts@plt ()</div>
</div>


<div class="standard" id='magicparlabel-44099'>The next instruction right after <span style='font-family:monospace;'>0x8048424</span> is the first instruction at <span style='font-family:monospace;'>0x080482e0</span> in <span style='font-family:monospace;'>puts</span> function. In other words, <span style='font-family:monospace;'>gdb</span> stepped into puts instead of stepping over it.</div>
</div>
<div class="subsection" id='magicparlabel-44100'>Command: <span style='font-family:monospace;'>until</span></div>
<div class="standard" id='magicparlabel-44101'>This command executes until the next line is greater than the current line.</div>

<div class="example" id='magicparlabel-44102'><div class="example_item"><span class="example_label">Example 0.61.</span>
Suppose we have a function that execute a long loop:
<br />

</div>

<div class='float-listings'><pre class ='listings C'>#include &lt;stdio.h&gt;

int add1000() {
    int total = 0;

    for (int i = 0; i &lt; 1000; ++i){
        total += i;
    }

    printf("Done adding!\n");

    return total;
}

int main(int argc, char *argv[])
{
    add1000(1, 2);
    printf("Hello World!\n");
    return 0;
}</pre></div>


<div class="standard" id='magicparlabel-44127'>Using <span style='font-family:monospace;'>next</span> command, we need to press 1000 times for finishing the loop. Instead, a faster way is to use <span style='font-family:monospace;'>until</span>: </div>



<div class="standard" id='magicparlabel-44133'><span style='font-family:monospace;'>(gdb) b add1000</span></div>





<div class="lyx_code" id='magicparlabel-44144'><div class="lyx_code_item">Breakpoint 1 at 0x8048411: file hello.c, line 4.</div>
</div>




<div class="standard" id='magicparlabel-44155'><span style='font-family:monospace;'>(gdb) r</span></div>





<div class="lyx_code" id='magicparlabel-44166'><div class="lyx_code_item">Starting program: /tmp/hello </div>
<div class="lyx_code_item">Breakpoint 1, add1000 () at hello.c:4</div>
<div class="lyx_code_item">4	    int total = 0;</div>
</div>




<div class="standard" id='magicparlabel-44179'><span style='font-family:monospace;'>(gdb) until</span></div>





<div class="lyx_code" id='magicparlabel-44190'><div class="lyx_code_item">5	    for (int i = 0; i &lt; 1000; ++i){</div>
</div>




<div class="standard" id='magicparlabel-44201'><span style='font-family:monospace;'>(gdb) until</span></div>





<div class="lyx_code" id='magicparlabel-44212'><div class="lyx_code_item">6	        total += i;</div>
</div>




<div class="standard" id='magicparlabel-44223'><span style='font-family:monospace;'>(gdb) until</span></div>





<div class="lyx_code" id='magicparlabel-44234'><div class="lyx_code_item">5	    for (int i = 0; i &lt; 1000; ++i){</div>
</div>




<div class="standard" id='magicparlabel-44245'><span style='font-family:monospace;'>(gdb) until</span></div>





<div class="lyx_code" id='magicparlabel-44256'><div class="lyx_code_item">8	    printf("Done adding!\n");</div>
</div>


<div class="standard" id='magicparlabel-44262'>Executing the first <span style='font-family:monospace;'>until</span>, <span style='font-family:monospace;'>gdb</span> stopped at line 5 since line 5 is greater than line 4. </div>

<div class="standard" id='magicparlabel-44263'>Executing the second <span style='font-family:monospace;'>until</span>, <span style='font-family:monospace;'>gdb</span> stopped at line 6 since line 6 is greater than line 5.</div>

<div class="standard" id='magicparlabel-44264'>Executing the third <span style='font-family:monospace;'>until</span>, <span style='font-family:monospace;'>gdb</span> stopped at line 5 since the loop still continues. Because line 5 is less than line 6, with the fourth <span style='font-family:monospace;'>until</span>, <span style='font-family:monospace;'>gdb</span> kept executing until it does not go back to line 5 anymore and stopped at line 8. This is a great way to skip over loop in the middle, instead of setting unneeded breakpoint.</div>

<div class="example" id='magicparlabel-44265'><div class="example_item"><span class="example_label">Example 0.62.</span>
<span style='font-family:monospace;'>until</span> can be supplied with an argument to explicitly execute to a specific line:</div>
</div>


<div class="standard" id='magicparlabel-44271'><span style='font-family:monospace;'>(gdb) r</span></div>





<div class="lyx_code" id='magicparlabel-44282'><div class="lyx_code_item">Starting program: /tmp/hello </div>
<div class="lyx_code_item">Breakpoint 1, add1000 () at hello.c:4</div>
<div class="lyx_code_item">4	    int total = 0;</div>
</div>




<div class="standard" id='magicparlabel-44295'><span style='font-family:monospace;'>(gdb) until 8</span></div>





<div class="lyx_code" id='magicparlabel-44306'><div class="lyx_code_item">add1000 () at hello.c:8</div>
<div class="lyx_code_item">8	    printf("Done adding!\n");</div>
</div>

</div>
<div class="subsection" id='magicparlabel-44313'>Command: <span style='font-family:monospace;'>finish</span></div>
<div class="standard" id='magicparlabel-44314'>This command executes until the end of a function and displays the return value. <span style='font-family:monospace;'>finish</span> is actually just a more convenient version of <span style='font-family:monospace;'>until</span>.</div>

<div class="example" id='magicparlabel-44315'><div class="example_item"><span class="example_label">Example 0.63.</span>
Using the <span style='font-family:monospace;'>add1000</span> function from the previous example and use <span style='font-family:monospace;'>finish</span> instead of <span style='font-family:monospace;'>until</span>:
<br />

</div>


<div class="standard" id='magicparlabel-44321'><span style='font-family:monospace;'>(gdb) r</span></div>





<div class="lyx_code" id='magicparlabel-44332'><div class="lyx_code_item">Starting program: /tmp/hello </div>
<div class="lyx_code_item">Breakpoint 1, add1000 () at hello.c:4</div>
<div class="lyx_code_item">4	    int total = 0;</div>
</div>




<div class="standard" id='magicparlabel-44345'><span style='font-family:monospace;'>(gdb) finish</span></div>





<div class="lyx_code" id='magicparlabel-44356'><div class="lyx_code_item">Run till exit from #0  add1000 () at hello.c:4</div>
<div class="lyx_code_item">Done adding!</div>
<div class="lyx_code_item">0x08048466 in main (argc=1, argv=0xffffd154) at hello.c:15</div>
<div class="lyx_code_item">15	    add1000(1, 2);</div>
<div class="lyx_code_item">Value returned is $1 = 499500</div>
</div>

</div>
<div class="subsection" id='magicparlabel-44366'>Command: <span style='font-family:monospace;'>bt</span></div>
<div class="standard" id='magicparlabel-44367'>This command prints the <em>backtrace</em> of all stack frames. A <em><div class="marginal"><div class="plain_layout" id='magicparlabel-44371'><em><b>backtrace</b></em></div>
</div>backtrace<a id='magicparlabel-44375' />
</em> is a list of currently active functions:</div>

<div class="example" id='magicparlabel-44376'><div class="example_item"><span class="example_label">Example 0.64.</span>
Suppose we have a chain of function calls:
<br />

</div>

<div class='float-listings'><pre class ='listings C'>void d(int d) { };
void c(int c) { d(0); }
void b(int b) { c(1); }
void a(int a) { b(2); }

int main(int argc, char *argv[])
{
    a(3);
    return 0;
}</pre></div>


<div class="standard" id='magicparlabel-44391'><span style='font-family:monospace;'>bt</span> can visualize such a chain in action:</div>



<div class="standard" id='magicparlabel-44397'><span style='font-family:monospace;'>(gdb) b a</span></div>





<div class="lyx_code" id='magicparlabel-44408'><div class="lyx_code_item">Breakpoint 1 at 0x8048404: file hello.c, line 9.</div>
</div>




<div class="standard" id='magicparlabel-44419'><span style='font-family:monospace;'>(gdb) r</span></div>





<div class="lyx_code" id='magicparlabel-44430'><div class="lyx_code_item">Starting program: /tmp/hello </div>
<div class="lyx_code_item">Breakpoint 1, a (a=3) at hello.c:9</div>
<div class="lyx_code_item">9	void a(int a) { b(2); }</div>
</div>




<div class="standard" id='magicparlabel-44443'><span style='font-family:monospace;'>(gdb) s</span></div>





<div class="lyx_code" id='magicparlabel-44454'><div class="lyx_code_item">b (b=2) at hello.c:7</div>
<div class="lyx_code_item">7	void b(int b) { c(1); }</div>
</div>




<div class="standard" id='magicparlabel-44466'><span style='font-family:monospace;'>(gdb) s</span></div>





<div class="lyx_code" id='magicparlabel-44477'><div class="lyx_code_item">c (c=1) at hello.c:5</div>
<div class="lyx_code_item">5	void c(int c) { d(0); }</div>
</div>




<div class="standard" id='magicparlabel-44489'><span style='font-family:monospace;'>(gdb) s</span></div>





<div class="lyx_code" id='magicparlabel-44500'><div class="lyx_code_item">d (d=0) at hello.c:3</div>
<div class="lyx_code_item">3	void d(int d) { };</div>
</div>




<div class="standard" id='magicparlabel-44512'><span style='font-family:monospace;'>(gdb) bt</span></div>





<div class="lyx_code" id='magicparlabel-44523'><div class="lyx_code_item">#0  d (d=0) at hello.c:3</div>
<div class="lyx_code_item">#1  0x080483eb in c (c=1) at hello.c:5</div>
<div class="lyx_code_item">#2  0x080483fb in b (b=2) at hello.c:7</div>
<div class="lyx_code_item">#3  0x0804840b in a (a=3) at hello.c:9</div>
<div class="lyx_code_item">#4  0x0804841b in main (argc=1, argv=0xffffd154) at hello.c:13</div>
</div>


<div class="standard" id='magicparlabel-44533'>Most-recent calls are placed on top and least-recent calls are near the bottom. In this case, <span style='font-family:monospace;'>d</span> is the most current active function, so it has the index 0. Next is <span style='font-family:monospace;'>c</span>, the 2<sup class="script_superscript">nd</sup> active function, has the index 1 and so on with function <span style='font-family:monospace;'>b</span>, function <span style='font-family:monospace;'>a</span>, and finally function <span style='font-family:monospace;'>main</span> at the bottom, the least-recent function. That is how we read a backtrace.</div>
</div>
<div class="subsection" id='magicparlabel-44538'>Command: <span style='font-family:monospace;'>up</span></div>
<div class="standard" id='magicparlabel-44539'>This command goes up one frame earlier the current frame.</div>

<div class="example" id='magicparlabel-44540'><div class="example_item"><span class="example_label">Example 0.65.</span>
Instead of staying in <span style='font-family:monospace;'>d</span> function, we can go up to <span style='font-family:monospace;'>c</span> function and look at its state:
<br />

</div>


<div class="standard" id='magicparlabel-44546'><span style='font-family:monospace;'>(gdb) bt</span></div>





<div class="lyx_code" id='magicparlabel-44557'><div class="lyx_code_item">#0  d (d=0) at hello.c:3</div>
<div class="lyx_code_item">#1  0x080483eb in c (c=1) at hello.c:5</div>
<div class="lyx_code_item">#2  0x080483fb in b (b=2) at hello.c:7</div>
<div class="lyx_code_item">#3  0x0804840b in a (a=3) at hello.c:9</div>
<div class="lyx_code_item">#4  0x0804841b in main (argc=1, argv=0xffffd154) at hello.c:13</div>
</div>




<div class="standard" id='magicparlabel-44572'><span style='font-family:monospace;'>(gdb) up</span></div>





<div class="lyx_code" id='magicparlabel-44583'><div class="lyx_code_item">#1  0x080483eb in c (c=1) at hello.c:3</div>
<div class="lyx_code_item">3	void b(int b) { c(1); }</div>
</div>


<div class="standard" id='magicparlabel-44590'>The output displays the current frame is moved to <span style='font-family:monospace;'>c</span> and where the call to <span style='font-family:monospace;'>c</span> is made, which is in function <span style='font-family:monospace;'>b</span> at line 3.</div>
</div>
<div class="subsection" id='magicparlabel-44591'>Command: <span style='font-family:monospace;'>down</span></div>
<div class="standard" id='magicparlabel-44592'>Similar to <span style='font-family:monospace;'>up</span>, this command goes down one frame later then the current frame.</div>

<div class="example" id='magicparlabel-44593'><div class="example_item"><span class="example_label">Example 0.66.</span>
After inspecting <span style='font-family:monospace;'>c</span> function, we can go back to <span style='font-family:monospace;'>d</span>:
<br />

</div>


<div class="standard" id='magicparlabel-44599'><span style='font-family:monospace;'>(gdb) bt</span></div>





<div class="lyx_code" id='magicparlabel-44610'><div class="lyx_code_item">#0  d (d=0) at hello.c:3</div>
<div class="lyx_code_item">#1  0x080483eb in c (c=1) at hello.c:5</div>
<div class="lyx_code_item">#2  0x080483fb in b (b=2) at hello.c:7</div>
<div class="lyx_code_item">#3  0x0804840b in a (a=3) at hello.c:9</div>
<div class="lyx_code_item">#4  0x0804841b in main (argc=1, argv=0xffffd154) at hello.c:13</div>
</div>




<div class="standard" id='magicparlabel-44625'><span style='font-family:monospace;'>(gdb) up</span></div>





<div class="lyx_code" id='magicparlabel-44636'><div class="lyx_code_item">#1  0x080483eb in c (c=1) at hello.c:3</div>
<div class="lyx_code_item">3	void b(int b) { c(1); }</div>
</div>




<div class="standard" id='magicparlabel-44648'><span style='font-family:monospace;'>(gdb) down</span></div>





<div class="lyx_code" id='magicparlabel-44659'><div class="lyx_code_item">#0  d (d=0) at hello.c:1</div>
<div class="lyx_code_item">1	void d(int d) { };</div>
</div>

</div>
<div class="subsection" id='magicparlabel-44666'>Command: <span style='font-family:monospace;'>info registers</span></div>
<div class="standard" id='magicparlabel-44667'>This command lists the current values in commonly used registers. This command is useful when debugging assembly and operating system code, as we can inspect the current state of the machine.</div>

<div class="example" id='magicparlabel-44668'><div class="example_item"><span class="example_label">Example 0.67.</span>
Executing the command, we can see the commonly used registers:
<br />

</div>


<div class="lyx_code" id='magicparlabel-44674'><div class="lyx_code_item">(gdb) info registers </div>
</div>




<div class="lyx_code" id='magicparlabel-44685'><div class="lyx_code_item">eax            0xf7faddbc	-134554180</div>
<div class="lyx_code_item">ecx            0xffffd0c0	-12096</div>
<div class="lyx_code_item">edx            0xffffd0e4	-12060</div>
<div class="lyx_code_item">ebx            0x0	0</div>
<div class="lyx_code_item">esp            0xffffd0a0	0xffffd0a0</div>
<div class="lyx_code_item">ebp            0xffffd0a8	0xffffd0a8</div>
<div class="lyx_code_item">esi            0xf7fac000	-134561792</div>
<div class="lyx_code_item">edi            0xf7fac000	-134561792</div>
<div class="lyx_code_item">eip            0x804841c	0x804841c &lt;main+17&gt;</div>
<div class="lyx_code_item">eflags         0x286	[ PF SF IF ]</div>
<div class="lyx_code_item">cs             0x23	35</div>
<div class="lyx_code_item">ss             0x2b	43</div>
<div class="lyx_code_item">ds             0x2b	43</div>
<div class="lyx_code_item">es             0x2b	43</div>
<div class="lyx_code_item">fs             0x0	0</div>
<div class="lyx_code_item">gs             0x63	99</div>
</div>


<div class="standard" id='magicparlabel-44706'>The above registers suffice for writing our operating system in later part.</div>
</div>
<div class="section" id='magicparlabel-44707'>How debuggers work: A brief introduction</div>
<div class="subsection" id='magicparlabel-44708'>How breakpoints work</div>
<div class="standard" id='magicparlabel-44709'>When a programmer places a breakpoint somewhere in his code, what actually happens is that the <em>first</em> opcode of the <em>first</em> instruction of a statement is replaced with another instruction, <span style='font-family:monospace;'>int 3</span> with opcode <span style='font-family:monospace;'>CCh</span>:</div>


<div class='float-figure'><div class="plain_layout" id='magicparlabel-44714'><span class='float-caption-Standard float-caption float-caption-standard'>Figure 0.17:  Opcode replacement, with <span style='font-family:monospace;'>int 3</span></span></div>

<div class="plain_layout" id='magicparlabel-44719'>

<table><tbody><tr><td style ="width: 0.8cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-44747'><span style='font-family:monospace;'>83</span></div>
</td>
<td style ="width: 0.8cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-44750'><span style='font-family:monospace;'>ec</span></div>
</td>
<td style ="width: 0.8cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-44753'><span style='font-family:monospace;'>0c</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-44756'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow><mo> &rarr; </mo>
 </mrow></math></div>
</td>
<td style ="width: 0.8cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-44759'><span style='font-family:monospace;'>cc</span></div>
</td>
<td style ="width: 0.8cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-44762'><span style='font-family:monospace;'>ec</span></div>
</td>
<td style ="width: 0.8cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-44765'><span style='font-family:monospace;'>0c</span></div>
</td>
</tr><tr><td style ="width: 0.8cm;" align='center' valign='top' colspan='3'>
<div class="plain_layout" id='magicparlabel-44768'><span style='font-family:monospace;'>sub esp,0x4</span></div>
</td>
<td align='center' valign='top'>

</td>
<td style ="width: 0.8cm;" align='center' valign='top' colspan='3'>
<div class="plain_layout" id='magicparlabel-44780'><span style='font-family:monospace;'>int 3</span></div>
</td>
</tr></tbody>
</table>
</div>
</div>


<div class="standard" id='magicparlabel-44787'><span style='font-family:monospace;'>int 3</span> only costs a single byte, making it efficient for debugging. When <span style='font-family:monospace;'>int 3</span> instruction is executed, the operating system calls its breakpoint interrupt handler. The handler then checks what process reaches a breakpoint, pauses it and notifies the debugger it has paused a debugged process. The debugged process is only paused and that means a debugger is free to inspect its internal state, like a surgeon operates on an anesthetic patient. Then, the debugger replaces the <span style='font-family:monospace;'>int 3</span> opcode with the original opcode and executes the original instruction normally.</div>


<div class='float-figure'><div class="plain_layout" id='magicparlabel-44792'><span class='float-caption-Standard float-caption float-caption-standard'>Figure 0.18:  Restore<span style='font-family:monospace;'> </span>the original opcode, after <span style='font-family:monospace;'>int 3</span> was executed</span></div>

<div class="plain_layout" id='magicparlabel-44797'>

<table><tbody><tr><td style ="width: 0.8cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-44825'><span style='font-family:monospace;'>cc</span></div>
</td>
<td style ="width: 0.8cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-44828'><span style='font-family:monospace;'>ec</span></div>
</td>
<td style ="width: 0.8cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-44831'><span style='font-family:monospace;'>0c</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-44834'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow><mo> &rarr; </mo>
 </mrow></math></div>
</td>
<td style ="width: 0.8cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-44837'><span style='font-family:monospace;'>83</span></div>
</td>
<td style ="width: 0.8cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-44840'><span style='font-family:monospace;'>ec</span></div>
</td>
<td style ="width: 0.8cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-44843'><span style='font-family:monospace;'>0c</span></div>
</td>
</tr><tr><td style ="width: 0.8cm;" align='center' valign='top' colspan='3'>
<div class="plain_layout" id='magicparlabel-44846'><span style='font-family:monospace;'>int 3</span></div>
</td>
<td align='center' valign='top'>

</td>
<td style ="width: 0.8cm;" align='center' valign='top' colspan='3'>
<div class="plain_layout" id='magicparlabel-44858'><span style='font-family:monospace;'>sub esp,0x4</span></div>
</td>
</tr></tbody>
</table>
</div>
</div>


<div class="example" id='magicparlabel-44865'><div class="example_item"><span class="example_label">Example 0.68.</span>
It is simple to see <span style='font-family:monospace;'>int 3</span> in action. First, we add an <span style='font-family:monospace;'>int 3</span> instruction where we need <span style='font-family:monospace;'>gdb</span> to stop:
<br />

</div>

<div class='float-listings'><pre class ='listings C'>#include &lt;stdio.h&gt;

int main(int argc, char *argv[])
{
    asm("int 3");
    printf("Hello World\n");
    return 0;
}</pre></div>


<div class="standard" id='magicparlabel-44878'><span style='font-family:monospace;'>int 3</span> precedes <span style='font-family:monospace;'>printf</span>, so <span style='font-family:monospace;'>gdb</span> is expected to stop at <span style='font-family:monospace;'>printf</span>. Next, we compile with debug enable and with Intel syntax:</div>



<div class="standard" id='magicparlabel-44884'><span style='font-family:monospace;'>$ gcc -masm=intel -m32 -g hello.c -o hello</span></div>



<div class="standard" id='magicparlabel-44890'>Finally, start <span style='font-family:monospace;'>gdb</span>:</div>



<div class="standard" id='magicparlabel-44896'><span style='font-family:monospace;'>$ gdb hello</span></div>



<div class="standard" id='magicparlabel-44902'>Running without setting any breakpoint, <span style='font-family:monospace;'>gdb</span> stops at <span style='font-family:monospace;'>printf</span> call, as expected:</div>



<div class="standard" id='magicparlabel-44908'><span style='font-family:monospace;'>(gdb) r</span></div>





<div class="lyx_code" id='magicparlabel-44919'><div class="lyx_code_item">Starting program: /tmp/hello </div>
<div class="lyx_code_item">Program received signal SIGTRAP, Trace/breakpoint trap.</div>
<div class="lyx_code_item">main (argc=1, argv=0xffffd154) at hello.c:6</div>
<div class="lyx_code_item">6	    printf("Hello World\n");</div>
</div>


<div class="standard" id='magicparlabel-44928'>The blue text indicates that <span style='font-family:monospace;'>gdb</span> encountered a breakpoint, and indeed it stopped at the right place: the <span style='font-family:monospace;'>printf</span> call, where <span style='font-family:monospace;'>int 3</span> preceded it.</div>
</div>
<div class="subsection" id='magicparlabel-44929'>Single stepping</div>
<div class="standard" id='magicparlabel-44930'>When breakpoint is implemented, it is easy to implement single stepping: a debugger simply places another <span style='font-family:monospace;'>int 3</span> opcode in the next instruction. So, when a programmer sets a breakpoint at an instruction, the next instruction is automatically set by the debugger, thus enable instruction by instruction debugging. Similarly, source line by line debugging is just the placements of the very first opcodes in the two statements with two <span style='font-family:monospace;'>int 3</span> opcodes.</div>
<div class="subsection" id='magicparlabel-44931'>How a debugger understands high level source code</div>
<div class="standard" id='magicparlabel-44932'>DWARF is a debugging file format used by many compilers and debuggers to support source level debugging. DWARF contains information that maps between entities in the executable binary with the source files. A program entity can either be data or code. A <b>DIE</b>, or <em><b><div class="marginal"><div class="plain_layout" id='magicparlabel-44936'><em><b>Debugging Information Entry</b></em></div>
</div>D</b>ebugging <b>I</b>nformation <b>E</b>ntry</em><a id='magicparlabel-44940' />
, is a description of a program entity. A DIE consists of a tag, which specifies the entity that the DIE describes, and a list of  attributes that describes the entity. Of all the attributes, these two attributes enables source-level debugging: </div>

<ul class="itemize" id='magicparlabel-44941'><li class="itemize_item"><span class='noun'>Where the entity appears in the source files</span>: which file and which line the entity appears.</li>
<li class="itemize_item"><span class='noun'>Where the entity appears in the executable binary</span>: in which memory address the entity is loaded at runtime. With the precise address, <span style='font-family:monospace;'>gdb</span> can retrieve correct value for a data entity, or place a correct breakpoint and stop accordingly for a code entity. Without the information of these addresses, <span style='font-family:monospace;'>gdb</span> would not know where the entities are to inspect them.</li>
</ul>




<div class="standard" id='magicparlabel-44957'><table><tbody><tr><td style ="width: 2.25cm;" align='left' valign='top' colspan='2'>
<div class="plain_layout" id='magicparlabel-44996'><span style='font-family:monospace;'>hello.c</span></div>
</td>
<td style ="width: 1.25cm;" align='center' valign='top'>

</td>
<td style ="width: 4.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-45005'><b>DIE</b></div>
</td>
</tr><tr><td style ="width: 2.25cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-45008'><span style='font-family:monospace;'>&nbsp;&nbsp;Line 1</span></div>

<div class="plain_layout" id='magicparlabel-45009'><span style='font-family:monospace;'>&nbsp;&nbsp;Line 2</span></div>

<div class="plain_layout" id='magicparlabel-45010'><span style='font-family:monospace;'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow><mo> &rArr; </mo>
 </mrow></math> Line 3</span></div>

<div class="plain_layout" id='magicparlabel-45011'><span style='font-family:monospace;'>&nbsp;&nbsp;Line 5</span></div>

<div class="plain_layout" id='magicparlabel-45012'><span style='font-family:monospace;'>&nbsp;&nbsp;Line 6</span></div>
</td>
<td style ="width: 6cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-45015'><span style='font-family:monospace;'>#include &lt;stdio.h&gt;</span></div>

<div class="plain_layout" id='magicparlabel-45016'>&nbsp;</div>

<div class="plain_layout" id='magicparlabel-45017'><span style='font-family:monospace;'>int main(int argc, char *argv[])</span></div>

<div class="plain_layout" id='magicparlabel-45018'><span style='font-family:monospace;'>..........</span></div>

<div class="plain_layout" id='magicparlabel-45019'><span style='font-family:monospace;'>..........</span></div>

<div class="plain_layout" id='magicparlabel-45020'>&nbsp;</div>
</td>
<td style ="width: 1.25cm;" align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-45023'>&nbsp;</div>

<div class="plain_layout" id='magicparlabel-45024'>&nbsp;</div>

<div class="plain_layout" id='magicparlabel-45025'><b>&nbsp;&nbsp;<math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow><mo> &rarr; </mo>
 </mrow></math>&nbsp;&nbsp;</b></div>
</td>
<td style ="width: 4.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-45028'><span style='font-family:monospace;'>....</span></div>

<div class="plain_layout" id='magicparlabel-45029'><span style='font-family:monospace;'>....</span></div>

<div class="plain_layout" id='magicparlabel-45030'><span style='font-family:monospace;'>main</span> in <span style='font-family:monospace;'>hello.c </span>is at <span style='font-family:monospace;'>0x804840b</span> in <span style='font-family:monospace;'>hello</span></div>

<div class="plain_layout" id='magicparlabel-45031'><span style='font-family:monospace;'>....</span></div>

<div class="plain_layout" id='magicparlabel-45032'><span style='font-family:monospace;'>....</span></div>
</td>
</tr><tr><td style ="width: 2.25cm;" align='center' valign='top'>

</td>
<td style ="width: 6cm;" align='left' valign='top'>

</td>
<td style ="width: 1.25cm;" align='center' valign='top'>

</td>
<td style ="width: 4.5cm;" align='left' valign='top'>

</td>
</tr><tr><td style ="width: 2.25cm;" align='center' valign='top'>

</td>
<td style ="width: 6cm;" align='left' valign='top'>

</td>
<td style ="width: 1.25cm;" align='center' valign='top'>

</td>
<td style ="width: 4.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-45056'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow><mo> &darr; </mo>
 </mrow></math><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow><mo> &uarr; </mo>
 </mrow></math></div>
</td>
</tr><tr><td style ="width: 2.25cm;" align='center' valign='top'>

</td>
<td style ="width: 6cm;" align='left' valign='top'>

</td>
<td style ="width: 1.25cm;" align='center' valign='top'>

</td>
<td style ="width: 4.5cm;" align='left' valign='top'>

</td>
</tr><tr><td style ="width: 2.25cm;" align='center' valign='top'>

</td>
<td style ="width: 6cm;" align='left' valign='top'>

</td>
<td style ="width: 1.25cm;" align='center' valign='top'>

</td>
<td style ="width: 4.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-45080'><b><span style='font-family:monospace;'>hello </span></b>(at<b><span style='font-family:monospace;'> </span></b><span style='font-family:monospace;'>0x804840b</span>)</div>
</td>
</tr><tr><td style ="width: 2.25cm;" align='center' valign='top'>

</td>
<td style ="width: 6cm;" align='left' valign='top'>

</td>
<td style ="width: 1.25cm;" align='center' valign='top'>

</td>
<td style ="width: 4.5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-45092'><span style='font-family:monospace;'>...8d 4c 24 04 83 e4 f0 ff 71 fc ....</span></div>
</td>
</tr></tbody>
</table>
</div>





<div class="standard" id='magicparlabel-45103'>In addition to DIEs, another binary-to-source mapping is the <em>line number table</em>. The line number table maps between a line in the source code and at which memory address is the start of the line in the executable binary.</div>

<div class="standard" id='magicparlabel-45104'>In sum, to successfully enable source-level debugging, a debugger needs to know the precise location of the source files and the load addresses at runtime. Address matching, between the image layout of the ELF binary and the address where it is loaded, is extremely important since debug information relies on correct loading address at runtime. That is, it assumes the addresses as recorded in the binary image at compile-time the same as at runtime e.g. if the load address for <span style='font-family:monospace;'>.text</span> section is recorded in the executable binary at <span style='font-family:monospace;'>0x800000</span>, then when the binary actually runs, <span style='font-family:monospace;'>.text</span> should really be loaded at <span style='font-family:monospace;'>0x800000</span> for gdb to be able to correctly match running instructions with high-level code statement. Address mismatching makes debug information useless, as actual code at one address is displayed as code at another address. Without this knowledge, we will not be able to build an operating system that can be debugged with <span style='font-family:monospace;'>gdb</span>.</div>

<div class="example" id='magicparlabel-45105'><div class="example_item"><span class="example_label">Example 0.69.</span>
When an executable binary contains debug info,<span style='font-family:monospace;'> readelf</span> can display such information in a readable format. Using the good old hello world program:
<br />

</div>

<div class='float-listings'><pre class ='listings C'>#include &lt;stdio.h&gt;

int main(int argc, char *argv[])
{
    printf("Hello World\n");

    return 0;
}</pre></div>


<div class="standard" id='magicparlabel-45118'>and compile with debug info:</div>



<div class="standard" id='magicparlabel-45124'><span style='font-family:monospace;'>$ gcc -m32 -g hello.c -o hello</span></div>



<div class="standard" id='magicparlabel-45130'>With the binary ready, we can look at the line number table with the command:</div>



<div class="standard" id='magicparlabel-45136'><span style='font-family:monospace;'>$ readlelf -wL hello</span></div>


<div class="standard" id='magicparlabel-45137'><br />

</div>

<div class="standard" style='text-align: left;' id='magicparlabel-45142'><span style='font-family:monospace;'>-w</span> option prints all the debug information. In combination with its sub-option, only specific information is displayed. For example, with <span style='font-family:monospace;'>-L,</span> only the line number table is displayed:</div>



<div class="lyx_code" id='magicparlabel-45148'><div class="lyx_code_item">Decoded dump of debug contents of section .debug_line:</div>
<div class="lyx_code_item">CU: hello.c:</div>
<div class="lyx_code_item">File name                            Line number    Starting address</div>
<div class="lyx_code_item">hello.c                                        6           0x804840b</div>
<div class="lyx_code_item">hello.c                                        7           0x804841c</div>
<div class="lyx_code_item">hello.c                                        9           0x804842c</div>
<div class="lyx_code_item">hello.c                                       10           0x8048431</div>
</div>


<div class="standard" id='magicparlabel-45160'>From the above output:</div>

<dl class='description' id='magicparlabel-45161'><dt class="description_label">CU</dt>
<dd class="description_item"> shorts for <em><b>C</b>ompilation <b>U</b>nit</em>, a separately compiled source file. In the example, we only have one file, <span style='font-family:monospace;'>hello.c</span>.</dd>
<dt class="description_label">File&nbsp;name</dt>
<dd class="description_item"> displays the filename of the current compilation unit.</dd>
<dt class="description_label">Line&nbsp;number</dt>
<dd class="description_item"> is the line number in the source file of which the line is not an empty line. In the example, line 8 is an empty line, so it does not appear.</dd>
<dt class="description_label">Starting&nbsp;address</dt>
<dd class="description_item"> is the memory address where the line actually starts in the executable binary. </dd>
</dl>
<div class="standard" id='magicparlabel-45165'>With such crystal clear information, this is how <span style='font-family:monospace;'>gdb</span> is able to set a breakpoint on a line easily. For placing breakpoints on variables and functions, it is time to look at the DIEs. To get the DIEs information from an executable binary, run the command:</div>



<div class="standard" id='magicparlabel-45171'><span style='font-family:monospace;'>$ readlelf -wi hello</span></div>



<div class="standard" id='magicparlabel-45177'><span style='font-family:monospace;'>-wi</span> option lists all the DIE entries. This is one typical DIE entry:</div>

<div class="lyx_code" id='magicparlabel-45178'><div class="lyx_code_item"> &lt;0&gt;&lt;b&gt;: Abbrev Number: 1 (DW_TAG_compile_unit)</div>
<div class="lyx_code_item">    &lt;c&gt;   DW_AT_producer    : (indirect string, offset: 0xe): GNU C11 5.4.0 20160609 -masm=intel -m32 -mtune=generic -march=i686 -g -fstack-protector-strong</div>
<div class="lyx_code_item">    &lt;10&gt;   DW_AT_language    : 12	(ANSI C99)</div>
<div class="lyx_code_item">    &lt;11&gt;   DW_AT_name        : (indirect string, offset: 0xbe): <b>hello.c</b></div>
<div class="lyx_code_item">    &lt;15&gt;   DW_AT_comp_dir    : (indirect string, offset: 0x97): <b>/tmp</b></div>
<div class="lyx_code_item">    &lt;19&gt;   DW_AT_low_pc      : <b>0x804840b</b></div>
<div class="lyx_code_item">    &lt;1d&gt;   DW_AT_high_pc     : <b>0x2e</b></div>
<div class="lyx_code_item">    &lt;21&gt;   DW_AT_stmt_list   : 0x0</div>
</div>

<dl class='description' id='magicparlabel-45186'><dt class="description_label">Red</dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>This left-most number indicates the current nesting level of a DIE entry. <span style='font-family:monospace;'>0</span> is the outer-most level DIE with its entity is the compilation unit. This means subsequent DIE entries with higher nesting level are all the children of this tag, the compilation unit. It makes sense, as all the entities must originate from a source file.</dd>
<dt class="description_label">Blue</dt>
<dd class="description_item"> These numbers in hex format indicate the offsets into <span style='font-family:monospace;'>.debug_info</span> section. Each meaningful information is displayed along with its offset. When an attribute references to another attribute, the offset is used to precisely identify the referenced attribute.</dd>
<dt class="description_label">Green</dt>
<dd class="description_item"> These names with <span style='font-family:monospace;'>DW_AT_</span> prefix are the attributes attached to a DIE that describe an entity. Notable attributes:
<br />



<dl class='description' id='magicparlabel-45189'><dt class="description_label">DW_AT_name</dt>
<dd class="description_item"></dd>
<dt class="description_label">DW_AT_comp_dir</dt>
<dd class="description_item"> The filename of the compilation unit and the directory where compilation occurred. Without the filename and the path, <span style='font-family:monospace;'>gdb</span> would not be able to display the high-level source, despite the availability of the debug info. Debug info only contains the mapping between source and binary, not the source code itself.</dd>
<dt class="description_label">DW_AT_low_pc</dt>
<dd class="description_item"></dd>
<dt class="description_label">DW_AT_high_pc</dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>The start and end of the current entity, which is the compilation unit, in the executable binary. The value in <span style='font-family:monospace;'>DW_AT_low_pc </span>is the starting address. <span style='font-family:monospace;'>DW_AT_high_pc</span> is the size of the compilation unit, when adding up to <span style='font-family:monospace;'>DW_AT_low_pc </span>results in the end address of the entity. In this example, code compiled from <span style='font-family:monospace;'>hello.c</span> starts at <span style='font-family:monospace;'>0x804840b </span>and end at <span style='font-family:monospace;'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mstyle mathvariant='monospace'>
   <mrow><mn>0</mn><mi>x</mi><mn>804840</mn><mi>b</mi><mo>+</mo><mn>0</mn><mi>x</mi><mn>2</mn><mi>e</mi><mo>=</mo><mn>0</mn><mi>x</mi><mn>8048439</mn>
   </mrow>
  </mstyle>
 </mrow></math>.</span> To really make sure, we verify with <span style='font-family:monospace;'>objdump</span>:
<br />




<div class="lyx_code" id='magicparlabel-45198'><div class="lyx_code_item">int main(int argc, char *argv[])</div>
<div class="lyx_code_item">{</div>
<div class="lyx_code_item"> 804840b:       8d 4c 24 04             lea    ecx,[esp+0x4]</div>
<div class="lyx_code_item"> 804840f:       83 e4 f0                and    esp,0xfffffff0</div>
<div class="lyx_code_item"> 8048412:       ff 71 fc                push   DWORD PTR [ecx-0x4]</div>
<div class="lyx_code_item"> 8048415:       55                      push   ebp</div>
<div class="lyx_code_item"> 8048416:       89 e5                   mov    ebp,esp</div>
<div class="lyx_code_item"> 8048418:       51                      push   ecx</div>
<div class="lyx_code_item"> 8048419:       83 ec 04                sub    esp,0x4</div>
<div class="lyx_code_item">    printf("Hello World\n");</div>
<div class="lyx_code_item"> 804841c:       83 ec 0c                sub    esp,0xc</div>
<div class="lyx_code_item"> 804841f:       68 c0 84 04 08          push   0x80484c0</div>
<div class="lyx_code_item"> 8048424:       e8 b7 fe ff ff          call   80482e0 &lt;puts@plt&gt;</div>
<div class="lyx_code_item"> 8048429:       83 c4 10                add    esp,0x10</div>
<div class="lyx_code_item">    return 0;</div>
<div class="lyx_code_item"> 804842c:       b8 00 00 00 00          mov    eax,0x0</div>
<div class="lyx_code_item">}</div>
<div class="lyx_code_item"> 8048431:       8b 4d fc                mov    ecx,DWORD PTR [ebp-0x4]</div>
<div class="lyx_code_item"> 8048434:       c9                      leave  </div>
<div class="lyx_code_item"> 8048435:       8d 61 fc                lea    esp,[ecx-0x4]</div>
<div class="lyx_code_item"> 8048438:       c3                      ret    </div>
<div class="lyx_code_item"> 8048439:       66 90                   xchg   ax,ax</div>
<div class="lyx_code_item"> 804843b:       66 90                   xchg   ax,ax</div>
<div class="lyx_code_item"> 804843d:       66 90                   xchg   ax,ax</div>
<div class="lyx_code_item"> 804843f:       90                      nop</div>
</div>


<div class="standard" id='magicparlabel-45228'>It is true: <span style='font-family:monospace;'>main</span> starts at <span style='font-family:monospace;'>804840b</span> and end at <span style='font-family:monospace;'>8048439</span>, right after the <span style='font-family:monospace;'>ret</span> instruction at <span style='font-family:monospace;'>8048438</span>. The instructions after <span style='font-family:monospace;'>8048439</span> are just padding bytes inserted by <span style='font-family:monospace;'>gcc</span> for alignment, which do not belong to <span style='font-family:monospace;'>main</span>. Note that the output from <span style='font-family:monospace;'>objdump</span> shows much more code past <span style='font-family:monospace;'>main</span>. It is not counted, as the code is outside of <span style='font-family:monospace;'>hello.c</span>, added by <span style='font-family:monospace;'>gcc</span> for the operating system. <span style='font-family:monospace;'>hello.c</span> contains only one function: <span style='font-family:monospace;'>main</span> and this is why <span style='font-family:monospace;'>hello.c</span> also starts and ends the same as <span style='font-family:monospace;'>main</span>.</div>
</dd></dl>
</dd><dt class="description_label">Pink</dt>
<dd class="description_item"> This number displays the abbreviation form of a tag. An abbreviation is the form of a DIE. When debug info is displayed with <span style='font-family:monospace;'>-wi</span>, the DIEs are displayed with their values. <span style='font-family:monospace;'>-wa</span> option shows abbreviations in the <span style='font-family:monospace;'>.debug_abbrev</span> section:
<br />




<div class="lyx_code" id='magicparlabel-45235'><div class="lyx_code_item">Contents of the .debug_abbrev section:</div>
<div class="lyx_code_item">  Number TAG (0x0)</div>
<div class="lyx_code_item">   1      DW_TAG_compile_unit    [has children]</div>
<div class="lyx_code_item">    DW_AT_producer     DW_FORM_strp</div>
<div class="lyx_code_item">    DW_AT_language     DW_FORM_data1</div>
<div class="lyx_code_item">    DW_AT_name         DW_FORM_strp</div>
<div class="lyx_code_item">    DW_AT_comp_dir     DW_FORM_strp</div>
<div class="lyx_code_item">    DW_AT_low_pc       DW_FORM_addr</div>
<div class="lyx_code_item">    DW_AT_high_pc      DW_FORM_data4</div>
<div class="lyx_code_item">    DW_AT_stmt_list    DW_FORM_sec_offset</div>
<div class="lyx_code_item">    DW_AT value: 0     DW_FORM value: 0</div>
<div class="lyx_code_item"><b>.... more abbreviations ....</b></div>
</div>


<div class="standard" id='magicparlabel-45252'>The output is similar to a DIE output, with only attribute names and without any value. We can also say an abbreviation is a <em>type</em> of a DIE, as an abbreviation represents the structure of a particular DIE. Many DIEs share the same abbreviation, or structure, thus they are of the same type. An abbreviation number specifies which type a DIE is in the abbreviation table above. Abbreviations improve encoding efficiency (reduce binary size) because each DIE needs not to carry their structure information as pairs of attribute-value<div class="foot"><span class="foot_label">26</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-45256'>For example, data format such as YAML or JSON encodes its attribute names along with its values. This simplifies encoding, but with overhead.</div>
</div></div>, but simply refers to an abbreviation for correct decoding.</div>
</dd></dl>
<div class="standard" id='magicparlabel-45257'>Here are all the DIEs of hello represented as a tree:</div>



<div class="standard" id='magicparlabel-45264'><img style='width:60%;' src='27_img_06_dwarf_tree.svg' alt='image: 27_img_06_dwarf_tree.svg' />
<a id="dwarf_tree" />
</div>


</div>
<div class="standard" id='magicparlabel-45270'>In the figure <a href="#dwarf_tree">6</a>, <span style='font-family:monospace;'>DW_TAG_subprogram</span> represents a function such as <span style='font-family:monospace;'>main</span>. Its children are the DIEs of <span style='font-family:monospace;'>argc</span> and <span style='font-family:monospace;'>argv</span>. With such precise information, matching source to binary is an easy job for <span style='font-family:monospace;'>gdb</span>.</div>

<div class="standard" id='magicparlabel-45271'>If more than one compilation units exist in an executable binary, the DIE entries are sorted according to the compilation order from <span style='font-family:monospace;'>gcc</span>. For example, suppose we have another <span style='font-family:monospace;'>test.c</span> source file<div class="foot"><span class="foot_label">27</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-45275'>It can contain anything. Just a sample file.</div>
</div></div> and compile it together with hello:</div>



<div class="standard" id='magicparlabel-45281'><span style='font-family:monospace;'>$ gcc -masm=intel -m32 -g test.c hello.c -o hello</span></div>



<div class="standard" id='magicparlabel-45287'>Then, the all DIE entries in <span style='font-family:monospace;'>test.c</span> are displayed before the DIE entries in <span style='font-family:monospace;'>hello.c:</span></div>

<div class="lyx_code" id='magicparlabel-45288'><div class="lyx_code_item">&lt;0&gt;&lt;b&gt;: Abbrev Number: 1 (DW_TAG_compile_unit)
<br />

</div>

<div class="lyx_code" id='magicparlabel-45289'><div class="lyx_code_item">    &lt;c&gt;   DW_AT_producer    : (indirect string, offset: 0x0): GNU C11 5.4.0 20160609 </div>
<div class="lyx_code_item">-masm=intel -m32 -mtune=generic -march=i686 -g -fstack-protector-strong</div>
<div class="lyx_code_item">    &lt;10&gt;   DW_AT_language    : 12       (ANSI C99)</div>
<div class="lyx_code_item">    &lt;11&gt;   DW_AT_name        : (indirect string, offset: 0x64): test.c</div>
<div class="lyx_code_item">    &lt;15&gt;   DW_AT_comp_dir    : (indirect string, offset: 0x5f): /tmp</div>
<div class="lyx_code_item">    &lt;19&gt;   DW_AT_low_pc      : 0x804840b</div>
<div class="lyx_code_item">    &lt;1d&gt;   DW_AT_high_pc     : 0x6</div>
<div class="lyx_code_item">    &lt;21&gt;   DW_AT_stmt_list   : 0x0</div>
<div class="lyx_code_item"> &lt;1&gt;&lt;25&gt;: Abbrev Number: 2 (DW_TAG_subprogram)</div>
<div class="lyx_code_item">    &lt;26&gt;   DW_AT_external    : 1</div>
<div class="lyx_code_item">    &lt;26&gt;   DW_AT_name        : bar</div>
<div class="lyx_code_item">    &lt;2a&gt;   DW_AT_decl_file   : 1</div>
<div class="lyx_code_item">    &lt;2b&gt;   DW_AT_decl_line   : 1</div>
<div class="lyx_code_item">    &lt;2c&gt;   DW_AT_low_pc      : 0x804840b</div>
<div class="lyx_code_item">    &lt;30&gt;   DW_AT_high_pc     : 0x6</div>
<div class="lyx_code_item">    &lt;34&gt;   DW_AT_frame_base  : 1 byte block: 9c         (DW_OP_call_frame_cfa)</div>
<div class="lyx_code_item">    &lt;36&gt;   DW_AT_GNU_all_call_sites: 1</div>
<div class="lyx_code_item"></div>
<div class="lyx_code_item"><b>....after all DIEs in test.c listed....</b></div>
<div class="lyx_code_item"></div>
<div class="lyx_code_item">&lt;0&gt;&lt;42&gt;: Abbrev Number: 1 (DW_TAG_compile_unit)</div>
<div class="lyx_code_item">    &lt;43&gt;   DW_AT_producer    : (indirect string, offset: 0x0): GNU C11 5.4.0 20160609 </div>
<div class="lyx_code_item">-masm=intel -m32 -mtune=generic -march=i686 -g -fstack-protector-strong</div>
<div class="lyx_code_item">    &lt;47&gt;   DW_AT_language    : 12       (ANSI C99)</div>
<div class="lyx_code_item">    &lt;48&gt;   DW_AT_name        : (indirect string, offset: 0xc5): hello.c</div>
<div class="lyx_code_item">    &lt;4c&gt;   DW_AT_comp_dir    : (indirect string, offset: 0x5f): /tmp</div>
<div class="lyx_code_item">    &lt;50&gt;   DW_AT_low_pc      : 0x8048411</div>
<div class="lyx_code_item">    &lt;54&gt;   DW_AT_high_pc     : 0x2e</div>
<div class="lyx_code_item">    &lt;58&gt;   DW_AT_stmt_list   : 0x35</div>
<div class="lyx_code_item"><b>....then all DIEs in hello.c are listed....</b></div>
<div class="lyx_code_item"></div>
</div>
</div>
<h1 class="part" id='magicparlabel-45320'><span class="part_label">Part II</span> Groundwork </h1>
<div class="chapter" id='magicparlabel-45321'>Bootloader<a id="chap_Bootloader" />
</div>
<div class="standard" id='magicparlabel-45322'>A <em>bootloader</em> loads an OS, or an application <div class="foot"><span class="foot_label">28</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-45326'>Many embedded devices don't use an OS. In embedded systems, the bootloader is simply included in boot firmware and no bootloader is needed. </div>
</div></div> that runs and communicate directly with hardware. To run an OS, the first thing to write is a bootloader. In this chapter, we are going to write a rudimentary bootloader, as our main focus is writing an operating system, not a bootloader. More interestingly, this chapter will present related tools and techniques that are applicable for writing a bootloader as well as an operating system.</div>
<div class="section" id='magicparlabel-45327'>x86 Boot Process</div>
<div class="standard" id='magicparlabel-45328'>After the POST process finished, the CPU's program counter is set to the address <span style='font-family:monospace;'>FFFF:0000h</span> for executing BIOS code. <em>BIOS - <b>B</b>asic <b>I</b>nput/<b>O</b>utput <b>S</b>ystem</em> is a firmware that performs hardware initialization and provides a set of generic subroutines to control input/output devices. The BIOS checks all available storage devices (floppy disks and hard disks) if any device is bootable, by examining the last two bytes of the first sector whether it has the boot record signature of <span style='font-family:monospace;'>0x55</span>, <span style='font-family:monospace;'>0xAA</span>. If so, the BIOS loads the first sector to the address <span style='font-family:monospace;'>7C00h</span>, set the program counter to that address and let the CPU executing code from there.</div>

<div class="standard" id='magicparlabel-45329'>The first sector is called <em><b>M</b>aster <b>B</b>oot <b>R</b>ecord, </em>or<em> MBR</em>. The program in the first sector is called <em>MBR Bootloader</em>.</div>
<div class="section" id='magicparlabel-45330'>Using BIOS services</div>
<div class="standard" id='magicparlabel-45331'>BIOS provides many basic services for controlling the hardware at the boot stage. A service is a group of routines that controls a particular hardware device, or returns information of current system. Each service is given an interrupt number. To call a BIOS routine, an <span style='font-family:monospace;'>int</span> instruction must be used with an interrupt number. Each BIOS service defines its own numbers for its routines; to call a routine, a specific number must be written to a register required by each service. The list of all BIOS interrupts is available with Ralf Brown's Interrupt List at: <span class="flex_url">http://www.cs.cmu.edu/~ralf/files.html</span>.</div>


<div class='float-figure'><div class="plain_layout" id='magicparlabel-45340'><span class='float-caption-Standard float-caption float-caption-standard'>Figure 0.19:  The boot process.</span></div>

<div class="plain_layout" id='magicparlabel-45345'><img style='width:80%;' src='28_img_07_simple_boot_process.png' alt='image: 28_img_07_simple_boot_process.png' />
</div>
</div>


<dl class='description' id='magicparlabel-45346'><dt class="description_label">Example:</dt>
<dd class="description_item"> Interrupt call <span style='font-family:monospace;'>13h</span> (diskette service) requires number of sectors to read, track number, sector number, head number and drive number to read from a storage device. The content of the sector is stored in memory at the address defined by the pair of registers <span style='font-family:monospace;'>ES:BX</span>. The parameters are stored in registers like this:
<br />



<div class='float-listings'><pre class ='listings [x86masm]Assembler'>; Store sector content in the buffer 10FF:0000
mov     dx, 10FFh
mov     es, dx
xor     bx, bx
mov     al, 2    ; read 2 sector
mov     ch, 0    ; read track 0
mov     cl, 2    ; 2nd sector is read
mov     dh, 0    ; head number
mov     dl, 0    ; drive number. Drive 0 is floppy drive.
mov     ah, 0x02 ; read floppy sector function
int     0x13     ; call BIOS - Read the sector</pre></div>

</dd></dl>
<div class="standard" id='magicparlabel-45362'>The BIOS is only available in real mode. However, when switching to protected mode, then BIOS will not be usable anymore and the operating system code is responsible for controlling hardware devices. This is when the operating system stands on its own: it must provide its own kernel drivers for talking to hardware.</div>
<div class="section" id='magicparlabel-45363'>Boot process</div>

<ol class="enumerate" id='magicparlabel-45364'><li class="enumerate_item">BIOS transfers control to MBR bootloader by jumping to <span style='font-family:monospace;'>0000:7c00h</span>, where bootloader is assumed to exist already.</li>
<li class="enumerate_item">Setup machine environment for booting by properly initialize segment registers to enable flat memory model.</li>
<li class="enumerate_item">Load the kernel:
<br />



<ol class="enumerate" id='magicparlabel-45367'><li class="enumerate_item">Read kernel from disk.</li>
<li class="enumerate_item">Save it somewhere in the main memory.</li>
<li class="enumerate_item">Jump to the starting code address of the kernel and execute.</li>
</ol>
</li><li class="enumerate_item">If error occurs, print a message to notify users something went wrong and halt.</li>
</ol>
<div class="section" id='magicparlabel-45371'>Example Bootloader</div>
<div class="standard" id='magicparlabel-45372'>Here is a simple bootloader that does nothing, except not crashing the machine but halt it gracefully. If the virtual machine does not halt but text repeatedly flashing, it means the bootloader does not load properly and the machine crashed. The machine crashed because it keeps executing until the near end of physical memory (1&thinsp;MB in real mode), which is <span style='font-family:monospace;'>FFFF:0000h</span>, which starts the whole BIOS boot process all over again. This is effectively a reset, but not fully, since machine environment from previous run is still reserved. For that reason, it is called a <em>warm reboot</em>. The opposite of warm reboot is <em>cold reboot</em>, in which the machine environment is reset to initial settings when the computer starts from a powerless state.
<br />

</div>


<div class='float-listings'><pre class ='listings [x86masm]Assembler'>;******************************************
; bootloader.asm		
; A Simple Bootloader
;******************************************
org 0x7c00
bits 16
start: jmp boot

;; constant and variable definitions
msg	db	"Welcome to My Operating System!", 0ah, 0dh, 0h

boot:
  cli	; no interrupts 	
  cld	; all that we need to init
  hlt	; halt the system

; We have to be 512 bytes. Clear the rest of the bytes with 0
times 510 - ($-$$) db 0
dw 0xAA55				  ; Boot Signiture</pre></div>

<div class="section" id='magicparlabel-45396'>Compile and load</div>
<div class="standard" id='magicparlabel-45397'>We compile the code with <span style='font-family:monospace;'>nasm </span>and write it to a disk image:</div>



<div class="standard" id='magicparlabel-45403'><span style='font-family:monospace;'>$ nasm -f bin bootloader.asm -o bootloader</span></div>



<div class="standard" id='magicparlabel-45409'>Then, we create a 1.4 MB floppy disk and:</div>



<div class="standard" id='magicparlabel-45415'><span style='font-family:monospace;'>$ dd if=/dev/zero of=disk.img bs=512 count=2880</span></div>





<div class="lyx_code" id='magicparlabel-45426'><div class="lyx_code_item">2880+0 records in</div>
<div class="lyx_code_item">2880+0 records out</div>
<div class="lyx_code_item">1474560 bytes (1.5 MB, 1.4 MiB) copied, 0.00625622 s, 236 MB/s</div>
</div>


<div class="standard" id='magicparlabel-45434'>Then, we write the bootloader to the 1<sup class="script_superscript">st</sup>sector:</div>



<div class="standard" id='magicparlabel-45444'><span style='font-family:monospace;'>$ dd conv=notrunc if=bootloader of=disk.img bs=512 count=1 seek=0</span></div>





<div class="lyx_code" id='magicparlabel-45455'><div class="lyx_code_item">1+0 records in</div>
<div class="lyx_code_item">1+0 records out</div>
<div class="lyx_code_item">512 bytes copied, 0.000102708 s, 5.0 MB/s</div>
</div>


<div class="standard" id='magicparlabel-45463'>The option <span style='font-family:monospace;'>conv=notrunc</span> preserves the original size of the floppy disk. Without this option, the 1.4 MB disk image will be completely replaced by the new <span style='font-family:monospace;'>disk.img</span> with only 512 bytes, and we do not want that happens. </div>

<div class="standard" id='magicparlabel-45464'>In the past, developing an operating system is complicated because a programmer needs to understand specific hardware he is using. Even though x86 was ubiquitous, the minute differences between models made some code written for a machine not run on another. Further, if you use the same physical computer you write your operating system take very long between runs, and also difficult to debug. Fortunately, today we can uniformly produce a virtual machine with a particular specification and avoid the incompatibility issue altogether, thus making an OS easier to write and test since everyone can reproduce the same machine environment. </div>

<div class="standard" id='magicparlabel-45465'>We will be using <em>QEMU</em>, a generic and open source machine emulator and virtualizer. QEMU can emulate various types of machine, not limited to x86_64 only. Debug is easy since you can connect GDB to a virtual machine to debug code that runs on it, through QEMU's built-in GDB server. QEMU can use <span style='font-family:monospace;'>disk.img</span> as a boot device e.g. a floppy disk:</div>



<div class="standard" id='magicparlabel-45471'><span style='font-family:monospace;'>$</span> <span style='font-family:monospace;'>qemu-system-i386 -machine q35 -fda disk.img -gdb tcp::26000 -S</span></div>



<ul class="itemize" id='magicparlabel-45477'><li class="itemize_item">With option <span style='font-family:monospace;'>-machine q35</span>, QEMU emulates a <span style='font-family:monospace;'>q35</span> machine model from Intel.<div class="foot"><span class="foot_label">29</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-45481'>The following command lists all supported emulated machines from QEMU:</div>

<div class="lyx_code" id='magicparlabel-45482'><div class="lyx_code_item">qemu-system-i386 -machine help</div>
</div>
</div></div>.</li>
<li class="itemize_item">With option <span style='font-family:monospace;'>-fda disk.img</span>, QEMU uses <span style='font-family:monospace;'>disk.img</span> as a floppy disk image.</li>
<li class="itemize_item">With option <span style='font-family:monospace;'>-gdb tcp::26000</span>, QEMU allows <span style='font-family:monospace;'>gdb</span> to connect to the virtual machine for remote debugging through a tcp socket with port 26000.</li>
<li class="itemize_item">With option <span style='font-family:monospace;'>-S</span>, QEMU waits for <span style='font-family:monospace;'>gdb</span> to connect before it starts running.</li>
</ul>
<div class="standard" id='magicparlabel-45486'>After the command is executed, a new console window that displays the screen output of the virtual machine. Open another terminal, run <span style='font-family:monospace;'>gdb</span> and set the current architecture to <span style='font-family:monospace;'>i386</span>, since we are running in 16-bit mode:</div>



<div class="standard" id='magicparlabel-45492'><span style='font-family:monospace;'>(gdb) set architecture i8086</span></div>





<div class="standard" id='magicparlabel-45503'><span style='font-family:monospace;'>warning: A handler for the OS ABI "GNU/Linux" is not built into this configuration</span></div>

<div class="standard" id='magicparlabel-45504'><span style='font-family:monospace;'>of GDB. Attempting to continue with the default i8086 settings.</span></div>

<div class="standard" id='magicparlabel-45505'><span style='font-family:monospace;'>The target architecture is assumed to be i8086</span></div>



<div class="standard" id='magicparlabel-45511'>Then, connect <span style='font-family:monospace;'>gdb</span> to the waiting virtual machine with this command:</div>



<div class="standard" id='magicparlabel-45517'><span style='font-family:monospace;'>(gdb) target remote localhost:26000</span></div>





<div class="standard" id='magicparlabel-45528'><span style='font-family:monospace;'>Remote debugging using localhost:26000</span></div>

<div class="standard" id='magicparlabel-45529'><span style='font-family:monospace;'>0x0000fff0 in ?? ()</span></div>



<div class="standard" id='magicparlabel-45535'>Then, place a breakpoint at <span style='font-family:monospace;'>0x7c00</span>:</div>



<div class="standard" id='magicparlabel-45541'><span style='font-family:monospace;'>(gdb) b *0x7c00</span></div>





<div class="standard" id='magicparlabel-45552'><span style='font-family:monospace;'>Breakpoint 1 at 0x7c00</span></div>



<div class="standard" id='magicparlabel-45558'>Note the before the memory address. Without the asterisk, <span style='font-family:monospace;'>gdb</span> treats the address as a symbol in a program rather than an address. Then, for convenience, we use a split layout for viewing the assembly code and registers together:</div>



<div class="standard" id='magicparlabel-45564'><span style='font-family:monospace;'>(gdb) layout asm</span></div>

<div class="standard" id='magicparlabel-45565'><span style='font-family:monospace;'>(gdb) layout reg</span></div>



<div class="standard" id='magicparlabel-45571'>Finally, run the program:</div>



<div class="standard" id='magicparlabel-45577'><span style='font-family:monospace;'>(gdb) c</span></div>



<div class="standard" id='magicparlabel-45583'>If the virtual machine successfully runs the bootloader, this is what the QEMU screen should look like:</div>


<div class='float-figure'><div class="plain_layout" id='magicparlabel-45588'><span class='float-caption-Standard float-caption float-caption-standard'>Figure 0.20:  Boot succeeded.</span></div>

<div class="plain_layout" id='magicparlabel-45593'><img style='width:25%;' src='29_img_07_boot_succeeded.png' alt='image: 29_img_07_boot_succeeded.png' />
</div>
</div>

<div class="subsection" id='magicparlabel-45594'>Debugging</div>
<div class="standard" id='magicparlabel-45595'>If, for some reason, the sample bootloader cannot get to such screen and <span style='font-family:monospace;'>gdb</span> does not stop at <span style='font-family:monospace;'>0x7c00</span>, then the following scenarios are likely:</div>

<ul class="itemize" id='magicparlabel-45596'><li class="itemize_item"><span class='noun'>The bootloader is invalid</span>: the message &ldquo;Boot failed: not a bootable disk&rdquo; appears for floppy disk booting. Make sure the boot signature is at the last 2 bytes of the 512-byte first sector.</li>
<li class="itemize_item"><span class='noun'>The machine cannot find a boot disk</span>: the message &ldquo;Boot failed: not a bootable disk&rdquo; appears for floppy disk booting. Make sure the bootloader is correctly written to the first sector. It can be verify by check the disk with <span style='font-family:monospace;'>hd</span>:
<br />




<div class="standard" id='magicparlabel-45611'><span style='font-family:monospace;'>$ hd disk.img | less</span></div>



<div class="standard" id='magicparlabel-45617'>If the first 512 bytes are all zeroes, then it is likely that the bootloader is incorrectly written to another sector.</div>
</li><li class="itemize_item"><span class='noun'>The machine crashes</span>: When such scenario happens, it reset back to the beginning at <span style='font-family:monospace;'>FFFF:0000h</span>. If the QEMU machine starts without waiting for <span style='font-family:monospace;'>gdb</span>, then the console output window keeps flashing as the machine is repeatedly reset. It is likely some instruction in the bootloader code causing the fault.</li>
</ul>
<div class="standard" style='text-align: left;' id='magicparlabel-45623'><hr />

</div>

<div class="exercise" id='magicparlabel-45624'><div class="exercise_item"><span class="exercise_label">Exercise 0.16.</span>
Print a welcome message
<br />

</div>
<div class="standard" id='magicparlabel-45625'>We loaded the bootloader successfully. But, it needs to do something useful other than halting our machine. The easiest thing to do is printing something on screen, like how an introduction to all programming language starts with &ldquo;Hello World&rdquo;. Our bootloader prints &ldquo;Welcome to my operating system&rdquo;<div class="foot"><span class="foot_label">30</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-45629'>Or whatever message you want.</div>
</div></div>. In this part, we will build a simple I/O library that allows us to set a cursor anywhere on the screen and print text there.</div>

<div class="standard" id='magicparlabel-45630'>First, create a file <b>io.asm</b> for I/O related routines. Then, write the following routines:</div>

<ol class="enumerate" id='magicparlabel-45631'><li class="enumerate_item"><code class="flex_code"><span style='font-size:large;'>MovCursor</span></code> 
<br />


<div class="standard" id='magicparlabel-45636'><b>Purpose:</b> Move a cursor to a specific location on screen and remember this location.</div>

<div class="standard" id='magicparlabel-45637'><b>Parameters:</b> </div>

<ul class="itemize" id='magicparlabel-45638'><li class="itemize_item"><em>bh</em> = Y coordinate</li>
<li class="itemize_item"><em>bl</em> = X coordinate. </li>
</ul>
<div class="standard" id='magicparlabel-45640'><b>Return:</b> None</div>
</li><li class="enumerate_item"><span style='font-size:large;'><code class="flex_code"><span style='font-size:large;'>PutChar</span></code> </span>
<br />


<div class="standard" id='magicparlabel-45646'><b>Purpose:</b> Print a character on screen, at the cursor position previously set by <code class="flex_code">MovCursor</code> .</div>

<div class="standard" id='magicparlabel-45651'><b>Parameters:</b></div>

<ul class="itemize" id='magicparlabel-45652'><li class="itemize_item"><span style='font-family:monospace;'>al</span> = Character to print</li>
<li class="itemize_item"><span style='font-family:monospace;'>bl</span> = text color</li>
<li class="itemize_item"><span style='font-family:monospace;'>cx</span> = number of times the character is repeated</li>
</ul>

<dl class='description' id='magicparlabel-45655'><dt class="description_label">Return:</dt>
<dd class="description_item"> None</dd>
</dl>
</li><li class="enumerate_item"><code class="flex_code"><span style='font-size:large;'>Print</span></code> 
<br />


<div class="standard" id='magicparlabel-45661'><b>Purpose:</b> Print a string.</div>

<div class="standard" id='magicparlabel-45662'><b>Parameters:</b></div>

<ul class="itemize" id='magicparlabel-45663'><li class="itemize_item"><span style='font-family:monospace;'>ds:si</span> = Zero terminated string</li>
</ul>

<dl class='description' id='magicparlabel-45664'><dt class="description_label">Return:</dt>
<dd class="description_item"> None</dd>
</dl>
</li></ol>
<div class="standard" id='magicparlabel-45665'>Test the routines by putting each in the bootloader source, compile and run. To debug, run GDB and set a breakpoint at a specific routine. The end result is that <code class="flex_code">Print</code> should display a welcome message on screen.
<br />

</div>
</div>
<div class="standard" style='text-align: left;' id='magicparlabel-45670'><hr />

</div>
<div class="section" id='magicparlabel-45671'>Loading a program from bootloader</div>
<div class="standard" id='magicparlabel-45672'>Now that we get the feel of how to use the BIOS services, it is time for something more complicated. We will place our kernel on 2<sup class="script_superscript">nd</sup> sector onward, and our bootloader reads 30 sectors starting from 2<sup class="script_superscript">nd</sup> sector. Why 30 sectors? Our kernel will grow gradually, so we will preserve 30 sectors and save us time for modifying the bootloader each time the kernel size expands another sector.</div>

<div class="standard" id='magicparlabel-45681'>The primary responsibility of a bootloader is to read an operating system from some storage device e.g. hard disk, then loads it into main memory and transfer the control to the loaded operating system, similar to how the BIOS reads and loads a bootloader. At the moment, our bootloader does nothing more than just an assembly program loaded by the BIOS. To make our bootloader a real one, it must perform well the above two tasks: <em>read </em>and <em>load</em> an operating system.</div>
<div class="subsection" id='magicparlabel-45682'>Floppy Disk Anatomy</div>
<div class="standard" id='magicparlabel-45683'>To read from a storage device, we must understand how the device works, and the provided interface for controlling it. First of all, a floppy disk is a storage device, similar to RAM, but can store information even when a computer is turned off, thus is called <a id='magicparlabel-45687' />
<div class="marginal"><div class="plain_layout" id='magicparlabel-45691'><em><b>persistent storage device</b></em></div>
</div><em>persistent storage device</em>. A floppy disk also a persistent storage device, thus it provides a storage space up to 1.4 MB, or 1,474,560 bytes. When reading from a floppy disk, the smallest unit that can be read is a <em><a id='magicparlabel-45695' />
sector</em>, a group of 512 contiguous bytes. A group of 18 sectors is a <em><a id='magicparlabel-45699' />
track</em>. Each side of a floppy disk consists of 80 tracks. A floppy drive is required to read a floppy disk. Inside a floppy drive contains an arm with 2 <em>heads</em>, each head reads a side of a floppy drive; head 0 writes the upper side and head 1 writes the lower side of a floppy disk.</div>




<div class='float-marginfigure'><div class="plain_layout" id='magicparlabel-45705'><span class='float-caption-Standard float-caption float-caption-standard'>MarginFigure 8:  Sector and Track.</span></div>

<div class="plain_layout" id='magicparlabel-45710'><img style='width:38%;' src='30_img_07_Disk-structure.png' alt='image: 30_img_07_Disk-structure.png' />
</div>
</div>


<div class="standard" id='magicparlabel-45711'>When a floppy drive writes data to a brand new floppy disk, track 0 on the upper side is written first, by head 0. When the upper track 0 is full, the lower track 0 is used by head 1. When both the upper and lower side of a track 0 are full, it goes back to head 0 for writing data again, but this time the upper side of track 1 and so on, until no space left on the device. The same procedure is also applied for reading data from floppy disk.</div>


<div class='float-marginfigure'><div class="plain_layout" id='magicparlabel-45716'><span class='float-caption-Standard float-caption float-caption-standard'>MarginFigure 9:  Floppy disk platter with 2 sides.</span></div>

<div class="plain_layout" id='magicparlabel-45721'><img style='width:60%;' src='31_img_07_Disk_heads.png' alt='image: 31_img_07_Disk_heads.png' />
</div>
</div>

<div class="subsection" id='magicparlabel-45722'>Read and load sectors from a floppy disk<a id="subsec_Read_and_load" />
</div>
<div class="standard" id='magicparlabel-45723'>First, we need to a sample program for writing into the 2<sup class="script_superscript">nd</sup> sector, so we can experiment with floppy disk reading:
<br />

</div>


<div class='float-listings'><pre class ='listings [x86masm]Assembler'>;******************************************
; sample.asm		
; A Sample Program
;******************************************
mov eax, 1
add eax, 1</pre></div>


<div class="standard" id='magicparlabel-45738'>Such a program is good enough. To simplify and for the purpose of demonstration, we will use the same floppy disk that holds the bootloader to hold our operating system. The operating system image starts from the 2<sup class="script_superscript">nd</sup> sector, as the 1<sup class="script_superscript">st</sup> sector is already in use by the bootloader. We compile and write it to the 2<sup class="script_superscript">nd</sup> sector with <span style='font-family:monospace;'>dd</span>:</div>



<div class="standard" id='magicparlabel-45756'><span style='font-family:monospace;'>$ nasm -f bin sample.asm -o sample</span></div>

<div class="standard" id='magicparlabel-45757'><span style='font-family:monospace;'>$ dd if=sample of=disk.img bs=512 count=1 seek=1</span></div>






<div class='float-figure'><div class="plain_layout" id='magicparlabel-45768'><span class='float-caption-Standard float-caption float-caption-standard'>Figure 0.21:  The bootloader and the sample program on floppy disk.</span></div>

<div class="plain_layout" id='magicparlabel-45773'>

<table><tbody><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-45795'><b>1<sup class="script_superscript">st</sup> sector</b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-45802'><b>2<sup class="script_superscript">nd</sup> sector</b></div>
</td>
<td align='center' valign='top' colspan='2'>
<div class="plain_layout" id='magicparlabel-45809'>.....</div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-45815'><b>30<sup class="script_superscript">th</sup> sector</b></div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-45822'><span style='font-family:monospace;'>bootloader</span></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-45825'><span style='font-family:monospace;'>sample</span></div>
</td>
<td align='center' valign='top' colspan='2'>
<div class="plain_layout" id='magicparlabel-45828'>....</div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-45834'>(empty)</div>
</td>
</tr></tbody>
</table>
</div>
</div>


<div class="standard" id='magicparlabel-45835'>Next, we need to fix the bootloader for reading from the floppy disk and load a number of arbitrary sectors. Before doing so, a basic understanding of floppy disk is required. To read data from disk, interrupt <span style='font-family:monospace;'>13</span> with <span style='font-family:monospace;'>AH = 02</span> is a routine for reading sectors from disk into memory:</div>

<div class="lyx_code" id='magicparlabel-45836'><div class="lyx_code_item">AH = 02</div>
<div class="lyx_code_item">AL = number of sectors to read (1-128 dec.)</div>
<div class="lyx_code_item">CH = track/cylinder number (0-1023 dec., see below)</div>
<div class="lyx_code_item">CL = sector number (1-17 dec.)</div>
<div class="lyx_code_item">DH = head number (0-15 dec.)</div>
<div class="lyx_code_item">DL = drive number (0=A:, 1=2nd floppy, 80h=drive 0, 81h=drive 1)</div>
<div class="lyx_code_item">ES:BX = pointer to buffer</div>
<div class="lyx_code_item"></div>
<div class="lyx_code_item">Return:</div>
<div class="lyx_code_item">   AH = status (see INT 13,STATUS)</div>
<div class="lyx_code_item">   AL = number of sectors read</div>
<div class="lyx_code_item">   CF = 0 if successful</div>
<div class="lyx_code_item">      = 1 if error</div>
</div>
<div class="standard" id='magicparlabel-45849'>Apply the above routine, the bootloader can read the 2<sup class="script_superscript">nd</sup> sector:
<br />

</div>


<div class='float-listings'><pre class ='listings [x86masm]Assembler'>;******************************************
; Bootloader.asm		
; A Simple Bootloader
;******************************************
org 0x7c00
bits 16
start: jmp boot

;; constant and variable definitions
  msg	db	"Welcome to My Operating System!", 0ah, 0dh, 0h

boot:
  cli	; no interrupts 	
  cld	; all that we need to init

  mov	ax, 0x50

  ;; set the buffer
  mov	es, ax
  xor	bx, bx

  mov	al, 2					; read 2 sector
  mov	ch, 0					; track 0
  mov	cl, 2					; sector to read (The second sector)
  mov	dh, 0					; head number
  mov	dl, 0					; drive number

  mov	ah, 0x02			     ; read sectors from disk
  int	0x13					 ; call the BIOS routine
  jmp	0x50:0x0				; jump and execute the sector!

  hlt	; halt the system

  ; We have to be 512 bytes. Clear the rest of the bytes with 0
times 510 - ($-$$) db 0
dw 0xAA55				  ; Boot Signiture</pre></div>


<div class="standard" id='magicparlabel-45894'>The above code jumps to the address <span style='font-family:monospace;'>0x50:00</span> (which is <span style='font-family:monospace;'>0x500</span>). To test the code, load it on a QEMU virtual machine and connect through <span style='font-family:monospace;'>gdb</span>, then place a breakpoint at <span style='font-family:monospace;'>0x500</span>. If <span style='font-family:monospace;'>gdb</span> stops at the address, with the assembly listing is the same code as in <span style='font-family:monospace;'>sample.asm</span>, then the bootloader successfully loaded the program. This is an important milestone, as we ensure that our operating system are loaded and ran properly.</div>
<div class="section" id='magicparlabel-45895'>Improve productivity with scripts</div>
<div class="subsection" id='magicparlabel-45896'>Automate build with GNU Make</div>
<div class="standard" id='magicparlabel-45897'>Up to this point, the whole development process felt repetitive: whenever a change is made, the same commands are entered again. The commands are also complex.<span style='font-family:monospace;'> Ctrl+r</span> helps, but it still feels tedious. </div>

<div class="standard" id='magicparlabel-45898'><strong class="flex_strong">GNU Make</strong> is a program that controls and automates the process of building a complex software. For a small program, like a single C source file, invoking <code class="flex_code"><em>gcc</em></code> is quick and easy. However, soon your software will be more complex, with multiples spanning multiple directories, it is a chore to manually build and link files. To solve such problem, a tool was created to automate away this problem and is called a <em>build system</em>. GNU Make is one such of tools. There are various build systems out there, but GNU Make is the most popular in Linux world, as it is used for building the Linux kernel.</div>

<div class="standard" id='magicparlabel-45907'>For a comprehensive introduction to make, please refer to the official Introduction to Make: <span class="flex_url">https://www.gnu.org/software/make/manual/html_node/Introduction.html#Introduction</span>. And that's enough for our project. You can also download the manual in different formats e.g. PDF from the official manual page: <span class="flex_url">https://www.gnu.org/software/make/manual/</span> .</div>

<div class="standard" id='magicparlabel-45916'>With Makefile, we can build simpler commands and save time:
<br />

</div>


<div class='float-listings'><pre class ='listings [gnu]make'>all: bootloader bootdisk

bootloader:
	nasm -f bin bootloader.asm -o bootloader.o

kernel:
	nasm -f bin sample.asm -o sample.o

bootdisk: bootloader.o kernel.o
	dd if=/dev/zero of=disk.img bs=512 count=2880
	dd conv=notrunc if=bootloader.o of=disk.img bs=512 count=1 seek=0
	dd conv=notrunc if=sample.o of=disk.img bs=512 count=1 seek=1</pre></div>


<div class="standard" id='magicparlabel-45933'>Now, with a single command, we can build from start to finish a disk image with a bootloader at 1<sup class="script_superscript">st</sup>sector and the sample program at 2<sup class="script_superscript">nd</sup>sector:</div>



<div class="standard" id='magicparlabel-45947'><span style='font-family:monospace;'>$ make bootdisk</span></div>





<div class="standard" id='magicparlabel-45958'><span style='font-family:monospace;'>nasm -f bin bootloader.asm -o bootloader.o</span></div>

<div class="standard" id='magicparlabel-45959'><span style='font-family:monospace;'>nasm -f bin sample.asm -o bootloader.o</span></div>

<div class="standard" id='magicparlabel-45960'><span style='font-family:monospace;'>dd if=/dev/zero of=disk.img bs=512 count=2880</span></div>

<div class="standard" id='magicparlabel-45961'><span style='font-family:monospace;'>2880+0 records in</span></div>

<div class="standard" id='magicparlabel-45962'><span style='font-family:monospace;'>2880+0 records out</span></div>

<div class="standard" id='magicparlabel-45963'><span style='font-family:monospace;'>1474560 bytes (1.5 MB, 1.4 MiB) copied, 0.00482188 s, 306 MB/s</span></div>

<div class="standard" id='magicparlabel-45964'><span style='font-family:monospace;'>dd conv=notrunc if=bootloader.o of=disk.img bs=512 count=1 seek=0</span></div>

<div class="standard" id='magicparlabel-45965'><span style='font-family:monospace;'>0+1 records in</span></div>

<div class="standard" id='magicparlabel-45966'><span style='font-family:monospace;'>0+1 records out</span></div>

<div class="standard" id='magicparlabel-45967'><span style='font-family:monospace;'>10 bytes copied, 7.0316e-05 s, 142 kB/s</span></div>

<div class="standard" id='magicparlabel-45968'><span style='font-family:monospace;'>dd conv=notrunc if=sample.o of=disk.img bs=512 count=1 seek=1</span></div>

<div class="standard" id='magicparlabel-45969'><span style='font-family:monospace;'>0+1 records in</span></div>

<div class="standard" id='magicparlabel-45970'><span style='font-family:monospace;'>0+1 records out</span></div>

<div class="standard" id='magicparlabel-45971'><span style='font-family:monospace;'>10 bytes copied, 0.000208375 s, 48.0 kB/s</span></div>



<div class="standard" id='magicparlabel-45977'>Looking at the Makefile, we can see a few problems: </div>

<div class="standard" id='magicparlabel-45978'>First, the name <span style='font-family:monospace;'>disk.img</span> are all over the place. When we want to change the disk image name e.g. <span style='font-family:monospace;'>floppy_disk.img</span>, all the places with the name <span style='font-family:monospace;'>disk.img</span> must be changed manually. To solve this problem, we use a variable, and every appearance of <span style='font-family:monospace;'>disk.img</span> is replaced with the reference to the variable. This way, only one place that is changed - the variable definition - all other places are updated automatically. The following variables are added:
<br />

</div>


<div class='float-listings'><pre class ='listings [gnu]make'>BOOTLOADER=bootloader.o
OS=sample.o
DISK_IMG=disk.img.o</pre></div>


<div class="standard" id='magicparlabel-45986'>The second problem is, the name <span style='font-family:monospace;'>bootloader</span> and <span style='font-family:monospace;'>sample</span> appears as part of the filenames of the source files e.g. <span style='font-family:monospace;'>bootloader.asm </span>and <span style='font-family:monospace;'>sample.asm</span>, as well as the filenames of the binary files e.g. <span style='font-family:monospace;'>bootloader</span> and <span style='font-family:monospace;'>sample</span>. Similar to <span style='font-family:monospace;'>disk.img</span>, when a name changed, every reference of that name must also be changed manually for both the names of the source files and the names of the binary files e.g. if we change <span style='font-family:monospace;'>bootloader.asm</span> to <span style='font-family:monospace;'>loader.asm</span>, then the object file <span style='font-family:monospace;'>bootloader.o</span> needs changing to <span style='font-family:monospace;'>loader.o</span>. To solve this problem, instead of changing filenames manually, we create a rule that automatically generate the filenames of one extension to another. In this case, we want any source file that starts with <span style='font-family:monospace;'>.asm </span>to have its equivalent binary files, without any extension e.g. <span style='font-family:monospace;'>bootloader.asm</span> <math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow><mo> &rarr; </mo>
 </mrow></math> <span style='font-family:monospace;'>bootloader.o</span>. Such transformation is common, so GNU Make provides built-in functions: <span style='font-family:monospace;'>wildcard</span> and <span style='font-family:monospace;'>patsubst</span> for solving such problems:
<br />

</div>


<div class='float-listings'><pre class ='listings [gnu]make'>BOOTLOADER_SRCS := $(wildcard *.asm)
BOOTLOADER_OBJS := $(patsubst %.asm, %.o, $(BOOTLOADER_SRCS))</pre></div>


<div class="standard" id='magicparlabel-45993'><span style='font-family:monospace;'>wildcard</span> matches any <span style='font-family:monospace;'>.asm</span> file in the current directory, then assigned the list of matched files into the variable <span style='font-family:monospace;'>BOOTLOADER_SRCS</span>. In this case, <span style='font-family:monospace;'>BOOTLOADER_SRCS </span>is assigned the value: </div>

<div class="lyx_code" id='magicparlabel-45994'><div class="lyx_code_item">bootloader.asm sample.asm</div>
</div>
<div class="standard" id='magicparlabel-45995'><span style='font-family:monospace;'>patsubst</span> substitutes any filename starts with <span style='font-family:monospace;'>.asm</span> into a filename <span style='font-family:monospace;'>.o</span> e.g. <span style='font-family:monospace;'>bootloader.asm</span> <math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow><mo> &rarr; </mo>
 </mrow></math> <span style='font-family:monospace;'>bootloader.o</span>. After <span style='font-family:monospace;'>patsubsts</span> runs, we get a list of object files in <span style='font-family:monospace;'>BOOTLOADER_OBJS</span>:</div>

<div class="lyx_code" id='magicparlabel-45996'><div class="lyx_code_item">bootloader.o sample.o</div>
</div>
<div class="standard" id='magicparlabel-45997'>Finally, a recipe for building from <span style='font-family:monospace;'>.asm</span> to <span style='font-family:monospace;'>.o</span> are needed:
<br />

</div>


<div class='float-listings'><pre class ='listings [gnu]make'>%.o: %.asm
	nasm -f bin $&lt; -o $@</pre></div>


<ul class="itemize" id='magicparlabel-46004'><li class="itemize_item"><span style='font-family:monospace;'>$&lt;</span> is a special variable that refers to the input of the recipe: <span style='font-family:monospace;'>%.asm</span>.</li>
<li class="itemize_item"><span style='font-family:monospace;'>$@</span> is a special variable that refers to the output of the recipe: <span style='font-family:monospace;'>%.o</span>.</li>
</ul>
<div class="standard" id='magicparlabel-46006'>When the recipe is executed, the variables are replaced with the actual values. For example, if a transformation is <span style='font-family:monospace;'>bootloader.asm </span><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow><mo> &rarr; </mo>
 </mrow></math> <span style='font-family:monospace;'>bootloader.o</span>, then the actual command executed when replace the placeholders in the recipe is: </div>

<div class="lyx_code" id='magicparlabel-46007'><div class="lyx_code_item">nasm -f bin bootloader.asm -o bootloader.o</div>
</div>
<div class="standard" id='magicparlabel-46008'>With the recipe, all the <span style='font-family:monospace;'>.asm</span> files are built automatically with the <span style='font-family:monospace;'>nasm</span> command into <span style='font-family:monospace;'>.o</span> files and we no longer need a separate recipe for each object files. Putting it all together with the new variables, we get a better Makefile:
<br />

</div>


<div class='float-listings'><pre class ='listings [gnu]make'>BOOTLOADER=bootloader.o
OS=sample.o
DISK_IMG=disk.img

BOOTLOADER_SRCS := $(wildcard *.asm)
BOOTLOADER_OBJS := $(patsubst %.asm, %.o, $(BOOTLOADER_SRCS))

all: bootdisk

%.o: %.asm
	nasm -f bin $&lt; -o $@

bootdisk:  $(BOOTLOADER_OBJS)
	dd if=/dev/zero of=$(DISK_IMG) bs=512 count=2880
	dd conv=notrunc if=$(BOOTLOADER) of=$(DISK_IMG) bs=512 count=1 seek=0
	dd conv=notrunc if=$(OS) of=$(DISK_IMG) bs=512 count=1 seek=1</pre></div>


<div class="standard" id='magicparlabel-46029'>From here on, any <span style='font-family:monospace;'>.asm</span> file is compiled automatically, without an explicit recipe for each file. </div>

<div class="standard" id='magicparlabel-46030'>The object files are in the same directory as the source files, making it more difficult when working with the source tree. Ideally, object files and source files should live in different directories. We want a better organized directory layout like Figure <a href="#project_layout">Part \Roman{part}</a>.</div>
<div class='float-marginfigure'><div class="plain_layout" id='magicparlabel-46034'><span class='float-caption-Standard float-caption float-caption-standard'>MarginFigure 10:  A better project layout</span><a id="project_layout" />
</div>

<div class="lyx_code" id='magicparlabel-46039'><div class="lyx_code_item">.</div>
<div class="lyx_code_item">├── bootloader</div>
<div class="lyx_code_item">│   └── bootloader.asm</div>
<div class="lyx_code_item">│   └── Makefile</div>
<div class="lyx_code_item">├── build</div>
<div class="lyx_code_item">│   ├── bootloader</div>
<div class="lyx_code_item">│   │   └── bootloader.o</div>
<div class="lyx_code_item">│   ├── disk.img</div>
<div class="lyx_code_item">│   └── os</div>
<div class="lyx_code_item">│       └── sample.o</div>
<div class="lyx_code_item">├── Makefile</div>
<div class="lyx_code_item">└── os</div>
<div class="lyx_code_item">    ├── Makefile</div>
<div class="lyx_code_item">    └── sample.asm</div>
</div>
<div class="plain_layout" id='magicparlabel-46053'>The layout can be displayed with <span style='font-family:monospace;'>tree</span> command:</div>

<div class="plain_layout" id='magicparlabel-46054'><span style='font-family:monospace;'>$ tree</span></div>
</div>


<div class="standard" id='magicparlabel-46055'><span style='font-family:monospace;'>bootloader/</span> directory holds bootloader source files; <span style='font-family:monospace;'>os/</span> holds operating system source files that we are going to write later; <span style='font-family:monospace;'>build/</span> holds the object files for both the bootloader, the os and the final disk image <span style='font-family:monospace;'>disk.img</span>. Notice that <span style='font-family:monospace;'>bootloader/</span> directory also has its own Makefile. This Makefile will be responsible for building everything in <span style='font-family:monospace;'>bootloader/</span> directory, while the top-level Makefile is released from the burden of building the bootloader, but only the disk image. The content of the Makefile in <span style='font-family:monospace;'>bootloader/</span> directory should be:
<br />

</div>


<div class='float-listings'><pre class ='listings [gnu]make'>BUILD_DIR=../build/bootloader

BOOTLOADER_SRCS := $(wildcard *.asm)
BOOTLOADER_OBJS := $(patsubst %.asm, $(BUILD_DIR)/%.o, $(BOOTLOADER_SRCS))

all: $(BOOTLOADER_OBJS)

$(BUILD_DIR)/%.o: %.asm
	nasm -f bin $&lt; -o $@</pre></div>
<div class='float-marginfigure'><div class="plain_layout" id='magicparlabel-46072'><span class='float-caption-Standard float-caption float-caption-standard'>MarginFigure 11:  Makefile in <span style='font-family:monospace;'>bootloader/</span></span></div>

<div class="lyx_code" id='magicparlabel-46077'><div class="lyx_code_item">.</div>
<div class="lyx_code_item">├── bootloader</div>
<div class="lyx_code_item">│   └── bootloader.asm</div>
<div class="lyx_code_item">│   └── Makefile</div>
<div class="lyx_code_item">├── build</div>
<div class="lyx_code_item">│   ├── bootloader</div>
<div class="lyx_code_item">│   │   └── bootloader.o</div>
<div class="lyx_code_item">│   ├── disk.img</div>
<div class="lyx_code_item">│   └── os</div>
<div class="lyx_code_item">│       └── sample.o</div>
<div class="lyx_code_item">├── Makefile</div>
<div class="lyx_code_item">└── os</div>
<div class="lyx_code_item">    ├── Makefile</div>
<div class="lyx_code_item">    └── sample.asm</div>
</div>
</div>


<div class="standard" id='magicparlabel-46091'>Basically everything related to the bootloader in the top-level Makefile are extracted into this Makefile. When <span style='font-family:monospace;'>make</span> runs this Makefile,<span style='font-family:monospace;'> bootloader.o</span> should be built and put into <span style='font-family:monospace;'>../build</span>/ directory. As a good practice, all references to <span style='font-family:monospace;'>../build/</span> go through <span style='font-family:monospace;'>BUILD_DIR</span> variable. The recipe for transforming from <span style='font-family:monospace;'>.asm </span><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow><mo> &rarr; </mo>
 </mrow></math> <span style='font-family:monospace;'>.o</span> is also updated with proper paths, else it will not work. </div>

<ul class="itemize" id='magicparlabel-46092'><li class="itemize_item"><span style='font-family:monospace;'>%.asm</span> refers to the assembly source files in the current directory.</li>
<li class="itemize_item"><span style='font-family:monospace;'>$(BUILD_DIR)/%.o</span> refers to the output object files in the build directory in the path <span style='font-family:monospace;'>../build/</span>.</li>
</ul>
<div class="standard" id='magicparlabel-46094'>The entire recipe implements the transformation from <span style='font-family:monospace;'>&lt;source_file.asm&gt;</span> <math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow><mo> &rarr; </mo>
 </mrow></math> <span style='font-family:monospace;'>../build/&lt;object_file.o&gt;</span>. Note that all paths must be correct. If we try to build object files in a different directory e.g. current directory, it will not work since there is no such recipe exists to build objects at such a path.</div>

<div class="standard" id='magicparlabel-46095'>We also create a similar Makefile for <span style='font-family:monospace;'>os/</span> directory:
<br />

</div>
<div class='float-marginfigure'><div class="plain_layout" id='magicparlabel-46099'><span class='float-caption-Standard float-caption float-caption-standard'>MarginFigure 12:  Makefile in <span style='font-family:monospace;'>os/</span></span></div>

<div class="lyx_code" id='magicparlabel-46104'><div class="lyx_code_item">.</div>
<div class="lyx_code_item">├── bootloader</div>
<div class="lyx_code_item">│   └── bootloader.asm</div>
<div class="lyx_code_item">│   └── Makefile</div>
<div class="lyx_code_item">├── build</div>
<div class="lyx_code_item">│   ├── bootloader</div>
<div class="lyx_code_item">│   │   └── bootloader.o</div>
<div class="lyx_code_item">│   ├── disk.img</div>
<div class="lyx_code_item">│   └── os</div>
<div class="lyx_code_item">│       └── sample.o</div>
<div class="lyx_code_item">├── Makefile</div>
<div class="lyx_code_item">└── os</div>
<div class="lyx_code_item">    ├── Makefile</div>
<div class="lyx_code_item">    └── sample.asm</div>
</div>
</div>



<div class='float-listings'><pre class ='listings [gnu]make'>BUILD_DIR=../build/os

OS_SRCS := $(wildcard *.asm)
OS_OBJS := $(patsubst %.asm, $(BUILD_DIR)/%.o, $(OS_SRCS))

all: $(OS_OBJS)

$(BUILD_DIR)/%.o: %.asm
	nasm -f bin $&lt; -o $@</pre></div>


<div class="standard" id='magicparlabel-46131'>For now, it looks almost identical to the Makefile for bootloader. In the next chapter, we will update it for C code. Then, we update the top-level Makefile:
<br />

</div>
<div class='float-marginfigure'><div class="plain_layout" id='magicparlabel-46135'><span class='float-caption-Standard float-caption float-caption-standard'>MarginFigure 13:  Top-level Makefile</span></div>

<div class="lyx_code" id='magicparlabel-46140'><div class="lyx_code_item">.</div>
<div class="lyx_code_item">├── bootloader</div>
<div class="lyx_code_item">│   └── bootloader.asm</div>
<div class="lyx_code_item">│   └── Makefile</div>
<div class="lyx_code_item">├── build</div>
<div class="lyx_code_item">│   ├── bootloader</div>
<div class="lyx_code_item">│   │   └── bootloader.o</div>
<div class="lyx_code_item">│   ├── disk.img</div>
<div class="lyx_code_item">│   └── os</div>
<div class="lyx_code_item">│       └── sample.o</div>
<div class="lyx_code_item">├── Makefile</div>
<div class="lyx_code_item">└── os</div>
<div class="lyx_code_item">    ├── Makefile</div>
<div class="lyx_code_item">    └── sample.asm</div>
</div>
</div>



<div class='float-listings'><pre class ='listings [gnu]make'>BUILD_DIR=build
BOOTLOADER=$(BUILD_DIR)/bootloader/bootloader.o
OS=$(BUILD_DIR)/os/sample.o
DISK_IMG=disk.img

all: bootdisk

.PHONY: bootdisk bootloader os

bootloader:
	make -C bootloader

os:
	make -C os

bootdisk: bootloader os
	dd if=/dev/zero of=$(DISK_IMG) bs=512 count=2880
	dd conv=notrunc if=$(BOOTLOADER) of=$(DISK_IMG) bs=512 count=1 seek=0
	dd conv=notrunc if=$(OS) of=$(DISK_IMG) bs=512 count=1 seek=1</pre></div>


<div class="standard" id='magicparlabel-46177'>The build process is now truly modularized:</div>

<ul class="itemize" id='magicparlabel-46178'><li class="itemize_item"><span style='font-family:monospace;'>bootloader</span> and <span style='font-family:monospace;'>os </span>builds are now delegated to child Makefile of respective components. <span style='font-family:monospace;'>-C</span> option tells <span style='font-family:monospace;'>make</span> to execute with a Makefile in a supplied directory. In this case, the directories are <span style='font-family:monospace;'>bootloader/</span> and <span style='font-family:monospace;'>os/</span>.</li>
<li class="itemize_item">The target <span style='font-family:monospace;'>all</span> of the top-level Makefile is only responsible for <span style='font-family:monospace;'>bootdisk</span> target, which is the primary target of this Makefile. </li>
</ul>
<div class="standard" id='magicparlabel-46180'>In many cases, a target is not always a filename, but is just a name for a recipe to be always executed when requested. If a filename is of the same name as a target and the file is up-to-date, <span style='font-family:monospace;'>make</span> does not execute the target. To solve this problem, <span style='font-family:monospace;'>.PHONY</span> specifies that some targets are not files. All phony targets will then run when requested, regardless of files of the same names.</div>

<div class="standard" id='magicparlabel-46181'>To save time entering the command for starting up a QEMU virtual machine, we also add a target to the top-level Makefile:
<br />

</div>


<div class='float-listings'><pre class ='listings [gnu]make'>qemu:
	qemu-system-i386 -machine q35 -fda $(DISK_IMG) -gdb tcp::26000 -S</pre></div>


<div class="standard" id='magicparlabel-46188'>One last problem is project cleaning. At the moment, object files need removing manually and this is a repetitive process. Instead, let the Makefile of each component takes care of cleaning its object files, then top-level Makefile performs project cleaning by calling the component Makefile to do the jobs. Each Makefile is added with a <span style='font-family:monospace;'>clean</span> target at the end:</div>

<ul class="itemize" id='magicparlabel-46189'><li class="itemize_item">Bootloader Makefile:
<br />



<div class='float-listings'><pre class ='listings [gnu]make'>clean:
	rm $(BUILD_DIR)/*</pre></div>

</li><li class="itemize_item">OS Makefile:
<br />



<div class='float-listings'><pre class ='listings [gnu]make'>clean:
	rm $(BUILD_DIR)/*</pre></div>

</li><li class="itemize_item">Top-level Makefile:
<br />



<div class='float-listings'><pre class ='listings [gnu]make'>clean:
	make -C bootloader clean
	make -C os clean</pre></div>

</li></ul>
<div class="standard" id='magicparlabel-46211'>Simply invoking <span style='font-family:monospace;'>make clean</span> at the project root, all object files the are removed.</div>
<div class="subsection" id='magicparlabel-46212'>GNU Make Syntax summary</div>
<div class="standard" id='magicparlabel-46213'>GNU Make, at its core, is a domain-specific language for build automation. As any programming language, it needs a way to define data and code. In a Makefile, variables carry data. A variable value is either hard coded or evaluated from invoking a shell such as Bash. All variable values in Make has the same type: a string of text. Number 3 is not a number, but textual representation of the symbol 3. Here are common ways how to define data in a Makefile:</div>




<div class="standard" id='magicparlabel-46214'><div class='longtable' style='text-align: center;'><table><tbody><tr><td style ="width: 7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-46235'><b>Syntax</b></div>
</td>
<td style ="width: 8cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-46238'><b>Description</b></div>
</td>
</tr><tr><td style ="width: 7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-46241'><code class="flex_code">A = 1</code></div>

<div class="plain_layout" id='magicparlabel-46246'><code class="flex_code">B = 2</code></div>

<div class="plain_layout" id='magicparlabel-46251'><code class="flex_code">C = $$(expr $(A) + $(B))</code>
<br />

</div>

<div class="plain_layout" id='magicparlabel-46256'>⇒ <code class="flex_code">A</code> is <code class="flex_code">1</code>, <code class="flex_code">B</code> is <code class="flex_code">2</code>, <code class="flex_code">C</code> is <code class="flex_code">3</code>.</div>
</td>
<td style ="width: 8cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-46283'>Declare a variable and assign a textual value to it. the double dollar sign <code class="flex_code">$$</code> means the enclosing expression evaluating by a shell, defined by <code class="flex_code">/bin/sh</code>. In this case, the enclosing expression is <code class="flex_code">(expr $(A) + $(B))</code> and is evaluated by Bash.
<br />

</div>
</td>
</tr><tr><td style ="width: 7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-46298'><code class="flex_code">PATH = /bin</code></div>

<div class="plain_layout" id='magicparlabel-46303'><code class="flex_code">PATH := $PATH:/usr/bin</code>
<br />

</div>

<div class="plain_layout" id='magicparlabel-46308'>⇒ <code class="flex_code">PATH</code> is <code class="flex_code">/bin/:/usr/bin</code></div>
</td>
<td style ="width: 8cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-46319'>Declare a variable and assign to it. However, the difference is that the <code class="flex_code">=</code> syntax does not allow refer to a variable to use itself as a value in the right hand side, while this syntax does.
<br />

</div>
</td>
</tr><tr><td style ="width: 7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-46326'><code class="flex_code">PATH = /bin</code></div>

<div class="plain_layout" id='magicparlabel-46331'><code class="flex_code">PATH += /usr/bin</code>
<br />

</div>

<div class="plain_layout" id='magicparlabel-46336'>⇒ <code class="flex_code">PATH</code> is <code class="flex_code">/bin/:/usr/bin</code></div>
</td>
<td style ="width: 8cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-46347'>Append a new value at the end of a variable. Equivalent to: </div>

<div class="plain_layout" id='magicparlabel-46348'><code class="flex_code">PATH := $PATH:/usr/bin</code>
<br />

</div>
</td>
</tr><tr><td style ="width: 7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-46355'><code class="flex_code">CFLAGS ?= -o</code>
<br />

</div>

<div class="plain_layout" id='magicparlabel-46360'>⇒ <code class="flex_code">CFLAGS</code> is assigned the value <code class="flex_code">-o</code> if it was not defined.</div>
</td>
<td style ="width: 8cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-46371'>This syntax is called <b>conditional reference</b>. Set a variable to a value if it is undefined. This is useful if a user wants to supply different value for a variable from the command line e.g. add debugging option to <code class="flex_code">CFLAGS</code>. Otherwise, Make uses the default defined by <code class="flex_code">?=</code>.
<br />

</div>
</td>
</tr><tr><td style ="width: 7cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-46382'><code class="flex_code">SRCS = lib1.c lib2.c main.c</code></div>

<div class="plain_layout" id='magicparlabel-46387'><code class="flex_code">OBJS := $(SRC:.o=.c)</code>
<br />

</div>

<div class="plain_layout" id='magicparlabel-46392'>⇒ <code class="flex_code">OBJS</code> has the value <code class="flex_code">lib1.o lib2.o main.o</code></div>
</td>
<td style ="width: 8cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-46403'>This syntax is called <b>substitution reference</b>. A part of referenced variable is replaced with something else. In this case, all the <code class="flex_code">.c</code> extension is replaced by <code class="flex_code">.o</code> extension, thus creating a list of object files for <code class="flex_code">OBJS</code> variable from the list of source files from <code class="flex_code">SRCS</code> variable.
<br />

</div>
</td>
</tr></tbody>
</table>
</div>
</div>

<div class="standard" id='magicparlabel-46420'>Code in GNU Make is a collection of recipes that it can run. Each recipe is analogous to a function in a programming language, and can be called like a regular function. Each recipe carries a series of shell commands to be executed by a shell e.g. Bash. A recipe has the following format:</div>


<div class='float-listings'><pre class ='listings'>target: prerequisites
	command</pre></div>


<div class="standard" id='magicparlabel-46427'>Each <code class="flex_code">target</code> is analogous to a function name. Each <code class="flex_code">prerequisite</code> is a call another target. Each command is one of Make's built-in commands or a command that is executable by a shell. All prerequisites must be satisfied before entering main body of <code class="flex_code">target</code>; that is, each prerequisite must not return any error. If any error is returned, Make terminates the whole build process and prints an error on the command line.</div>

<div class="standard" id='magicparlabel-46440'>Each time <code class="flex_code">make</code> runs, by default if no target is supplied, it starts with <code class="flex_code">all</code> target, go through every prerequisites and finally the body of <code class="flex_code">all</code>. <code class="flex_code">all</code> is analogous to <code class="flex_code">main</code> in other programming languages. However, if <code class="flex_code">make</code> is given a target, it will start from that target instead of <code class="flex_code">main</code>. This feature is useful to automate multiple aspects in a project. For example, one target is for building the project, one target is for generating the documents e.g. test reports, another target for running the whole test suite and <code class="flex_code">all</code> runs every main targets.</div>


<div class="subsection" id='magicparlabel-46478'>Automate debugging steps with GDB script<a id="subsec_Automate_debugging_steps" />
</div>
<div class="standard" id='magicparlabel-46479'>For the convenience, we save GDB configuration to <span style='font-family:monospace;'>.gdbinit</span> file at the project root directory. This configuration is just a collection of GDB commands and a few extra commands. When <span style='font-family:monospace;'>gdb</span> runs, it first loads the <span style='font-family:monospace;'>.gdbinit</span> file at home directory, then the <span style='font-family:monospace;'>.gdbinit</span> file at the current directory. Why shouldn't we put commands in <span style='font-family:monospace;'>~/.gdbinit</span>? Because these commands are specific to only this project e.g. not all programs are required a remote connection.</div>

<div class="standard" id='magicparlabel-46480'>Our first configuration:
<br />

</div>


<div class='float-listings'><pre class ='listings bash'>define hook-stop
    # Translate the segment:offset into a physical address
    printf "[%4x:%4x] ", $cs, $eip
    x/i $cs*16+$eip
end</pre></div>


<div class="standard" id='magicparlabel-46490'>The above script displays the memory address in <span style='font-family:monospace;'>[segment:offset]</span> format, which is necessary for debugging our bootloader and operating system code.</div>

<div class="standard" id='magicparlabel-46491'>It is better to use Intel syntax:</div>

<div class="lyx_code" id='magicparlabel-46492'><div class="lyx_code_item">set disassembly-flavor intel</div>
</div>
<div class="standard" id='magicparlabel-46493'>The following commands set a more convenient layout for debugging assembly code:</div>

<div class="lyx_code" id='magicparlabel-46494'><div class="lyx_code_item">layout asm</div>
<div class="lyx_code_item">layout reg</div>
</div>
<div class="standard" id='magicparlabel-46496'>We are currently debugging bootloader code, so it is a good idea to first set it to 16-bit:</div>

<div class="lyx_code" id='magicparlabel-46497'><div class="lyx_code_item">set architecture i8086</div>
</div>
<div class="standard" id='magicparlabel-46498'>Every time the QEMU virtual machine starts, <span style='font-family:monospace;'>gdb</span> must always connect to port <span style='font-family:monospace;'>26000</span>. To avoid the trouble of manually connecting to the virtual machine, add the command:</div>

<div class="lyx_code" id='magicparlabel-46499'><div class="lyx_code_item">target remote localhost:26000</div>
</div>
<div class="standard" id='magicparlabel-46500'>Debugging the bootloader needs a breakpoint at 0x7c00, where our bootloader code starts:</div>

<div class="lyx_code" id='magicparlabel-46501'><div class="lyx_code_item">b *0x7c00</div>
</div>
<div class="standard" id='magicparlabel-46502'>Now, whenever <span style='font-family:monospace;'>gdb</span> starts, it automatically set correct architecture based on code, automatically connects to the virtual machine<div class="foot"><span class="foot_label">31</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-46506'>The QEMU virtual machine should have already been started before starting <span style='font-family:monospace;'>gdb</span>.</div>
</div></div>, displays output in a convenient layout and set a necessary breakpoint. All that need to do is run the program. </div>
<div class="chapter" id='magicparlabel-46507'>Linking and loading on bare metal<a id="chap_Linking_and_loading" />
</div>
<div class="standard" id='magicparlabel-46508'><em><div class="marginal"><div class="plain_layout" id='magicparlabel-46512'><em><b>Relocation</b></em></div>
</div>Relocation<a id='magicparlabel-46516' />
</em> is the process of replacing symbol references with its actual symbolic definitions in an object file. A symbol reference is the memory address of a symbol.</div>

<div class="standard" id='magicparlabel-46517'>If the definition is hard to understand, consider a similar analogy: house relocation. Suppose that a programmer bought a new house and the new house is empty. He must buy furnitures and appliances to fulfill daily needs and thus, he made a list of items to buy, and where to place them. To visualize the placements of new items, he draws a blueprint of the house and the respective places of all items. He then travels to the shops to buy goods. Whenever he visit a shop and sees matched items, he tells the shop owner to note them down. After done selecting, he tells the shop owner to pick up a brand new item instead of the objects on display, then give the address for delivering the goods to his new house. Finally, when the goods arrive, he places the items where he planned at the beginning.</div>



<div class="standard" id='magicparlabel-46523'>Now that house relocation is clear, object relocation is similar:</div>

<ul class="itemize" id='magicparlabel-46524'><li class="itemize_item">The list of items represents the relocation table, where the memory location for each symbol (item) is predetermined.</li>
<li class="itemize_item">Each item represents a pair of <em>symbol definition</em> and its <em>symbol address</em>.</li>
<li class="itemize_item">Each shop represents a compiled object file.</li>
<li class="itemize_item">Each item on display represents a symbol definition and references in the object file.</li>
<li class="itemize_item">The new address, where all the goods are delivered, represents the final executable binary or the final object file. Since the items on display are not for sale, the shop owner delivers brand new goods instead. Similarly, the object files are not merged together, but copied all over a new file, the object/executable file.</li>
<li class="itemize_item">Finally, the goods are placed in the positions according to the shopping list made from the beginning. Similarly, the symbol definitions are placed appropriately in its respective section and the symbol references of the final object/executable file are replaced with the actual memory addresses of the symbol definitions.</li>
</ul>



<div class="section" id='magicparlabel-46540'>Understand relocations with readelf<a id="sec_Understand_relocations_with_readelf" />
</div>
<div class="standard" id='magicparlabel-46541'>Earlier, when we explore object sections, there exists sections that begins with .<span style='font-family:monospace;'>rel</span>. These sections are relocation tables that maps between a symbol and its location in the final object file or the final executable binary<div class="foot"><span class="foot_label">32</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-46545'>A <span style='font-family:monospace;'>.rel</span> section is equivalent to a list of items in the house analogy.</div>
</div></div>. </div>

<div class="standard" id='magicparlabel-46546'>Suppose that a function <span style='font-family:monospace;'>foo</span> is defined in another object file, so <span style='font-family:monospace;'>main.c</span> declares it as <span style='font-family:monospace;'>extern</span>:</div>


<div class='float-listings'><pre class ='listings'>int i;
void foo();
int main(int argc, char *argv[])
{
    i = 5;
    foo();
    return 0;
}

void foo() {}</pre></div>


<div class="standard" id='magicparlabel-46561'>When we compile <span style='font-family:monospace;'>main.c</span> as object file with this command:</div>



<div class="standard" id='magicparlabel-46567'><span style='font-family:monospace;'>$ gcc -m32 -masm=intel -c main.c</span></div>



<div class="standard" id='magicparlabel-46573'>Then, we can inspect the relocation tables with this command:</div>



<div class="standard" id='magicparlabel-46579'><span style='font-family:monospace;'>$ readelf -r main.o</span></div>



<div class="standard" id='magicparlabel-46585'>The output:</div>



<div class="lyx_code" id='magicparlabel-46591'><div class="lyx_code_item">Relocation section '.rel.text' at offset 0x1cc contains 2 entries:</div>
<div class="lyx_code_item"> Offset     Info    Type            Sym.Value  Sym. Name</div>
<div class="lyx_code_item">00000013  00000801 R_386_32          00000004   i</div>
<div class="lyx_code_item">0000001c  00000a02 R_386_PC32        0000002e   foo</div>
<div class="lyx_code_item">Relocation section '.rel.eh_frame' at offset 0x1dc contains 2 entries:</div>
<div class="lyx_code_item"> Offset     Info    Type            Sym.Value  Sym. Name</div>
<div class="lyx_code_item">00000020  00000202 R_386_PC32        00000000   .text</div>
<div class="lyx_code_item">0000004c  00000202 R_386_PC32        00000000   .text</div>
</div>

<div class="subsection" id='magicparlabel-46604'>Offset </div>
<div class="standard" id='magicparlabel-46605'>An <em><div class="marginal"><div class="plain_layout" id='magicparlabel-46609'><em><b>offset</b></em></div>
</div>offset<a id='magicparlabel-46613' />
</em> is the location into a section of a binary file, where the actual memory address of a symbol definition is replaced. The section with .<span style='font-family:monospace;'>rel</span> prefix determines which section to offset into. For example, <span style='font-family:monospace;'>.rel.text</span> is the relocation <em>table</em> of symbols whose address needs correcting in <span style='font-family:monospace;'>.text</span> section, at a specific offset into <span style='font-family:monospace;'>.text</span> section. In the example output:</div>



<div class="lyx_code" id='magicparlabel-46619'><div class="lyx_code_item">0000001c  00000a02 R_386_PC32        0000002e   foo</div>
</div>


<div class="standard" id='magicparlabel-46625'>The blue number indicates there exists a reference of symbol <span style='font-family:monospace;'>foo</span> that is <span style='font-family:monospace;'>1c</span> bytes into <span style='font-family:monospace;'>.text</span> section. To see it clearer, we recompile main.c with option -g into the file <span style='font-family:monospace;'>main_debug.o</span>, then run <span style='font-family:monospace;'>objdump</span> on it and got:</div>



<div class="lyx_code" id='magicparlabel-46631'><div class="lyx_code_item">Disassembly of section .text:</div>
<div class="lyx_code_item">00000000 &lt;main&gt;:</div>
<div class="lyx_code_item">int i;</div>
<div class="lyx_code_item">void foo();</div>
<div class="lyx_code_item">int main(int argc, char *argv[])</div>
<div class="lyx_code_item">{</div>
<div class="lyx_code_item">   0:   8d 4c 24 04             lea    ecx,[esp+0x4]</div>
<div class="lyx_code_item">   4:   83 e4 f0                and    esp,0xfffffff0</div>
<div class="lyx_code_item">   7:   ff 71 fc                push   DWORD PTR [ecx-0x4]</div>
<div class="lyx_code_item">   a:   55                      push   ebp</div>
<div class="lyx_code_item">   b:   89 e5                   mov    ebp,esp</div>
<div class="lyx_code_item">   d:   51                      push   ecx</div>
<div class="lyx_code_item">   e:   83 ec 04                sub    esp,0x4</div>
<div class="lyx_code_item">    i = 5;</div>
<div class="lyx_code_item">  11:   c7 05 00 00 00 00 05    mov    DWORD PTR ds:0x0,0x5</div>
<div class="lyx_code_item">  18:   00 00 00 </div>
<div class="lyx_code_item">    foo();</div>
<div class="lyx_code_item">  1b:   e8 fc ff ff ff          call   1c &lt;main+0x1c&gt;</div>
<div class="lyx_code_item">    return 0;</div>
<div class="lyx_code_item">  20:   b8 00 00 00 00          mov    eax,0x0</div>
<div class="lyx_code_item">}</div>
<div class="lyx_code_item">  25:   83 c4 04                add    esp,0x4</div>
<div class="lyx_code_item">  28:   59                      pop    ecx</div>
<div class="lyx_code_item">  29:   5d                      pop    ebp</div>
<div class="lyx_code_item">  2a:   8d 61 fc                lea    esp,[ecx-0x4]</div>
<div class="lyx_code_item">  2d:   c3                      ret    </div>
<div class="lyx_code_item">....irrelevant content omitted....</div>
</div>


<div class="standard" id='magicparlabel-46663'>The byte at <span style='font-family:monospace;'>1b</span> is the opcode <span style='font-family:monospace;'>e8</span>, the <span style='font-family:monospace;'>call</span> instruction; byte at <span style='font-family:monospace;'>1c</span> is the value <span style='font-family:monospace;'>fc</span>. Why is the operand value for <span style='font-family:monospace;'>e8</span> is <span style='font-family:monospace;'>0xfffffffc</span>, which is equivalent to -4, but the translated instruction <span style='font-family:monospace;'>call 1c</span>? It will be explained after a few more sections, but you should pause and think a bit about the reason why.</div>
<div class="subsection" id='magicparlabel-46668'>Info </div>
<div class="standard" id='magicparlabel-46669'>Info specifies index of a symbol in the symbol table and the type of relocation to perform. </div>



<div class="lyx_code" id='magicparlabel-46675'><div class="lyx_code_item">0000001c  00000a02 R_386_PC32        0000002e   foo</div>
</div>


<div class="standard" id='magicparlabel-46681'>The pink number is the index of symbol <span style='font-family:monospace;'>foo</span> in the symbol table, and the green number is the relocation type. The numbers are written in hex format. In the example, <span style='font-family:monospace;'>0a</span> means <span style='font-family:monospace;'>10</span> in decimal, and symbol <span style='font-family:monospace;'>foo</span> is indeed at index <span style='font-family:monospace;'>10</span>:</div>



<div class="lyx_code" id='magicparlabel-46687'><div class="lyx_code_item">10: 0000002e     6 FUNC    GLOBAL DEFAULT    1 foo</div>
</div>

<div class="subsection" id='magicparlabel-46693'>Type </div>
<div class="standard" id='magicparlabel-46694'>Type represents the type value in textual form. Looking at the type of foo:</div>



<div class="lyx_code" id='magicparlabel-46700'><div class="lyx_code_item">0000001c  00000a02 R_386_PC32        0000002e   foo</div>
</div>


<div class="standard" id='magicparlabel-46706'>The green number is type in its numeric form, and <span style='font-family:monospace;'>R_386_PC32</span> is the name assigned to that value. Each value represents a relocation method of calculation. For example, with the type <span style='font-family:monospace;'>R_386_PC32</span>, the following formula is applied for relocation (Inteli386 psABI): </div>

<div class="standard" id='magicparlabel-46707'><math display="block" xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mrow><mi>R</mi><mi>e</mi><mi>l</mi><mi>o</mi><mi>c</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi><mspace width="6px" /><mi>O</mi><mi>f</mi><mi>f</mi><mi>s</mi><mi>e</mi><mi>t</mi><mo>=</mo><mi>S</mi><mo>+</mo><mi>A</mi><mo>-</mo><mi>P</mi>
  </mrow>
 </mrow></math></div>

<div class="standard" id='magicparlabel-46708'>To understand the formula, it is necessary to understand symbol values.</div>
<div class="subsection" id='magicparlabel-46709'>Sym.Value </div>
<div class="standard" id='magicparlabel-46710'>This field shows the <em>symbol value</em>. A symbol value is a value assigned to a symbol, whose meaning depends on the <span style='font-family:monospace;'>Ndx</span> field:</div>

<dl class='description' id='magicparlabel-46711'><dt class="description_label"><span class='noun'>A&nbsp;symbol&nbsp;whose&nbsp;section&nbsp;index&nbsp;is<span style='font-family:monospace;'>&nbsp;COMMON</span></span>,</dt>
<dd class="description_item"><span style='font-family:monospace;'> </span>its symbol value holds alignment constraints.
<br />



<div class="example" id='magicparlabel-46716'><div class="example_item"><span class="example_label">Example 0.70.</span>
In the symbol table, the variable i is identified as <span style='font-family:monospace;'>COM</span> (uninitialized variable):<div class="foot"><span class="foot_label">33</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-46720'>The command for listing symbol table is (assume the object file is <span style='font-family:monospace;'>hello.o</span>):</div>

<div class="lyx_code" id='magicparlabel-46721'><div class="lyx_code_item">readelf -s hello.o</div>
</div>
</div></div>
<br />

</div>


<div class="lyx_code" id='magicparlabel-46727'><div class="lyx_code_item">Symbol table '.symtab' contains 16 entries:</div>
<div class="lyx_code_item">   Num:    Value  Size Type    Bind   Vis      Ndx Name</div>
<div class="lyx_code_item">     0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND </div>
<div class="lyx_code_item">     1: 00000000     0 FILE    LOCAL  DEFAULT  ABS hello2.c</div>
<div class="lyx_code_item">     2: 00000000     0 SECTION LOCAL  DEFAULT    1 </div>
<div class="lyx_code_item">     3: 00000000     0 SECTION LOCAL  DEFAULT    3 </div>
<div class="lyx_code_item">     4: 00000000     0 SECTION LOCAL  DEFAULT    4 </div>
<div class="lyx_code_item">     5: 00000000     0 SECTION LOCAL  DEFAULT    5 </div>
<div class="lyx_code_item">     6: 00000000     0 SECTION LOCAL  DEFAULT    7 </div>
<div class="lyx_code_item">     7: 00000000     0 SECTION LOCAL  DEFAULT    8 </div>
<div class="lyx_code_item">     8: 00000000     0 SECTION LOCAL  DEFAULT   10 </div>
<div class="lyx_code_item">     9: 00000000     0 SECTION LOCAL  DEFAULT   12 </div>
<div class="lyx_code_item">    10: 00000000     0 SECTION LOCAL  DEFAULT   14 </div>
<div class="lyx_code_item">    11: 00000000     0 SECTION LOCAL  DEFAULT   15 </div>
<div class="lyx_code_item">    12: 00000000     0 SECTION LOCAL  DEFAULT   13 </div>
<div class="lyx_code_item">    13: 00000004     4 OBJECT  GLOBAL DEFAULT  COM i</div>
<div class="lyx_code_item">    14: 00000000    46 FUNC    GLOBAL DEFAULT    1 main</div>
<div class="lyx_code_item">    15: 0000002e     6 FUNC    GLOBAL DEFAULT    1 foo</div>
</div>


<div class="standard" id='magicparlabel-46750'>so its symbol value is a memory alignment for assigning a proper memory address that conforms to the alignment in the final memory address. In the case of <span style='font-family:monospace;'>i</span>, the value is <span style='font-family:monospace;'>4</span>, so the starting memory address of <span style='font-family:monospace;'>i</span> in the final binary file will be a multiple of 4.</div>
</div>
</dd><dt class="description_label"><span class='noun'>A&nbsp;symbol&nbsp;whose<span style='font-family:monospace;'>&nbsp;Ndx</span>&nbsp;identifies&nbsp;a&nbsp;specific&nbsp;section</span>,</dt>
<dd class="description_item"> its symbol value holds a section offset.
<br />



<div class="example" id='magicparlabel-46756'><div class="example_item"><span class="example_label">Example 0.71.</span>
In the symbol table, <span style='font-family:monospace;'>main</span> and <span style='font-family:monospace;'>foo</span> belong to section 1:
<br />

</div>


<div class="lyx_code" id='magicparlabel-46762'><div class="lyx_code_item">14: 00000000    46 FUNC    GLOBAL DEFAULT    1 main</div>
<div class="lyx_code_item">15: 0000002e     6 FUNC    GLOBAL DEFAULT    1 foo</div>
</div>


<div class="standard" id='magicparlabel-46769'>which is <span style='font-family:monospace;'>.text<div class="foot"><span class="foot_label">34</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-46773'><span style='font-family:monospace;'>.text</span> holds program code and read-only data.</div>
</div></div></span> section<div class="foot"><span class="foot_label">35</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-46777'>The command for listing sections is (assume the object file is <span style='font-family:monospace;'>hello.o</span>):</div>

<div class="lyx_code" id='magicparlabel-46778'><div class="lyx_code_item">readelf -S hello.o</div>
</div>
</div></div>:</div>



<div class="lyx_code" id='magicparlabel-46784'><div class="lyx_code_item">There are 20 section headers, starting at offset 0x558:</div>
<div class="lyx_code_item">Section Headers:</div>
<div class="lyx_code_item">  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al</div>
<div class="lyx_code_item">  [ 0]                   NULL            00000000 000000 000000 00      0   0  0</div>
<div class="lyx_code_item">  [ 1] .text             PROGBITS        00000000 000034 000034 00  AX  0   0  1</div>
<div class="lyx_code_item">  [ 2] .rel.text         REL             00000000 000414 000010 08   I 18   1  4</div>
<div class="lyx_code_item">  [ 3] .data             PROGBITS        00000000 000068 000000 00  WA  0   0  1</div>
<div class="lyx_code_item">  [ 4] .bss              NOBITS          00000000 000068 000000 00  WA  0   0  1</div>
<div class="lyx_code_item">  [ 5] .debug_info       PROGBITS        00000000 000068 000096 00      0   0  1</div>
<div class="lyx_code_item">..... remaining output omitted for clarity....</div>
</div>

</div>
</dd><dt class="description_label"><span class='noun'>In&nbsp;the&nbsp;final&nbsp;executable&nbsp;and&nbsp;shared&nbsp;object&nbsp;files</span>,</dt>
<dd class="description_item"> instead of the above values, a symbol value holds a memory address.
<br />



<div class="example" id='magicparlabel-46804'><div class="example_item"><span class="example_label">Example 0.72.</span>
After compiling hello.o into the final executable hello, the symbol table now contains the memory address for each symbol<div class="foot"><span class="foot_label">36</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-46808'>The command to compile the object file <span style='font-family:monospace;'>hello.o</span> into the executable <span style='font-family:monospace;'>hello</span>:</div>

<div class="lyx_code" id='magicparlabel-46809'><div class="lyx_code_item">gcc -g -m32 -masm=intel hello.o -o hello</div>
</div>
</div></div>:
<br />

</div>


<div class="lyx_code" id='magicparlabel-46815'><div class="lyx_code_item">Symbol table '.symtab' contains 75 entries:</div>
<div class="lyx_code_item">   Num:    Value  Size Type    Bind   Vis      Ndx Name</div>
<div class="lyx_code_item">     0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND </div>
<div class="lyx_code_item">     1: 08048154     0 SECTION LOCAL  DEFAULT    1 </div>
<div class="lyx_code_item">     2: 08048168     0 SECTION LOCAL  DEFAULT    2 </div>
<div class="lyx_code_item">     3: 08048188     0 SECTION LOCAL  DEFAULT    3 </div>
<div class="lyx_code_item">....output omitted...</div>
<div class="lyx_code_item">    64: 08048409     6 FUNC    GLOBAL DEFAULT   14 foo</div>
<div class="lyx_code_item">    65: 0804a020     0 NOTYPE  GLOBAL DEFAULT   26 _end</div>
<div class="lyx_code_item">    66: 080482e0     0 FUNC    GLOBAL DEFAULT   14 _start</div>
<div class="lyx_code_item">    67: 08048488     4 OBJECT  GLOBAL DEFAULT   16 _fp_hw</div>
<div class="lyx_code_item">    68: 0804a01c     4 OBJECT  GLOBAL DEFAULT   26 i</div>
<div class="lyx_code_item">    69: 0804a018     0 NOTYPE  GLOBAL DEFAULT   26 __bss_start</div>
<div class="lyx_code_item">    70: 080483db    46 FUNC    GLOBAL DEFAULT   14 main</div>
<div class="lyx_code_item">...ouput omitted...</div>
</div>


<div class="standard" id='magicparlabel-46835'>Unlike the values of the symbols <span style='font-family:monospace;'>foo</span>, <span style='font-family:monospace;'>i</span> and <span style='font-family:monospace;'>main</span> as in the hello.o object file, the complete memory addresses are in place.</div>
</div>
</dd></dl>
<div class="standard" id='magicparlabel-46836'>Now it suffices to understand relocation types. Previously, we mentioned the type <span style='font-family:monospace;'>R_386_PC32</span>. The following formula is applied for relocation (Inteli386 psABI): 
<br />

</div>

<div class="standard" style='text-align: center;' id='magicparlabel-46837'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mrow><mi>R</mi><mi>e</mi><mi>l</mi><mi>o</mi><mi>c</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi><mspace width="6px" /><mi>O</mi><mi>f</mi><mi>f</mi><mi>s</mi><mi>e</mi><mi>t</mi><mo>=</mo><mi>S</mi><mo>+</mo><mi>A</mi><mo>-</mo><mi>P</mi>
  </mrow>
 </mrow></math></div>

<div class="standard" id='magicparlabel-46838'>where</div>

<dl class='description' id='magicparlabel-46839'><dt class="description_label"><strong class="flex_strong">S</strong></dt>
<dd class="description_item"> represents the value of the symbol. In the final executable binary, it is the address of the symbol.</dd>
<dt class="description_label"><strong class="flex_strong">A</strong></dt>
<dd class="description_item"> represents the addend, an extra value added to the value of a symbol.</dd>
<dt class="description_label"><strong class="flex_strong">P</strong></dt>
<dd class="description_item"> Represents the memory address to be fixed.</dd>
<dt class="description_label"><strong class="flex_strong">Relocate&nbsp;Offset</strong></dt>
<dd class="description_item"> is the distance between a relocating location<div class="foot"><span class="foot_label">37</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-46862'>where the referenced memory address is to be fixed.</div>
</div></div> and the actual memory location of a symbol definition, or a memory address.</dd>
</dl>
<div class="standard" id='magicparlabel-46863'>But why do we waste time in calculating a distance instead of replacing with a direct memory address? The reason is that x86 architecture does not use employ any addressing mode that uses an absolute memory address, as listed in table <a href="#mod_rm_32">3.</a>. All addressing modes in x86 are relative. In some assembly language, an absolute address can be used simply because it is a syntactic sugar that is later transformed into one of the relative addressing mode provided by the x86 hardware by the assembler.
<br />

</div>

<div class="standard" style='text-align: left;' id='magicparlabel-46864'><hr />

</div>

<div class="example" id='magicparlabel-46865'><div class="example_item"><span class="example_label">Example 0.73.</span>
For the <span style='font-family:monospace;'>foo</span> symbol:
<br />

</div>


<div class="lyx_code" id='magicparlabel-46871'><div class="lyx_code_item">0000001c  00000a02 R_386_PC32        0000002e   foo</div>
</div>


<div class="standard" id='magicparlabel-46877'>The distance between the usage of <span style='font-family:monospace;'>foo</span> in <span style='font-family:monospace;'>main.o</span> and its definition, applying the formula <math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mrow><mi>S</mi><mo>+</mo><mi>A</mi><mo>-</mo><mi>P</mi>
  </mrow>
 </mrow></math> is: <math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mstyle mathvariant='monospace'>
   <mrow><mn>2</mn><mi>e</mi><mo>+</mo><mn>0</mn><mo>-</mo><mn>1</mn><mi>c</mi><mo>=</mo><mn>12</mn>
   </mrow>
  </mstyle>
 </mrow></math>. That is, the place where memory fixing starts is <span style='font-family:monospace;'>0x12</span> or 18 bytes away from <em>the definition</em> of the symbol <span style='font-family:monospace;'>foo</span>. However, to make an instruction works properly, we must also subtract 4 from <span style='font-family:monospace;'>0x12</span> and results in <span style='font-family:monospace;'>0xe</span>. Why the extra <span style='font-family:monospace;'>-4</span>? Because the relative address starts at <em>the end</em> of an instruction, <em>not the address where memory fixing starts</em>. For that reason, we must also exclude the 4 bytes of the overwritten address. </div>

<div class="standard" id='magicparlabel-46878'>Indeed, looking at the <span style='font-family:monospace;'>objdump</span> output of the object file <span style='font-family:monospace;'>hello.o</span>:</div>



<div class="lyx_code" id='magicparlabel-46884'><div class="lyx_code_item">Disassembly of section .text:</div>
<div class="lyx_code_item">00000000 &lt;main&gt;:</div>
<div class="lyx_code_item">   0:   8d 4c 24 04             lea    ecx,[esp+0x4]</div>
<div class="lyx_code_item">   4:   83 e4 f0                and    esp,0xfffffff0</div>
<div class="lyx_code_item">   7:   ff 71 fc                push   DWORD PTR [ecx-0x4]</div>
<div class="lyx_code_item">   a:   55                      push   ebp</div>
<div class="lyx_code_item">   b:   89 e5                   mov    ebp,esp</div>
<div class="lyx_code_item">   d:   51                      push   ecx</div>
<div class="lyx_code_item">   e:   83 ec 04                sub    esp,0x4</div>
<div class="lyx_code_item">  11:   c7 05 00 00 00 00 05    mov    DWORD PTR ds:0x0,0x5</div>
<div class="lyx_code_item">  18:   00 00 00 </div>
<div class="lyx_code_item">  1b:   e8 fc ff ff ff          call   1c &lt;main+0x1c&gt;</div>
<div class="lyx_code_item">  20:   b8 00 00 00 00          mov    eax,0x0</div>
<div class="lyx_code_item">  25:   83 c4 04                add    esp,0x4</div>
<div class="lyx_code_item">  28:   59                      pop    ecx</div>
<div class="lyx_code_item">  29:   5d                      pop    ebp</div>
<div class="lyx_code_item">  2a:   8d 61 fc                lea    esp,[ecx-0x4]</div>
<div class="lyx_code_item">  2d:   c3                      ret    </div>
<div class="lyx_code_item">0000002e &lt;foo&gt;:</div>
<div class="lyx_code_item">  2e:   55                      push   ebp</div>
<div class="lyx_code_item">  2f:   89 e5                   mov    ebp,esp</div>
<div class="lyx_code_item">  31:   90                      nop</div>
<div class="lyx_code_item">  32:   5d                      pop    ebp</div>
<div class="lyx_code_item">  33:   c3                      ret    </div>
</div>


<div class="standard" id='magicparlabel-46913'>The place where memory fixing starts is after the opcode <span style='font-family:monospace;'>e8</span>, with the mock value <span style='font-family:monospace;'>fc ff ff ff</span>, which is <span style='font-family:monospace;'>-4</span> in decimal. However, the assembly code, the value is displayed as <span style='font-family:monospace;'>1c</span>. The memory address right after <span style='font-family:monospace;'>e8</span>. The reason is that the instruction <span style='font-family:monospace;'>e8</span> starts at <span style='font-family:monospace;'>1b</span> and ends at <span style='font-family:monospace;'>20</span><div class="foot"><span class="foot_label">38</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-46917'>The end of an instruction is the memory address right after its last operand. The whole instruction e8 spans from the address <span style='font-family:monospace;'>1b</span> to the address <span style='font-family:monospace;'>1f</span>. </div>
</div></div>. <span style='font-family:monospace;'>-4</span> means 4 bytes backward from the end of instruction, that is: <math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mstyle mathvariant='monospace'>
   <mrow><mn>20</mn><mo>-</mo><mn>4</mn><mo>=</mo><mn>1</mn><mi>c</mi>
   </mrow>
  </mstyle>
 </mrow></math>. After linking, the output of the final executable file is displayed with the actual memory fixing:</div>



<div class="lyx_code" id='magicparlabel-46923'><div class="lyx_code_item">080483db &lt;main&gt;:</div>
<div class="lyx_code_item"> 80483db:       8d 4c 24 04             lea    ecx,[esp+0x4]</div>
<div class="lyx_code_item"> 80483df:       83 e4 f0                and    esp,0xfffffff0</div>
<div class="lyx_code_item"> 80483e2:       ff 71 fc                push   DWORD PTR [ecx-0x4]</div>
<div class="lyx_code_item"> 80483e5:       55                      push   ebp</div>
<div class="lyx_code_item"> 80483e6:       89 e5                   mov    ebp,esp</div>
<div class="lyx_code_item"> 80483e8:       51                      push   ecx</div>
<div class="lyx_code_item"> 80483e9:       83 ec 04                sub    esp,0x4</div>
<div class="lyx_code_item"> 80483ec:       c7 05 1c a0 04 08 05    mov    DWORD PTR ds:0x804a01c,0x5</div>
<div class="lyx_code_item"> 80483f3:       00 00 00 </div>
<div class="lyx_code_item"> 80483f6:       e8 0e 00 00 00          call   8048409 &lt;foo&gt;</div>
<div class="lyx_code_item"> 80483fb:       b8 00 00 00 00          mov    eax,0x0</div>
<div class="lyx_code_item"> 8048400:       83 c4 04                add    esp,0x4</div>
<div class="lyx_code_item"> 8048403:       59                      pop    ecx</div>
<div class="lyx_code_item"> 8048404:       5d                      pop    ebp</div>
<div class="lyx_code_item"> 8048405:       8d 61 fc                lea    esp,[ecx-0x4]</div>
<div class="lyx_code_item"> 8048408:       c3                      ret </div>
<div class="lyx_code_item"></div>
<div class="lyx_code_item">08048409 &lt;foo&gt;:</div>
<div class="lyx_code_item"> 8048409:       55                      push   ebp</div>
<div class="lyx_code_item"> 804840a:       89 e5                   mov    ebp,esp</div>
<div class="lyx_code_item"> 804840c:       90                      nop</div>
<div class="lyx_code_item"> 804840d:       5d                      pop    ebp</div>
<div class="lyx_code_item"> 804840e:       c3                      ret    </div>
<div class="lyx_code_item"> 804840f:       90                      nop</div>
</div>


<div class="standard" id='magicparlabel-46953'>In the final output, the opcode <span style='font-family:monospace;'>e8</span> previously at <span style='font-family:monospace;'>1b</span> now starts at the address <span style='font-family:monospace;'>80483f6</span>. The mock value <span style='font-family:monospace;'>fc ff ff ff</span> is replaced with the actual value <span style='font-family:monospace;'>0e 00 00 00</span> using the same calculating method from its object file: opcode e8 is at <span style='font-family:monospace;'>80483f6</span>. The definition of <span style='font-family:monospace;'>foo</span> is at <span style='font-family:monospace;'>8048409</span>. The offset from the next address after e8 is <span style='font-family:monospace;'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mstyle mathvariant='monospace'>
   <mrow><mn>8048409</mn><mo>+</mo><mn>0</mn><mo>-</mo><mn>80483</mn><mi>f</mi><mn>7</mn><mo>-</mo><mn>4</mn><mo>=</mo><mn>0</mn><mi>e</mi>
   </mrow>
  </mstyle>
 </mrow></math></span>. However, for readability, the assembly is displayed as <span style='font-family:monospace;'>call 8048409 &lt;foo&gt;</span>, since <span style='font-family:monospace;'>GNU as<div class="foot"><span class="foot_label">39</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-46957'>Or any current assembler in use today.</div>
</div></div> </span>assembler allows specifying the actual memory address of a symbol definition. Such address is later translated into relative addressing mode, saving the programmer the trouble of calculating offset manually.
<br />

</div>
</div>
<div class="standard" style='text-align: left;' id='magicparlabel-46958'><hr />

</div>
<div class="subsection" id='magicparlabel-46959'>Sym.&nbsp;Name</div>
<div class="standard" id='magicparlabel-46960'>This field displays the name of a symbol to be relocated. The named symbol is the same as written in a high level language such as C.</div>
<div class="section" id='magicparlabel-46961'>Crafting ELF binary with linker scripts</div>
<div class="standard" id='magicparlabel-46962'>A <em><div class="marginal"><div class="plain_layout" id='magicparlabel-46966'><em><b>linker</b></em></div>
</div>linker<a id='magicparlabel-46970' />
</em> is a program that combines separated object files into a final binary file. When <span style='font-family:monospace;'>gcc</span> is invoked, it runs <span style='font-family:monospace;'>ld</span> underneath to turn object files into the final executable file..</div>

<div class="standard" id='magicparlabel-46971'>A <em><a id='magicparlabel-46975' />
<div class="marginal"><div class="plain_layout" id='magicparlabel-46979'><em><b>linker script</b></em></div>
</div>linker script</em> is a text file that instructs how a linker should combine object files. When <span style='font-family:monospace;'>gcc</span> runs, it uses its default linker script to build the memory layout of a compiled binary file. Standardized memory layout is called <em>object file format</em> e.g. ELF includes program headers, section headers and their attributes. The default linker script is made for running in the current operating system environment<div class="foot"><span class="foot_label">40</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-46983'>To view the default script, use <span style='font-family:monospace;'>--verbose</span> option:</div>

<div class="lyx_code" id='magicparlabel-46984'><div class="lyx_code_item">ld --verbose</div>
</div>
</div></div>. Running on bare metal, the default script cannot be used as it is not designed for such environment. For that reason, a programmer needs to supply his own linker script for such environments.</div>

<div class="standard" id='magicparlabel-46985'>Every linker script consists of a series of commands with the following format:</div>

<div class="lyx_code" id='magicparlabel-46986'><div class="lyx_code_item">COMMAND </div>
<div class="lyx_code_item">{
<br />

</div>

<div class="lyx_code" id='magicparlabel-46988'><div class="lyx_code_item">sub-command 1</div>
<div class="lyx_code_item">sub-command 2</div>
<div class="lyx_code_item">.... more sub-command....</div>
</div>
<div class="lyx_code_item">}</div>
</div>
<div class="standard" id='magicparlabel-46992'>Each sub-command is specific to only the top-level command. The simplest linker script needs only one command: <span style='font-family:monospace;'>SECTION</span>, that consumes input sections from object files and produces output sections of the final binary file<div class="foot"><span class="foot_label">41</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-46996'>Recall that sections are chunks of code or data, or both.</div>
</div></div>. </div>
<div class="subsection" id='magicparlabel-46997'>Example linker script</div>
<div class="standard" id='magicparlabel-46998'>Here is a minimal example of a linker script:</div>


<div class='float-listings'><pre class ='listings bash'>SECTIONS                      /* Command */
{
   . = 0x10000;               /* sub-command 1 */
   .text : { *(.text) }       /* sub-command 2 */
   . = 0x8000000;             /* sub-command 3 */
   .data : { *(.data) }       /* sub-command 4 */
   .bss : { *(.bss) }         /* sub-command 5 */
} </pre></div>


<div class="standard" id='magicparlabel-47011'><b>Code Dissection: </b></div>





<div class="standard" id='magicparlabel-47017'><table><tbody><tr><td style ="width: 5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47040'><b>Code</b></div>
</td>
<td style ="width: 10cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47043'><b>Description</b></div>
</td>
</tr><tr><td style ="width: 5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47046'><span style='font-family:monospace;'>SECTION</span></div>
</td>
<td style ="width: 10cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47049'>Top-level command that declares a list of custom program sections. <span style='font-family:monospace;'>ld</span> provides a set of such commands.</div>
</td>
</tr><tr><td style ="width: 5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47052'><span style='font-family:monospace;'>. = 0x10000; </span></div>
</td>
<td style ="width: 10cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47055'>Set location counter to the address <span style='font-family:monospace;'>0x10000</span>. Location counter specifies the base address for subsequent commands. In this example, subsequent commands will use <span style='font-family:monospace;'>0x10000</span> onward.</div>
</td>
</tr><tr><td style ="width: 5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47058'><span style='font-family:monospace;'>.text : { *(.text) } </span></div>
</td>
<td style ="width: 10cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47061'>Since location counter is set to <span style='font-family:monospace;'>0x10000</span>, the output <span style='font-family:monospace;'>.text</span> in the final binary file will starts at the address <span style='font-family:monospace;'>0x10000</span>. This command combines all <span style='font-family:monospace;'>.text</span> sections from all object files with <span style='font-family:monospace;'>*(.text)</span> syntax into a final <span style='font-family:monospace;'>.text</span> section. The <span style='font-family:monospace;'>*</span> is the wildcard which matches any file name.</div>
</td>
</tr><tr><td style ="width: 5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47064'><span style='font-family:monospace;'>. = 0x8000000; </span></div>
</td>
<td style ="width: 10cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47067'>Again, the location counter is set to <span style='font-family:monospace;'>0x8000000</span>. Subsequent commands will use this address for working with sections.</div>
</td>
</tr><tr><td style ="width: 5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47070'><span style='font-family:monospace;'>.data : { *(.data) }</span></div>
</td>
<td style ="width: 10cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47073'>All <span style='font-family:monospace;'>.data</span> section are combined into one <span style='font-family:monospace;'>.data</span> section in the final binary file.</div>
</td>
</tr><tr><td style ="width: 5cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47076'><span style='font-family:monospace;'>.bss : { *(.bss) }</span></div>
</td>
<td style ="width: 10cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47079'>All <span style='font-family:monospace;'>.bss</span> section are combined into one <span style='font-family:monospace;'>.bss</span> section in the final binary file.</div>
</td>
</tr></tbody>
</table>
</div>



<div class="standard" id='magicparlabel-47085'>The addresses <span style='font-family:monospace;'>0x10000</span> and <span style='font-family:monospace;'>0x8000000</span> are called <em>Virtual Memory Address</em>. A <em><a id='magicparlabel-47089' />
<div class="marginal"><div class="plain_layout" id='magicparlabel-47093'><em>virtual memory address</em></div>
</div>virtual memory address</em> is the address where a section is loaded in memory when a program runs. To use the linker script, we save it as a file e.g. <span style='font-family:monospace;'>main.lds</span><div class="foot"><span class="foot_label">42</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-47097'><span style='font-family:monospace;'>.lds</span> is the extension for linker script.</div>
</div></div>; then, we need a sample program in a file, e.g. <span style='font-family:monospace;'>main.c</span>: </div>


<div class='float-listings'><pre class ='listings C'>void test() {}
int main(int argc, char *argv[])
{
  
    return 0;
}</pre></div>


<div class="standard" id='magicparlabel-47108'>Then, we compile the file and explicitly invoke <span style='font-family:monospace;'>ld</span> with the linker script:</div>



<div class="standard" id='magicparlabel-47114'><span style='font-family:monospace;'>$ gcc -m32 -g -c main.c</span></div>

<div class="standard" id='magicparlabel-47115'><span style='font-family:monospace;'>$ ld -m elf_i386 -o main -T main.lds main.o</span></div>



<div class="standard" id='magicparlabel-47121'>In the <span style='font-family:monospace;'>ld</span> command, the options are similar to <span style='font-family:monospace;'>gcc</span>:</div>



<div class="standard" id='magicparlabel-47122'><table><tbody><tr><td style ="width: 2cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47139'><b>Option</b></div>
</td>
<td style ="width: 14cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47142'><b>Description</b></div>
</td>
</tr><tr><td style ="width: 2cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47145'><span style='font-family:monospace;'>-m</span></div>
</td>
<td style ="width: 14cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47148'>Specify object file format that <span style='font-family:monospace;'>ld</span> produces. In the example, elf_i386 means a 32-bit ELF is to be produced.</div>
</td>
</tr><tr><td style ="width: 2cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47151'><span style='font-family:monospace;'>-o</span></div>
</td>
<td style ="width: 14cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47154'>Specify the name of the final executable binary.</div>
</td>
</tr><tr><td style ="width: 2cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47157'><span style='font-family:monospace;'>-T</span></div>
</td>
<td style ="width: 14cm;" align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47160'>Specify the linker script to use. In the example, it is <span style='font-family:monospace;'>main.lds</span>.</div>
</td>
</tr></tbody>
</table>
</div>

<div class="standard" id='magicparlabel-47161'>The remaining input is a list of object files for linking. After the command <span style='font-family:monospace;'>ld</span> is executed, the final executable binary - <span style='font-family:monospace;'>main</span> - is produced. If we try running it:</div>



<div class="standard" id='magicparlabel-47167'><span style='font-family:monospace;'>$ ./main</span></div>

<div class="standard" id='magicparlabel-47168'><span style='font-family:monospace;'>Segmentation fault </span></div>



<div class="standard" id='magicparlabel-47174'>The reason is that when linking manually, the entry address must be explicitly set, or else <span style='font-family:monospace;'>ld</span> sets it to the start of <span style='font-family:monospace;'>.text</span> section by default. We can verify from the <span style='font-family:monospace;'>readelf </span>output:</div>



<div class="standard" id='magicparlabel-47180'><span style='font-family:monospace;'>$ readelf -h main</span></div>





<div class="lyx_code" id='magicparlabel-47191'><div class="lyx_code_item">ELF Header:</div>
<div class="lyx_code_item">  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 </div>
<div class="lyx_code_item">  Class:                             ELF64</div>
<div class="lyx_code_item">  Data:                              2's complement, little endian</div>
<div class="lyx_code_item">  Version:                           1 (current)</div>
<div class="lyx_code_item">  OS/ABI:                            UNIX - System V</div>
<div class="lyx_code_item">  ABI Version:                       0</div>
<div class="lyx_code_item">  Type:                              EXEC (Executable file)</div>
<div class="lyx_code_item">  Machine:                           Advanced Micro Devices X86-64</div>
<div class="lyx_code_item">  Version:                           0x1</div>
<div class="lyx_code_item">  Entry point address:               0x10000</div>
<div class="lyx_code_item">  Start of program headers:          64 (bytes into file)</div>
<div class="lyx_code_item">  Start of section headers:          2098144 (bytes into file)</div>
<div class="lyx_code_item">  Flags:                             0x0</div>
<div class="lyx_code_item">  Size of this header:               64 (bytes)</div>
<div class="lyx_code_item">  Size of program headers:           56 (bytes)</div>
<div class="lyx_code_item">  Number of program headers:         3</div>
<div class="lyx_code_item">  Size of section headers:           64 (bytes)</div>
<div class="lyx_code_item">  Number of section headers:         14</div>
<div class="lyx_code_item">  Section header string table index: 11</div>
</div>


<div class="standard" id='magicparlabel-47216'>The entry point address is set to <span style='font-family:monospace;'>0x10000</span>, which is the beginning of <span style='font-family:monospace;'>.text</span> section. Using objdump to examine the address:</div>



<div class="standard" id='magicparlabel-47222'><span style='font-family:monospace;'>$ objdump -z -M intel -S -D prog | less</span></div>



<div class="standard" id='magicparlabel-47228'>we see that the address <span style='font-family:monospace;'>0x10000</span> does not start at <span style='font-family:monospace;'>main</span> function when the program runs:</div>



<div class="lyx_code" id='magicparlabel-47234'><div class="lyx_code_item">Disassembly of section .text:</div>
<div class="lyx_code_item">00010000 &lt;test&gt;:</div>
<div class="lyx_code_item">int a = 5;</div>
<div class="lyx_code_item">int i;</div>
<div class="lyx_code_item">void test(){}</div>
<div class="lyx_code_item">   10000:       55                      push   ebp</div>
<div class="lyx_code_item">   10001:       89 e5                   mov    ebp,esp</div>
<div class="lyx_code_item">   10003:       90                      nop</div>
<div class="lyx_code_item">   10004:       5d                      pop    ebp</div>
<div class="lyx_code_item">   10005:       c3                      ret    </div>
<div class="lyx_code_item">00010006 &lt;main&gt;:</div>
<div class="lyx_code_item">int main(int argc, char *argv[])</div>
<div class="lyx_code_item">{</div>
<div class="lyx_code_item">   10006:       55                      push   ebp</div>
<div class="lyx_code_item">   10007:       89 e5                   mov    ebp,esp</div>
<div class="lyx_code_item">    </div>
<div class="lyx_code_item">    return 0;</div>
<div class="lyx_code_item">   10009:       b8 00 00 00 00          mov    eax,0x0</div>
<div class="lyx_code_item">}</div>
<div class="lyx_code_item">   1000e:       5d                      pop    ebp</div>
<div class="lyx_code_item">   1000f:       c3                      ret    </div>
</div>


<div class="standard" id='magicparlabel-47260'>The start of .<span style='font-family:monospace;'>text</span> section at <span style='font-family:monospace;'>0x10000</span> is the function <span style='font-family:monospace;'>test</span>, not <span style='font-family:monospace;'>main</span>! To enable the program to run at <span style='font-family:monospace;'>main</span> properly, we need to set the entry point in the linker script with the following line at the beginning of the file:</div>

<div class="lyx_code" id='magicparlabel-47261'><div class="lyx_code_item">ENTRY(main)</div>
</div>
<div class="standard" id='magicparlabel-47262'>Recompile the executable binary file <span style='font-family:monospace;'>main</span> again. This time, the output from <span style='font-family:monospace;'>readelf</span> is different:</div>



<div class="lyx_code" id='magicparlabel-47268'><div class="lyx_code_item">ELF Header:</div>
<div class="lyx_code_item">  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 </div>
<div class="lyx_code_item">  Class:                             ELF32</div>
<div class="lyx_code_item">  Data:                              2's complement, little endian</div>
<div class="lyx_code_item">  Version:                           1 (current)</div>
<div class="lyx_code_item">  OS/ABI:                            UNIX - System V</div>
<div class="lyx_code_item">  ABI Version:                       0</div>
<div class="lyx_code_item">  Type:                              EXEC (Executable file)</div>
<div class="lyx_code_item">  Machine:                           Intel 80386</div>
<div class="lyx_code_item">  Version:                           0x1</div>
<div class="lyx_code_item">  Entry point address:               0x10006</div>
<div class="lyx_code_item">  Start of program headers:          52 (bytes into file)</div>
<div class="lyx_code_item">  Start of section headers:          9168 (bytes into file)</div>
<div class="lyx_code_item">  Flags:                             0x0</div>
<div class="lyx_code_item">  Size of this header:               52 (bytes)</div>
<div class="lyx_code_item">  Size of program headers:           32 (bytes)</div>
<div class="lyx_code_item">  Number of program headers:         3</div>
<div class="lyx_code_item">  Size of section headers:           40 (bytes)</div>
<div class="lyx_code_item">  Number of section headers:         14</div>
<div class="lyx_code_item">  Section header string table index: 11</div>
</div>


<div class="standard" id='magicparlabel-47293'>The program now executes code at the address <span style='font-family:monospace;'>0x10006</span> when it starts. <span style='font-family:monospace;'>0x10006</span> is where <span style='font-family:monospace;'>main</span> starts! To make sure we really starts at <span style='font-family:monospace;'>main</span>, we run the program with <span style='font-family:monospace;'>gdb</span>, set two breakpoints at <span style='font-family:monospace;'>main</span> and <span style='font-family:monospace;'>test</span> functions:</div>



<div class="standard" id='magicparlabel-47299'><span style='font-family:monospace;'>$ gdb ./main</span></div>





<div class="lyx_code" id='magicparlabel-47310'><div class="lyx_code_item">.... output omitted ....</div>
<div class="lyx_code_item">Reading symbols from ./main...done.</div>
</div>




<div class="standard" id='magicparlabel-47322'><span style='font-family:monospace;'>(gdb) b test</span></div>





<div class="lyx_code" id='magicparlabel-47333'><div class="lyx_code_item">Breakpoint 1 at 0x10003: file main.c, line 1.</div>
</div>




<div class="standard" id='magicparlabel-47344'><span style='font-family:monospace;'>(gdb) b main</span></div>





<div class="lyx_code" id='magicparlabel-47355'><div class="lyx_code_item">Breakpoint 2 at 0x10009: file main.c, line 5.</div>
</div>




<div class="standard" id='magicparlabel-47366'><span style='font-family:monospace;'>(gdb) r</span></div>





<div class="lyx_code" id='magicparlabel-47377'><div class="lyx_code_item">Starting program: /tmp/main </div>
<div class="lyx_code_item">Breakpoint 2, main (argc=-11493, argv=0x0) at main.c:5</div>
<div class="lyx_code_item">5	    return 0;</div>
</div>


<div class="standard" id='magicparlabel-47385'>As displayed in the output, <span style='font-family:monospace;'>gdb</span> stopped at the 2<sup class="script_superscript">nd</sup> breakpoint first. Now, we run the program normally, without <span style='font-family:monospace;'>gdb</span>: </div>



<div class="standard" id='magicparlabel-47395'><span style='font-family:monospace;'>$ ./main</span></div>

<div class="standard" id='magicparlabel-47396'><span style='font-family:monospace;'>Segmentation fault </span></div>



<div class="standard" id='magicparlabel-47402'>We still get a segmentation fault. It is to be expected, as we ran a custom binary without C runtime support from the operating system. The last statement in the <span style='font-family:monospace;'>main</span> function: <span style='font-family:monospace;'>return 0</span>, simply returns to a random place<div class="foot"><span class="foot_label">43</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-47406'>Return address is above the current <span style='font-family:monospace;'>ebp</span>. However, when we enter <span style='font-family:monospace;'>main</span>, no return value is pushed on the stack. So, when return is executed, it simply retrieves any value above <span style='font-family:monospace;'>ebp</span> and use as a return address.</div>
</div></div>. The C runtime ensures that the program exit properly. In Linux, the <span style='font-family:monospace;'>_exit()</span> function is implicitly called when <span style='font-family:monospace;'>main</span> returns. To fix this problem, we simply change the program to exit properly:</div>


<div class='float-listings'><pre class ='listings C'>void test() {}
int main(int argc, char *argv[])
{
    asm("mov eax, 0x1\n"
        "mov ebx, 0x0\n"
        "int 0x80");
}</pre></div>


<div class="standard" id='magicparlabel-47418'>Inline assembly is required because interrupt <span style='font-family:monospace;'>0x80</span> is defined for system calls in Linux. Since the program uses no library, there is no other way to call system functions, aside from using assembly. However, when writing our operating system, we will not need such code, as there is no environment for exiting properly yet.</div>

<div class="standard" id='magicparlabel-47419'>Now that we can precisely control where the program runs initially, it is easy to bootstrap the kernel from the bootloader. Before we move on to the next section, note how <span style='font-family:monospace;'>readelf</span> and <span style='font-family:monospace;'>objdump</span> can be applied to debug a program even before it runs.</div>
<div class="subsection" id='magicparlabel-47420'>Understand the custom ELF structure</div>
<div class="standard" id='magicparlabel-47421'>In the example, we manage to create a runnable ELF executable binary from a custom linker script, as opposed to the default one provided by <span style='font-family:monospace;'>gcc</span>. To make it convenient to look into its structure:</div>



<div class="standard" id='magicparlabel-47427'><span style='font-family:monospace;'>$ readelf -e main</span></div>



<div class="standard" id='magicparlabel-47433'><span style='font-family:monospace;'>-e</span> option is the combination of 3 options <span style='font-family:monospace;'>-h -l -S</span>: </div>



<div class="lyx_code" id='magicparlabel-47439'><div class="lyx_code_item">....... ELF header output omitted .......</div>
<div class="lyx_code_item">Section Headers:</div>
<div class="lyx_code_item">  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al</div>
<div class="lyx_code_item">  [ 0]                   NULL            00000000 000000 000000 00      0   0  0</div>
<div class="lyx_code_item">  [ 1] .text             PROGBITS        00010000 001000 000010 00  AX  0   0  1</div>
<div class="lyx_code_item">  [ 2] .eh_frame         PROGBITS        00010010 001010 000058 00   A  0   0  4</div>
<div class="lyx_code_item">  [ 3] .debug_info       PROGBITS        00000000 001068 000087 00      0   0  1</div>
<div class="lyx_code_item">  [ 4] .debug_abbrev     PROGBITS        00000000 0010ef 000074 00      0   0  1</div>
<div class="lyx_code_item">  [ 5] .debug_aranges    PROGBITS        00000000 001163 000020 00      0   0  1</div>
<div class="lyx_code_item">  [ 6] .debug_line       PROGBITS        00000000 001183 000038 00      0   0  1</div>
<div class="lyx_code_item">  [ 7] .debug_str        PROGBITS        00000000 0011bb 000078 01  MS  0   0  1</div>
<div class="lyx_code_item">  [ 8] .comment          PROGBITS        00000000 001233 000034 01  MS  0   0  1</div>
<div class="lyx_code_item">  [ 9] .shstrtab         STRTAB          00000000 00133a 000074 00      0   0  1</div>
<div class="lyx_code_item">  [10] .symtab           SYMTAB          00000000 001268 0000c0 10     11  10  4</div>
<div class="lyx_code_item">  [11] .strtab           STRTAB          00000000 001328 000012 00      0   0  1</div>
<div class="lyx_code_item">Key to Flags:</div>
<div class="lyx_code_item">  W (write), A (alloc), X (execute), M (merge), S (strings)</div>
<div class="lyx_code_item">  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)</div>
<div class="lyx_code_item">  O (extra OS processing required) o (OS specific), p (processor specific)</div>
<div class="lyx_code_item">Program Headers:</div>
<div class="lyx_code_item">  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align</div>
<div class="lyx_code_item">  LOAD           0x001000 0x00010000 0x00010000 0x00068 0x00068 R E 0x1000</div>
<div class="lyx_code_item">  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0x10</div>
<div class="lyx_code_item"> Section to Segment mapping:</div>
<div class="lyx_code_item">  Segment Sections...</div>
<div class="lyx_code_item">   00     .text .eh_frame </div>
<div class="lyx_code_item">   01     </div>
</div>


<div class="standard" id='magicparlabel-47471'>The structure is incredibly simple. Both the segment and section listings can be contained within one screen. This is not the case with default ELF executable binary. From the output, there are only 11 sections, and only two are loaded at runtime: <span style='font-family:monospace;'>.text</span> and <span style='font-family:monospace;'>.eh_frame </span>because both section are assigned with an actual memroy addresses, <span style='font-family:monospace;'>0x10000</span> and <span style='font-family:monospace;'>0x10010</span> respectively. The remaining sections are assigned with <span style='font-family:monospace;'>0</span> <em>in the final executable binary</em><div class="foot"><span class="foot_label">44</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-47475'>As opposed to the object files, where memory addresses are always 0 and only assigned with actual values in the linking process.</div>
</div></div>, which mean they are not loaded at runtime. It makes sense, as those sections are related to versioning<div class="foot"><span class="foot_label">45</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-47479'>It is the .comment section. It can be viewed with the comment <span style='font-family:monospace;'>readelf -p .comment main</span>.</div>
</div></div>, debugging<div class="foot"><span class="foot_label">46</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-47483'>The ones starts with <span style='font-family:monospace;'>.debug</span> prefix.</div>
</div></div> and linking<div class="foot"><span class="foot_label">47</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-47487'>The symbol tables and string table.</div>
</div></div>.</div>

<div class="standard" id='magicparlabel-47488'>The program segment header table is even simpler. It only contains 2 segments: <span style='font-family:monospace;'>LOAD</span> and <span style='font-family:monospace;'>GNU_STACK</span>. By default, if the linker script does not supply the instructions for building program segments, <span style='font-family:monospace;'>ld</span> provides reasonable default segments. As in this case, <span style='font-family:monospace;'>.text</span> should be in the <span style='font-family:monospace;'>LOAD</span> segment. <span style='font-family:monospace;'>GNU_STACK</span> segment is a GNU extension used by the Linux kernel to control the state of the program stack. We will not need this segment, along with <span style='font-family:monospace;'>.eh_frame</span>, which is for exception handling, as we write our own operating system from scratch. To achieve these goals, we will need to create our own program headers instead of letting <span style='font-family:monospace;'>ld</span> handles the task, and instruct ld to remove <span style='font-family:monospace;'>.eh_frame</span>.</div>
<div class="subsection" id='magicparlabel-47489'>Manipulate the program segments</div>
<div class="standard" id='magicparlabel-47490'>First, we need to craft our own program header table by using the following syntax:</div>


<div class='float-listings'><pre class ='listings bash'>PHDRS
{
  &lt;name&gt; &lt;type&gt; [ FILEHDR ] [ PHDRS ] [ AT ( address ) ]
        [ FLAGS ( flags ) ] ;
}</pre></div>


<div class="standard" id='magicparlabel-47500'><span style='font-family:monospace;'>PHDRS</span> command, similar to <span style='font-family:monospace;'>SECTION</span> command, but for declaring a list of custom program segments with a predefined syntax. </div>

<dl class='description' id='magicparlabel-47501'><dt class="description_label"><strong class="flex_strong">name</strong></dt>
<dd class="description_item"> is the header name for later referenced by a section declared in <span style='font-family:monospace;'>SECTION</span> command.</dd>
<dt class="description_label"><strong class="flex_strong">type</strong></dt>
<dd class="description_item"> is the ELF segment type, as described in section <a href="#sec_Program_header_table">6</a>, with added prefix <span style='font-family:monospace;'>PT_</span>. For example, instead of <span style='font-family:monospace;'>NULL</span> or <span style='font-family:monospace;'>LOAD</span> as displayed by <span style='font-family:monospace;'>readelf</span>, it is <span style='font-family:monospace;'>PT_NULL</span> or <span style='font-family:monospace;'>PT_LOAD</span>.</dd>
</dl>
<div class="standard" style='text-align: left;' id='magicparlabel-47511'><hr />

</div>

<div class="example" id='magicparlabel-47512'><div class="example_item"><span class="example_label">Example 0.74.</span>
With only <span style='font-family:monospace;'>name</span> and <span style='font-family:monospace;'>type</span>, we can create any number of program segments. For example, we can add the <span style='font-family:monospace;'>NULL</span> program segment and remove the <span style='font-family:monospace;'>GNU_STACK</span> segment:
<br />

</div>

<div class='float-listings'><pre class ='listings bash'>PHDRS
{
    null PT_NULL;
    code PT_LOAD;
}

SECTIONS
{
    . = 0x10000;
    .text : { *(.text) } :code
    . = 0x8000000;
    .data : { *(.data) }
    .bss : { *(.bss) }
}</pre></div>


<div class="standard" id='magicparlabel-47531'>The content of <span style='font-family:monospace;'>PHDRS</span> command tells that the final executable binary contains 2 program segments: <span style='font-family:monospace;'>NULL</span> and <span style='font-family:monospace;'>LOAD</span>. The <span style='font-family:monospace;'>NULL</span> segment is given the name <span style='font-family:monospace;'>null </span>and <span style='font-family:monospace;'>LOAD</span> segment given the name code to signify this <span style='font-family:monospace;'>LOAD</span> segment contains program code. Then, to put a section into a segment, we use the syntax <span style='font-family:monospace;'>:&lt;phdr&gt;</span>, where <span style='font-family:monospace;'>phdr</span> is the name given to a segment earlier. In this example, <span style='font-family:monospace;'>.text</span> section is put into <span style='font-family:monospace;'>code</span> segment. We compile and see the result (assuming <span style='font-family:monospace;'>main.o</span> compiled earlier remains):</div>



<div class="standard" id='magicparlabel-47537'><span style='font-family:monospace;'>$ ld -m elf_i386 -o main -T main.lds main.o</span></div>

<div class="standard" id='magicparlabel-47538'><span style='font-family:monospace;'>$ readelf -l main</span></div>





<div class="lyx_code" id='magicparlabel-47549'><div class="lyx_code_item">Elf file type is EXEC (Executable file)</div>
<div class="lyx_code_item">Entry point 0x10000</div>
<div class="lyx_code_item">There are 2 program headers, starting at offset 52</div>
<div class="lyx_code_item">Program Headers:</div>
<div class="lyx_code_item">  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align</div>
<div class="lyx_code_item">  NULL           0x000000 0x00000000 0x00000000 0x00000 0x00000     0x4</div>
<div class="lyx_code_item">  LOAD           0x001000 0x00010000 0x00010000 0x00010 0x00010 R E 0x1000</div>
<div class="lyx_code_item"> Section to Segment mapping:</div>
<div class="lyx_code_item">  Segment Sections...</div>
<div class="lyx_code_item">   00     </div>
<div class="lyx_code_item">   01     .text .eh_frame</div>
</div>


<div class="standard" id='magicparlabel-47565'>Those 2 segments are now <span style='font-family:monospace;'>NULL</span> and <span style='font-family:monospace;'>LOAD</span> instead of <span style='font-family:monospace;'>LOAD</span> and <span style='font-family:monospace;'>GNU_STACK</span>.</div>
</div>

<div class="standard" id='magicparlabel-47566'><br />

</div>

<div class="example" id='magicparlabel-47567'><div class="example_item"><span class="example_label">Example 0.75.</span>
We can add as many segments of the same type, as long as they are given different names:
<br />

</div>

<div class='float-listings'><pre class ='listings bash'>PHDRS
{
    null1 PT_NULL;
    null2 PT_NULL;
    code1 PT_LOAD;
    code2 PT_LOAD;
}

SECTIONS
{
    . = 0x10000;
    .text : { *(.text) } :code1
    .eh_frame : { *(.eh_frame) } :code2
    . = 0x8000000;
    .data : { *(.data) }
    .bss : { *(.bss) }
}</pre></div>


<div class="standard" id='magicparlabel-47589'>After amending the <span style='font-family:monospace;'>PHDRS</span> content earlier with this new segment listing, we put <span style='font-family:monospace;'>.text</span> into <span style='font-family:monospace;'>code1</span> segment and <span style='font-family:monospace;'>.eh_frame</span> into <span style='font-family:monospace;'>code2</span> segment, we compile and see the new segments:</div>



<div class="standard" id='magicparlabel-47595'><span style='font-family:monospace;'>$ ld -m elf_i386 -o main -T main.lds main.o</span></div>

<div class="standard" id='magicparlabel-47596'><span style='font-family:monospace;'>$ readelf -l main</span></div>





<div class="lyx_code" id='magicparlabel-47607'><div class="lyx_code_item">Elf file type is EXEC (Executable file)</div>
<div class="lyx_code_item">Entry point 0x10000</div>
<div class="lyx_code_item">There are 4 program headers, starting at offset 52</div>
<div class="lyx_code_item">Program Headers:</div>
<div class="lyx_code_item">  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align</div>
<div class="lyx_code_item">  NULL           0x000000 0x00000000 0x00000000 0x00000 0x00000     0x4</div>
<div class="lyx_code_item">  NULL           0x000000 0x00000000 0x00000000 0x00000 0x00000     0x4</div>
<div class="lyx_code_item">  LOAD           0x001000 0x00010000 0x00010000 0x00010 0x00010 R E 0x1000</div>
<div class="lyx_code_item">  LOAD           0x001010 0x00010010 0x00010010 0x00058 0x00058 R   0x1000</div>
<div class="lyx_code_item"> Section to Segment mapping:</div>
<div class="lyx_code_item">  Segment Sections...</div>
<div class="lyx_code_item">   00     </div>
<div class="lyx_code_item">   01     </div>
<div class="lyx_code_item">   02     .text </div>
<div class="lyx_code_item">   03     .eh_frame </div>
</div>


<div class="standard" id='magicparlabel-47627'>Now <span style='font-family:monospace;'>.text</span> and <span style='font-family:monospace;'>.eh_frame</span> are in different segments.
<br />

</div>
</div>
<div class="standard" style='text-align: left;' id='magicparlabel-47628'><hr />

</div>

<dl class='description' id='magicparlabel-47629'><dt class="description_label"><strong class="flex_strong">FILEHDR</strong></dt>
<dd class="description_item"> is an optional keyword, when added specifies that a program segment includes the ELF file header of the executable binary. However, this attribute should only added for the first program segment, as it drastically alters the size and starting address of a segment because the ELF header is always at the beginning of a binary file, recall that a segment starts at the address of its first content, which is in most of the cases (except for this case, which is the file header), the first section.</dd>
</dl>
<div class="standard" style='text-align: left;' id='magicparlabel-47634'><hr />

</div>

<div class="example" id='magicparlabel-47635'><div class="example_item"><span class="example_label">Example 0.76.</span>
Adding the <span style='font-family:monospace;'>FILEHDR</span> keyword changes the size of <span style='font-family:monospace;'>NULL</span> segment:
<br />

</div>

<div class='float-listings'><pre class ='listings bash'>PHDRS
{
    null PT_NULL FILEHDR;
    code PT_LOAD;
}
..... content is the same .....</pre></div>


<div class="standard" id='magicparlabel-47646'>We link it again and see the result:</div>



<div class="standard" id='magicparlabel-47652'><span style='font-family:monospace;'>$ ld -m elf_i386 -o main -T main.lds main.o</span></div>

<div class="standard" id='magicparlabel-47653'><span style='font-family:monospace;'>$ readelf -l main</span></div>





<div class="lyx_code" id='magicparlabel-47664'><div class="lyx_code_item">Elf file type is EXEC (Executable file)</div>
<div class="lyx_code_item">Entry point 0x10000</div>
<div class="lyx_code_item">There are 2 program headers, starting at offset 52</div>
<div class="lyx_code_item">Program Headers:</div>
<div class="lyx_code_item">  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align</div>
<div class="lyx_code_item">  NULL           0x000000 0x00000000 0x00000000 0x00034 0x00034 R   0x4</div>
<div class="lyx_code_item">  LOAD           0x001000 0x00010000 0x00010000 0x00068 0x00068 R E 0x1000</div>
<div class="lyx_code_item"> Section to Segment mapping:</div>
<div class="lyx_code_item">  Segment Sections...</div>
<div class="lyx_code_item">   00     </div>
<div class="lyx_code_item">   01     .text .eh_frame </div>
</div>


<div class="standard" id='magicparlabel-47680'>In previous examples, the file size and memory size of the <span style='font-family:monospace;'>NULL</span> section are always 0, now they are both <span style='font-family:monospace;'>34</span> bytes, which is the size of an ELF header.</div>
</div>

<div class="standard" id='magicparlabel-47681'><br />

</div>

<div class="example" id='magicparlabel-47682'><div class="example_item"><span class="example_label">Example 0.77.</span>
If we assign <span style='font-family:monospace;'>FILEHDR</span> to a non-starting segment, its size and starting address changes significantly:
<br />

</div>

<div class='float-listings'><pre class ='listings bash'>PHDRS
{
    null PT_NULL;
    code PT_LOAD FILEHDR;
}
..... content is the same .....</pre></div>




<div class="standard" id='magicparlabel-47698'><span style='font-family:monospace;'>$ ld -m elf_i386 -o main -T main.lds main.o</span></div>

<div class="standard" id='magicparlabel-47699'><span style='font-family:monospace;'>$ readelf -l main</span></div>





<div class="lyx_code" id='magicparlabel-47710'><div class="lyx_code_item">Elf file type is EXEC (Executable file)</div>
<div class="lyx_code_item">Entry point 0x10000</div>
<div class="lyx_code_item">There are 2 program headers, starting at offset 52</div>
<div class="lyx_code_item">Program Headers:</div>
<div class="lyx_code_item">  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align</div>
<div class="lyx_code_item">  NULL           0x000000 0x00000000 0x00000000 0x00000 0x00000     0x4</div>
<div class="lyx_code_item">  LOAD           0x000000 0x0000f000 0x0000f000 0x01068 0x01068 R E 0x1000</div>
<div class="lyx_code_item"> Section to Segment mapping:</div>
<div class="lyx_code_item">  Segment Sections...</div>
<div class="lyx_code_item">   00     </div>
<div class="lyx_code_item">   01     .text .eh_frame </div>
</div>


<div class="standard" id='magicparlabel-47726'>The size of the <span style='font-family:monospace;'>LOAD</span> segment in the previous example is only <span style='font-family:monospace;'>0x68</span>, the same size as the total sizes of <span style='font-family:monospace;'>.text</span> and <span style='font-family:monospace;'>.eh_frame</span> sections in it. But now, it is <span style='font-family:monospace;'>0x01068</span>, got <span style='font-family:monospace;'>0x1000</span> bytes larger. What is the reason for these extra bytes? A simple answer: segment alignment. From the output, the alignment of this segment is <span style='font-family:monospace;'>0x1000</span>; it means that regardless of which address is the start of this segment, it must be divisible by <span style='font-family:monospace;'>0x1000</span>. For that reason, the starting address of <span style='font-family:monospace;'>LOAD</span> is <span style='font-family:monospace;'>0xf000</span> because it is divisible by <span style='font-family:monospace;'>0x1000</span>.</div>

<div class="standard" id='magicparlabel-47727'>Another question arises: why is the starting address <span style='font-family:monospace;'>0xf000</span> instead of <span style='font-family:monospace;'>0x10000</span>? <span style='font-family:monospace;'>.text</span> is the first section, which starts at <span style='font-family:monospace;'>0x10000</span>, so the segment should start at <span style='font-family:monospace;'>0x10000</span>. The reason is that we include <span style='font-family:monospace;'>FILEHDR</span> as part of the segment, it must expand to include the ELF file header, which is at the very start of an ELF executable binary. To satisfy this constraint and the alignment constraint, <span style='font-family:monospace;'>0xf000</span> is the closest address. Note that the virtual and physical memory addresses are the addresses at runtime, not the locations of the segment in the file on disk. As the <span style='font-family:monospace;'>FileSiz</span> field shows, the segment only consumes <span style='font-family:monospace;'>0x1068</span> bytes on disk. Figure <a href="#LOAD_segment">Footnote 47</a> illustrates the difference between the memory layouts with and without <span style='font-family:monospace;'>FILEHDR</span> keyword.</div>


<div class="standard" id='magicparlabel-47728'><br />

</div>
<div class='float-figure'><div class="plain_layout" id='magicparlabel-47732'><span class='float-caption-Standard float-caption float-caption-standard'>Figure 0.22:  <span style='font-family:monospace;'>LOAD</span> segment on disk and in memory.</span><a id="LOAD_segment" />
</div>


<div class='float-figure'><div class="plain_layout" id='magicparlabel-47741'><span class='float-caption-Standard float-caption float-caption-standard'>Sub-Figure a:  Without <b><span style='font-family:monospace;'>FILEHDR</span></b>.</span></div>

<div class="plain_layout" id='magicparlabel-47746'><img style='width:120%;' src='32_img_08_no_FILEHDR.png' alt='image: 32_img_08_no_FILEHDR.png' />
</div>
</div>



<div class='float-figure'><div class="plain_layout" id='magicparlabel-47751'><span class='float-caption-Standard float-caption float-caption-standard'>Sub-Figure b:  With <b><span style='font-family:monospace;'>FILEHDR</span></b>.</span></div>

<div class="plain_layout" id='magicparlabel-47756'><img style='width:120%;' src='33_img_08_with_FILEHDR.png' alt='image: 33_img_08_with_FILEHDR.png' />
</div>
</div>

</div>

</div>
<div class="standard" style='text-align: left;' id='magicparlabel-47757'><hr />

</div>

<div class="standard" id='magicparlabel-47758'><div style='height:1em'></div></div>

<div class="standard" id='magicparlabel-47759'><br />
</div>

<dl class='description' id='magicparlabel-47760'><dt class="description_label"><strong class="flex_strong">PHDRS</strong></dt>
<dd class="description_item"> is an optional keyword, when added specifies that a program segment is a program segment header table.</dd>
</dl>
<div class="standard" style='text-align: left;' id='magicparlabel-47765'><hr />

</div>

<div class="example" id='magicparlabel-47766'><div class="example_item"><span class="example_label">Example 0.78.</span>
The first segment of the default executable binary generated by <span style='font-family:monospace;'>gcc</span> is a <span style='font-family:monospace;'>PHDR</span> since the program segment header table appears right after the ELF header. It is also a convenient segment to put the ELF header into using the <span style='font-family:monospace;'>FILEHDR</span> keyword. We replace the unused <span style='font-family:monospace;'>NULL</span> segment earlier with a <span style='font-family:monospace;'>PHDR</span> segment:
<br />

</div>

<div class='float-listings'><pre class ='listings bash'>PHDRS
{
    headers PT_PHDR FILEHDR PHDRS;
    code PT_LOAD FILEHDR;
}
..... content is the same .....</pre></div>




<div class="standard" id='magicparlabel-47782'><span style='font-family:monospace;'>$ ld -m elf_i386 -o main -T main.lds main.o</span></div>

<div class="standard" id='magicparlabel-47783'><span style='font-family:monospace;'>$ readelf -l main</span></div>





<div class="lyx_code" id='magicparlabel-47794'><div class="lyx_code_item">Elf file type is EXEC (Executable file)</div>
<div class="lyx_code_item">Entry point 0x10000</div>
<div class="lyx_code_item">There are 2 program headers, starting at offset 52</div>
<div class="lyx_code_item">Program Headers:</div>
<div class="lyx_code_item">  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align</div>
<div class="lyx_code_item">  PHDR           0x000000 0x00000000 0x00000000 0x00074 0x00074 R   0x4</div>
<div class="lyx_code_item">  LOAD           0x001000 0x00010000 0x00010000 0x00068 0x00068 R E 0x1000</div>
<div class="lyx_code_item"> Section to Segment mapping:</div>
<div class="lyx_code_item">  Segment Sections...</div>
<div class="lyx_code_item">   00     </div>
<div class="lyx_code_item">   01     .text .eh_frame </div>
</div>


<div class="standard" id='magicparlabel-47810'>As shown in the output, the first segment is of type <span style='font-family:monospace;'>PHDR</span>. Its size is <span style='font-family:monospace;'>0x74</span>, which includes:</div>

<ul class="itemize" id='magicparlabel-47811'><li class="itemize_item"><span style='font-family:monospace;'>0x34</span> bytes for ELF header.</li>
<li class="itemize_item"><span style='font-family:monospace;'>0x40</span> bytes for the program segment header table, with 2 entries, each is <span style='font-family:monospace;'>0x20</span> bytes (32 bytes) in length.</li>
</ul>
<div class="standard" id='magicparlabel-47813'>The above number is consistent with ELF header output:</div>



<div class="lyx_code" id='magicparlabel-47819'><div class="lyx_code_item">ELF Header:</div>
<div class="lyx_code_item">  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 </div>
<div class="lyx_code_item">  Class:                             ELF32</div>
<div class="lyx_code_item">....... output omitted ......</div>
<div class="lyx_code_item">  Size of this header:               52 (bytes)   <b><span style='font-size:large;'>--&gt; 0x34 bytes</span></b></div>
<div class="lyx_code_item">  Size of program headers:           32 (bytes)   <b><span style='font-size:large;'>--&gt;</span> <span style='font-size:large;'>0x20 bytes each program header</span></b></div>
<div class="lyx_code_item">  Number of program headers:         2            <b><span style='font-size:large;'>--&gt;</span> <span style='font-size:large;'>0x40</span></b><span style='font-size:large;'> <b>bytes in total</b></span></div>
<div class="lyx_code_item">  Size of section headers:           40 (bytes)  </div>
<div class="lyx_code_item">  Number of section headers:         12</div>
<div class="lyx_code_item">  Section header string table index: 9</div>
</div>

<div class="standard" id='magicparlabel-47829'><br />

</div>
</div>
<div class="standard" style='text-align: left;' id='magicparlabel-47834'><hr />

</div>

<dl class='description' id='magicparlabel-47835'><dt class="description_label"><strong class="flex_strong">AT&nbsp;(&nbsp;address&nbsp;)</strong></dt>
<dd class="description_item"> specifies the load memory address where the segment is placed. Every segment or section has a <em>virtual memory address</em> and a <em>load memory address</em>:
<br />



<ul class="itemize" id='magicparlabel-47840'><li class="itemize_item">A <em><div class="marginal"><div class="plain_layout" id='magicparlabel-47844'><em>virtual memory address</em></div>
</div>virtual memory address<a id='magicparlabel-47848' />
</em> is a starting address of a segment or a section when a program is in memory and running. The memory address is called virtual because it does not map to the actual memory cell that corresponds to the address number, but any random memory cell, which depends on how the underlying operating system translates the address. For example, the virtual memory address <span style='font-family:monospace;'>0x1</span> might map to the memory cell with the physical address <span style='font-family:monospace;'>0x1000</span>.</li>
<li class="itemize_item">A <em><a id='magicparlabel-47853' />
<div class="marginal"><div class="plain_layout" id='magicparlabel-47857'><em>load memory address</em></div>
</div>load memory address</em> is the physical memory address, where a program is loaded but not yet running.</li>
</ul>
<div class="standard" id='magicparlabel-47858'>The load memory address is specified by <span style='font-family:monospace;'>AT</span> syntax. Normally both types of addresses are the same, and the physical address can be ignored. They differ when loading and running are purposely divided into two distinct phases that require different address regions. </div>

<div class="standard" id='magicparlabel-47859'>For example, a program can be designed to load into a ROM<div class="foot"><span class="foot_label">48</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-47863'>Read-Only Memory</div>
</div></div> at a fixed address. But when loading into RAM for a bare-metal application or an operating system to use, the program needs a load address that accommodates the addressing scheme of the target application or operating system. 
<br />

</div>
</dd></dl>
<div class="standard" style='text-align: left;' id='magicparlabel-47864'><hr />

</div>

<div class="example" id='magicparlabel-47865'><div class="example_item"><span class="example_label">Example 0.79.</span>
We can specify a load memory address for the segment <span style='font-family:monospace;'>LOAD</span> with AT syntax:
<br />

</div>

<div class='float-listings'><pre class ='listings bash'>PHDRS
{
    headers PT_PHDR FILEHDR PHDRS AT(0x500);
    code PT_LOAD;
}
..... content is the same .....</pre></div>




<div class="standard" id='magicparlabel-47881'><span style='font-family:monospace;'>$ ld -m elf_i386 -o main -T main.lds main.o</span></div>

<div class="standard" id='magicparlabel-47882'><span style='font-family:monospace;'>$ readelf -l main</span></div>





<div class="lyx_code" id='magicparlabel-47893'><div class="lyx_code_item">Elf file type is EXEC (Executable file)</div>
<div class="lyx_code_item">Entry point 0x4000</div>
<div class="lyx_code_item">There are 2 program headers, starting at offset 52</div>
<div class="lyx_code_item">Program Headers:</div>
<div class="lyx_code_item">  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align</div>
<div class="lyx_code_item">  PHDR           0x000000 0x00000000 0x00000500 0x00074 0x00074 R   0x4</div>
<div class="lyx_code_item">  LOAD           0x001000 0x00004000 0x00002000 0x00068 0x00068 R E 0x1000</div>
<div class="lyx_code_item"> Section to Segment mapping:</div>
<div class="lyx_code_item">  Segment Sections...</div>
<div class="lyx_code_item">   00     </div>
<div class="lyx_code_item">   01     .text .eh_frame </div>
</div>


<div class="standard" id='magicparlabel-47909'>It depends on an operating system whether to use the address or not. For our operating system, the virtual memory address and load are the same, so an explicit load address is none of our concern.
<br />

</div>
</div>
<div class="standard" style='text-align: left;' id='magicparlabel-47910'><hr />

</div>

<dl class='description' id='magicparlabel-47911'><dt class="description_label"><strong class="flex_strong">FLAGS&nbsp;(flags)</strong></dt>
<dd class="description_item"> assigns permissions to a segment. Each flag is an integer that represents a permission and can be combined with OR operations. Possible values:
<br />




<div class="standard" id='magicparlabel-47916'><table><tbody><tr><td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47938'><b>Permission</b></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47941'><b>Value</b></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47944'><b>Description</b></div>
</td>
</tr><tr><td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47947'>R</div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47950'><span style='font-family:monospace;'>1</span></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47953'>Readable</div>
</td>
</tr><tr><td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47956'>W</div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47959'><span style='font-family:monospace;'>2</span></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47962'>Writable</div>
</td>
</tr><tr><td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47965'>E</div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47968'><span style='font-family:monospace;'>4</span></div>
</td>
<td align='left' valign='top'>
<div class="plain_layout" id='magicparlabel-47971'>Executable</div>
</td>
</tr></tbody>
</table>

<br />

</div>
</dd></dl>
<div class="standard" style='text-align: left;' id='magicparlabel-47972'><hr />

</div>

<div class="example" id='magicparlabel-47973'><div class="example_item"><span class="example_label">Example 0.80.</span>
We can create a LOAD segment with Read, Write and Execute permissions enabled:
<br />

</div>

<div class='float-listings'><pre class ='listings bash'>PHDRS
{
    headers PT_PHDR FILEHDR PHDRS AT(0x500);
    code PT_LOAD FILEHDR FLAGS(0x1 | 0x2 | 0x4);
}
..... content is the same .....</pre></div>




<div class="standard" id='magicparlabel-47989'><span style='font-family:monospace;'>$ ld -m elf_i386 -o main -T main.lds main.o</span></div>

<div class="standard" id='magicparlabel-47990'><span style='font-family:monospace;'>$ readelf -l main</span></div>





<div class="lyx_code" id='magicparlabel-48001'><div class="lyx_code_item">Elf file type is EXEC (Executable file)</div>
<div class="lyx_code_item">Entry point 0x0</div>
<div class="lyx_code_item">There are 2 program headers, starting at offset 52</div>
<div class="lyx_code_item">Program Headers:</div>
<div class="lyx_code_item">  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align</div>
<div class="lyx_code_item">  PHDR           0x000000 0x00000000 0x00000500 0x00074 0x00074 R   0x4</div>
<div class="lyx_code_item">  LOAD           0x001000 0x00000000 0x00000000 0x00010 0x00010 RWE 0x1000</div>
<div class="lyx_code_item"> Section to Segment mapping:</div>
<div class="lyx_code_item">  Segment Sections...</div>
<div class="lyx_code_item">   00     </div>
<div class="lyx_code_item">   01     .text .eh_frame</div>
</div>


<div class="standard" id='magicparlabel-48017'><span style='font-family:monospace;'>LOAD</span> segment now gets all the <span style='font-family:monospace;'>RWE</span> permissions, as shown above.
<br />

</div>
</div>
<div class="standard" style='text-align: left;' id='magicparlabel-48018'><hr />

</div>

<div class="standard" id='magicparlabel-48019'>Finally, we want to remove the <span style='font-family:monospace;'>.eh_frame</span> or any unwanted section, we add a special section called <span style='font-family:monospace;'>/DISCARD/</span>:</div>


<div class='float-listings'><pre class ='listings bash'>... program segment header table remains the same ...

SECTIONS
{
    /* . = 0x10000; */
    .text : { *(.text) } :code
    . = 0x8000000;
    .data : { *(.data) }
    .bss : { *(.bss) }
    /DISCARD/ : { *(.eh_frame) }
}</pre></div>


<div class="standard" id='magicparlabel-48035'>Any section putting in <span style='font-family:monospace;'>/DISCARD/</span> disappears in the final executable binary:</div>



<div class="standard" id='magicparlabel-48041'><span style='font-family:monospace;'>$ ld -m elf_i386 -o main -T main.lds main.o</span></div>

<div class="standard" id='magicparlabel-48042'><span style='font-family:monospace;'>$ readelf -l main</span></div>





<div class="lyx_code" id='magicparlabel-48053'><div class="lyx_code_item">Elf file type is EXEC (Executable file)</div>
<div class="lyx_code_item">Entry point 0x0</div>
<div class="lyx_code_item">There are 2 program headers, starting at offset 52</div>
<div class="lyx_code_item">Program Headers:</div>
<div class="lyx_code_item">  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align</div>
<div class="lyx_code_item">  PHDR           0x000000 0x00000000 0x00000500 0x00074 0x00074 R   0x4</div>
<div class="lyx_code_item">  LOAD           0x001000 0x00000000 0x00000000 0x00010 0x00010 R E 0x1000</div>
<div class="lyx_code_item"> Section to Segment mapping:</div>
<div class="lyx_code_item">  Segment Sections...</div>
<div class="lyx_code_item">   00     </div>
<div class="lyx_code_item">   01     .text </div>
</div>


<div class="standard" id='magicparlabel-48069'>As can be seen, <span style='font-family:monospace;'>.eh_frame</span> is nowhere to be found.</div>
<div class="section" id='magicparlabel-48070'>C Runtime: Hosted vs Freestanding<a id="sec_C_Runtime" />
</div>
<div class="standard" id='magicparlabel-48071'>The purpose of .<span style='font-family:monospace;'>init</span>, <span style='font-family:monospace;'>.init_array</span>, <span style='font-family:monospace;'>.fini_array</span> and <span style='font-family:monospace;'>.preinit_array</span> section is to initialize a C Runtime environment that supports the C standard libraries. Why does C need a runtime environment, when it is supposed to be a compiled language? The reason is that many of the standard functions depend on the underlying operating system, which is of itself a big runtime environment. For example, I/O related functions such as reading from keyboard with <span style='font-family:monospace;'>gets()</span>, reading from file with <span style='font-family:monospace;'>open()</span>, printing on screen with <span style='font-family:monospace;'>printf()</span>, managing system memory with <span style='font-family:monospace;'>malloc()</span>, <span style='font-family:monospace;'>free()</span>, etc. </div>

<div class="standard" id='magicparlabel-48072'>A C implementation cannot provide such routines without a running operating system, which is a<em> hosted environment</em>. A <em><a id='magicparlabel-48076' />
hosted environment</em> is a runtime environment that:</div>

<ul class="itemize" id='magicparlabel-48077'><li class="itemize_item">provides a default implementation of C libraries that includes system-dependent data and routines.</li>
<li class="itemize_item">perform resource allocations to prepare an environment for a program to run. </li>
</ul>
<div class="standard" id='magicparlabel-48079'>This process is similar to the hardware initialization process:</div>

<ul class="itemize" id='magicparlabel-48080'><li class="itemize_item">When first powered up, a desktop computer loads its basic system routines from a read-only memory stored on the motherboard.</li>
<li class="itemize_item">Then, it starts initializing an environment, such as setting default values for various registers in CPU and devices, before executing the any code. </li>
</ul>
<div class="standard" id='magicparlabel-48082'>In contrast, a <em><a id='magicparlabel-48086' />
freestanding environment</em> is an environment that does not provide system-dependent data and routines. As a consequence, almost no C library exists and the environment can run code compiled written from pure C syntax. For a free standing environment to become a host environment, it must implement standard C system routines. But for a <em>conforming</em> freestanding environment, it only needs these header files available: <span style='font-family:monospace;'>&lt;float.h&gt;</span>, <span style='font-family:monospace;'>&lt;limits.h&gt;</span>, <span style='font-family:monospace;'>&lt;stadarg.h&gt;</span> and <span style='font-family:monospace;'>&lt;stddef.h&gt;</span> (according to GCC manual).</div>

<div class="standard" id='magicparlabel-48087'>For a typical desktop x86 program, C runtime environment is initialized by a compiler so a program runs normal. However, for an embedded platform where a program runs directly on it, this is not the case. The typical C runtime environment used in desktop operating systems cannot be used on the embedded platforms, because architectural differences and resource constraints. As such, the software writer must implement a custom C runtime environment suitable for the targeted platform. For the embedded platform, </div>

<div class="standard" id='magicparlabel-48088'>In writing our operating system, the first step is to create a freestanding environment before creating a hosted one.</div>
<div class="section" id='magicparlabel-48089'>Debuggable bootloader on bare metal</div>
<div class="standard" id='magicparlabel-48090'>Currently, the bootloader is compiled as a flat binary file. Although <span style='font-family:monospace;'>gdb</span> can display the assembly code, it is not always the same as the source code. In the assembly source code, there exists variable names and labels. These symbols are lost when compiled as a flat binary file, making debugging more difficult. Another issue is the mismatch between the written assembly source code and the displayed assembly source code. The written code might contain higher level syntax that is assembler-specific and is generated into lower-level assembly code as displayed by <span style='font-family:monospace;'>gdb</span>. Finally, with debug information available, the command <span style='font-family:monospace;'>next/n</span> and <span style='font-family:monospace;'>prev/p</span> can be used instead of <span style='font-family:monospace;'>ni</span> and <span style='font-family:monospace;'>si</span>.</div>

<div class="standard" id='magicparlabel-48091'>To enable debug information, we modify the bootloader Makefile:</div>

<ol class="enumerate" id='magicparlabel-48092'><li class="enumerate_item">The bootloader must be compiled as a ELF binary. Open the Makefile in bootloader/ directory and change this line under <span style='font-family:monospace;'>$(BUILD_DIR)/%.o: %.asm</span> recipe:
<br />



<div class='float-listings'><pre class ='listings [gnu]make'>nasm -f bin $&lt; -o $@</pre></div>


<div class="standard" id='magicparlabel-48098'>to this line:
<br />

</div>


<div class='float-listings'><pre class ='listings [gnu]make'>nasm -f elf $&lt; -F dwarf -g -o $@</pre></div>


<div class="standard" id='magicparlabel-48104'>In the updated recipe, <span style='font-family:monospace;'>bin</span> format is replaced with <span style='font-family:monospace;'>elf</span> format to enable debugging information to be properly produced.<span style='font-family:monospace;'>-F</span> option specifies the debug information format, which is <span style='font-family:monospace;'>dwarf</span> in this case. Finally, <span style='font-family:monospace;'>-g</span> option causes <span style='font-family:monospace;'>nasm</span> to actually generate debug information in selected format.</div>
</li><li class="enumerate_item">Then, <span style='font-family:monospace;'>ld</span> consumes the ELF bootloader binary and produces another ELF bootloader binary, with proper<span style='font-family:monospace;'> </span>starting memory address of <span style='font-family:monospace;'>.text</span> section that match the actual address of the bootloader at runtime, when QEMU virtual machine loads it at <span style='font-family:monospace;'>0x7c00</span>. We need <span style='font-family:monospace;'>ld</span> because when compiled by <span style='font-family:monospace;'>nasm</span>, the starting address is assumed to be <span style='font-family:monospace;'>0</span>, not <span style='font-family:monospace;'>0x7c00</span>.</li>
<li class="enumerate_item">Finally, we use <span style='font-family:monospace;'>objcopy</span> to separate extract only the flat binary content as the original bootloader by adding this line to <span style='font-family:monospace;'>$(BUILD_DIR)/%.o: %.asm</span>:
<br />



<div class='float-listings'><pre class ='listings [gnu]make'>objcopy -O binary $(BUILD_DIR)/bootloader.o.elf $@</pre></div>


<div class="standard" id='magicparlabel-48112'><span style='font-family:monospace;'>objcopy</span>, as its name implies, is a program that copies and translates object files. Here, we copy the original ELF bootloader and translate it into a flat binary file.</div>
</li></ol>
<div class="standard" id='magicparlabel-48113'>The updated recipe should look like:
<br />

</div>


<div class='float-listings'><pre class ='listings [gnu]make'>$(BUILD_DIR)/%.o: %.asm
	nasm -f elf $&lt; -F dwarf -g -o $@
	ld -m elf_i386 -T bootloader.lds $@ -o $@.elf
	objcopy -O binary  $(BUILD_DIR)/bootloader.o.elf $@</pre></div>


<div class="standard" id='magicparlabel-48122'>Now we test the bootloader with debug information available:</div>

<ol class="enumerate" id='magicparlabel-48123'><li class="enumerate_item">Start the QEMU machine:
<br />




<div class="standard" id='magicparlabel-48129'><span style='font-family:monospace;'>$ make qemu</span></div>


</li><li class="enumerate_item">Start <span style='font-family:monospace;'>gdb</span> with the debug information stored in <span style='font-family:monospace;'>bootloader.o.elf</span>:
<br />




<div class="standard" id='magicparlabel-48141'><span style='font-family:monospace;'>$ gdb build/bootloader/bootloader.o.elf</span></div>



<div class="standard" id='magicparlabel-48147'>After getting into <span style='font-family:monospace;'>gdb</span>, press the <span style='font-family:monospace;'>Enter</span> key and if the sample <span style='font-family:monospace;'>.gdbinit</span> section <a href="#subsec_Automate_debugging_steps">7</a> is used, the output should look like:</div>



<div class="lyx_code" id='magicparlabel-48153'><div class="lyx_code_item">---Type &lt;return&gt; to continue, or q &lt;return&gt; to quit---</div>
<div class="lyx_code_item">[f000:fff0] 0x0000fff0 in ?? ()</div>
<div class="lyx_code_item">Breakpoint 1 at 0x7c00: file bootloader.asm, line 6.</div>
<div class="lyx_code_item">(gdb)</div>
</div>


<div class="standard" id='magicparlabel-48162'><span style='font-family:monospace;'>gdb</span> now understand where the instruction at address <span style='font-family:monospace;'>0x7c00</span> is in the assembly source file, thanks to the debug information.</div>
</li></ol>
<div class="section" id='magicparlabel-48163'>Debuggable program on bare metal</div>
<div class="standard" id='magicparlabel-48164'>The process of building a debug-ready executable binary is similar to that of a bootloader, except more involved. Recall that for a debugger to work properly, its debugging information must contain correct address mappings between memory addresses and the source code. <span style='font-family:monospace;'>gcc</span> stores such mapping information in DIE entries, in which it tells <span style='font-family:monospace;'>gdb</span> at which code address corresponds to a line in a source file, so that breakpoints work properly.</div>

<div class="standard" id='magicparlabel-48165'>But first, we need a sample C source file, a very simple one:</div>


<div class='float-listings'><pre class ='listings'>void main() {}</pre></div>


<div class="standard" id='magicparlabel-48171'>Because this is a free standing environment, standard libraries that involve system functions such as <span style='font-family:monospace;'>printf()</span> would not work, because a C runtime does not exist. At this stage, the goal is to correctly jump to main with source code displayed properly in <span style='font-family:monospace;'>gdb</span>, so no fancy C code is needed yet.</div>

<div class="standard" id='magicparlabel-48172'>The next step is updating <span style='font-family:monospace;'>os/Makefile</span>:
<br />

</div>


<div class='float-listings'><pre class ='listings [gnu]make'>BUILD_DIR=../build
OS=$(BUILD_DIR)/os

CFLAGS+=-ffreestanding -nostdlib -gdwarf-4 -m32 -ggdb3

OS_SRCS := $(wildcard *.c)
OS_OBJS := $(patsubst %.c, $(BUILD_DIR)/%.o, $(OS_SRCS))

all: $(OS)

$(BUILD_DIR)/%.o: %.c
	gcc $(CFLAGS) -c  $&lt; -o $@

$(OS): $(OS_OBJS)
	ld -m elf_i386 -Tos.lds $(OS_OBJS) -o $@

clean:
	rm $(OS_OBJS)</pre></div>


<div class="standard" id='magicparlabel-48195'>We updated the Makefile with the following changes:</div>

<ul class="itemize" id='magicparlabel-48196'><li class="itemize_item">Add a <span style='font-family:monospace;'>CFLAGS</span> variable for passing options to <span style='font-family:monospace;'>gcc</span>.</li>
<li class="itemize_item">Instead of the rule to build assembly source code earlier, it is replaced with a C version with a recipe to build C source files. The <span style='font-family:monospace;'>CFLAGS</span> variable makes the <span style='font-family:monospace;'>gcc</span> command in the recipe looks cleaner regardless how many options are added.</li>
<li class="itemize_item">Add a linking command for building the final executable binary of the operating system with a custom linker script <span style='font-family:monospace;'>os.lds</span>.</li>
</ul>
<div class="standard" id='magicparlabel-48199'>Everything looks good, except for the linker script part. Why is it needed? The linker script is required for controlling at which physical memory address the operating system binary appears in the memory, so the linker can jump to the operating system code and execute it. To complete this requirement, the default linker script used by <span style='font-family:monospace;'>gcc</span> would not work as it assumes the compiled executable runs inside an existing operating system, while we are writing an operating system itself.</div>

<div class="standard" id='magicparlabel-48200'>The next question is, what will be the content in the linker script? To answer this question, we must understand what goals to achieve with the linker script:</div>

<ul class="itemize" id='magicparlabel-48201'><li class="itemize_item">For the bootloader to correctly jump to and execute the operating system code.</li>
<li class="itemize_item">For <span style='font-family:monospace;'>gdb</span> to debug correctly with the operating system source code.</li>
</ul>
<div class="standard" id='magicparlabel-48203'>To achieve the goals, we must devise a design of a suitable memory layout for the operating system. Recall that the bootloader developed in chapter <a href="#chap_Bootloader">II</a> can already load a simple binary compiled from the sample Assembly program <span style='font-family:monospace;'>sample.asm</span>. To load the operating system, we can simply throw binary compiled from <span style='font-family:monospace;'>sample.asm</span> with the binary compiled from <span style='font-family:monospace;'>os.c</span> above.</div>

<div class="standard" id='magicparlabel-48204'>If only it is that simple. The idea is correctly, but not enough. The goals implies the following constraints:</div>

<ol class="enumerate" id='magicparlabel-48205'><li class="enumerate_item">The operating system code is written in C and compiled as an ELF executable binary. It means, the bootloader needs to retrieve correct entry address from the ELF header.</li>
<li class="enumerate_item">To debug properly with <span style='font-family:monospace;'>gdb</span>, the debug info must contain correct mappings between instruction addresses and source code.</li>
</ol>
<div class="standard" id='magicparlabel-48207'>Thanks to the understanding of ELF and DWARF acquire in the earlier chapters, we can certainly modify the bootloader and create an executable binary that satisfy the above constraint. We will solve these problems one by one.</div>
<div class="subsection" id='magicparlabel-48208'>Loading an ELF binary from a bootloader</div>
<div class="standard" id='magicparlabel-48209'>Earlier we examined that an ELF header contains a entry address of a program. That information is 0x18 bytes away from the beginning of an ELF header, according to <span style='font-family:monospace;'>man elf</span> :
<br />

</div>


<div class='float-listings'><pre class ='listings C'>typedef struct {
               unsigned char e_ident[EI_NIDENT];
               uint16_t      e_type;
               uint16_t      e_machine;
               uint32_t      e_version;
               ElfN_Addr     e_entry;
               ElfN_Off      e_phoff;
               ElfN_Off      e_shoff;
               uint32_t      e_flags;
               uint16_t      e_ehsize;
               uint16_t      e_phentsize;
               uint16_t      e_phnum;
               uint16_t      e_shentsize;
               uint16_t      e_shnum;
               uint16_t      e_shstrndx;
           } ElfN_Ehdr;</pre></div>


<div class="standard" id='magicparlabel-48230'>The offset from the start of the struct to the start of <span style='font-family:monospace;'>e_entry</span> is:</div>

<ul class="itemize" id='magicparlabel-48231'><li class="itemize_item">16 bytes of <span style='font-family:monospace;'>e_ident[EI_NIDENT]:</span>
<br />



<div class="lyx_code" id='magicparlabel-48232'><div class="lyx_code_item">#define EI_NIDENT 16</div>
</div>
</li><li class="itemize_item">2 bytes of e_type</li>
<li class="itemize_item">2 bytes of e_machine</li>
<li class="itemize_item">4 bytes of e_version</li>
</ul>
<div class="standard" style='text-align: center;' id='magicparlabel-48236'><math display="block" xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mstyle mathvariant='monospace'>
   <mrow><mi>O</mi><mi>f</mi><mi>f</mi><mi>s</mi><mi>e</mi><mi>t</mi><mo>=</mo><mn>16</mn><mo>+</mo><mn>2</mn><mo>+</mo><mn>2</mn><mo>+</mo><mn>4</mn><mo>=</mo><mn>24</mn><mo>=</mo><mn>0</mn><mi>x</mi><mn>18</mn>
   </mrow>
  </mstyle>
 </mrow></math></div>

<div class="standard" id='magicparlabel-48237'><span style='font-family:monospace;'>e_entry</span> is of type <span style='font-family:monospace;'>ElfN_Addr</span>, in which <span style='font-family:monospace;'>N</span> is either <span style='font-family:monospace;'>32</span> or <span style='font-family:monospace;'>64</span>. We are writing 32-bit operating system, in this case <math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mrow><mi>N</mi><mo>=</mo><mn>32</mn>
  </mrow>
 </mrow></math> and so <span style='font-family:monospace;'>ElfN_Addr</span> is <span style='font-family:monospace;'>Elf32_Addr</span>, which is 4 bytes long.</div>

<div class="example" id='magicparlabel-48238'><div class="example_item"><span class="example_label">Example 0.81.</span>
With any program, such as this simple one:
<br />

</div>

<div class='float-listings'><pre class ='listings'>#include &lt;stdio.h&gt;

int main(int argc, char *argv[])
{
    printf("hello world!\n");
    return 0;
}</pre></div>


<div class="standard" id='magicparlabel-48250'>We can retrieve the entry address with a human-readable presentation using <span style='font-family:monospace;'>readelf</span>:</div>



<div class="standard" id='magicparlabel-48256'><span style='font-family:monospace;'>$ gcc hello.c -o hello</span></div>

<div class="standard" id='magicparlabel-48257'><span style='font-family:monospace;'>$ readelf -h hello</span></div>





<div class="lyx_code" id='magicparlabel-48268'><div class="lyx_code_item">ELF Header:</div>
<div class="lyx_code_item">  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 </div>
<div class="lyx_code_item">  .... output omitted ....</div>
<div class="lyx_code_item">  Entry point address:               0x400430</div>
<div class="lyx_code_item">  .... output omitted ....</div>
</div>


<div class="standard" id='magicparlabel-48278'>Or in raw binary with <span style='font-family:monospace;'>hd</span>:</div>



<div class="standard" id='magicparlabel-48284'><span style='font-family:monospace;'>$ hd hello | less</span></div>





<div class="lyx_code" id='magicparlabel-48295'><div class="lyx_code_item">00000000  7f 45 4c 46 02 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|</div>
<div class="lyx_code_item">00000010  02 00 3e 00 01 00 00 00  30 04 40 00 00 00 00 00  |..&gt;.....0.@.....|</div>
<div class="lyx_code_item">.........</div>
</div>


<div class="standard" id='magicparlabel-48303'>The offset <span style='font-family:monospace;'>0x18</span> is the start of the least-significant byte of <span style='font-family:monospace;'>e_entry</span>, which is <span style='font-family:monospace;'>0x30</span>, followed by 04 40 00, together in reverse makes the address <span style='font-family:monospace;'>0x00400430</span>.</div>
</div>
<div class="standard" id='magicparlabel-48304'>Now that we know where the position of the entry address in the ELF header, it is easy to modify the bootloader made in section <a href="#subsec_Read_and_load">II</a> to retrieve and jump to the address:
<br />

</div>


<div class='float-listings'><pre class ='listings [x86masm]Assembler'>;******************************************
; Bootloader.asm
; A Simple Bootloader
;******************************************
bits 16
start: jmp boot

;; constant and variable definitions
msg	db	"Welcome to My Operating System!", 0ah, 0dh, 0h

boot:
  cli	; no interrupts
  cld	; all that we need to init

  mov		ax, 50h

  ;; set the buffer
  mov	es, ax
  xor	bx, bx

  mov	al, 2					      ; read 2 sector
  mov	ch, 0                          ; we are reading the second sector past us,
                                        ; so its still on track 0
  mov	cl, 2					      ; sector to read (The second sector)
  mov	dh, 0					      ; head number
  mov	dl, 0					      ; drive number. Remember Drive 0 is floppy drive.

  mov	ah, 0x02			           ; read floppy sector function
  int	0x13					       ; call BIOS - Read the sector
  jmp	[500h + 18h]				  ; jump and execute the sector!

  hlt	; halt the system

  ; We have to be 512 bytes. Clear the rest of the bytes with 0
  times 510 - ($-$$) db 0
  dw 0xAA55				  ; Boot Signiture</pre></div>


<div class="standard" id='magicparlabel-48345'>It is as simple as that! First, we load the operating system binary at <span style='font-family:monospace;'>0x500</span>, then we retrieve the entry address at the offset <span style='font-family:monospace;'>0x18</span> from <span style='font-family:monospace;'>0x500</span>, by first calculating the expression <math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mrow><mn>500</mn><mi>h</mi><mo>+</mo><mn>18</mn><mi>h</mi><mo>=</mo><mn>518</mn><mi>h</mi>
  </mrow>
 </mrow></math> to get the actual in-memory address, then retrieve the content by dereference it.</div>

<div class="standard" id='magicparlabel-48346'>The first part is done. For the next part, we need to build an ELF operating system image for the bootloader to load. The first step is to create a linker script:</div>


<div class='float-listings'><pre class ='listings bash'>ENTRY(main);

PHDRS
{
  headers PT_PHDR FILEHDR PHDRS;
  code PT_LOAD;
}

SECTIONS
{
  .text 0x500: { *(.text)  } :code
  .data :  { *(.data)  }
  .bss :  { *(.bss) }
  /DISCARD/ : { *(.eh_frame) }
}</pre></div>


<div class="standard" id='magicparlabel-48366'>The script is straight-forward and remains almost the same as before. The only differences are:</div>

<ul class="itemize" id='magicparlabel-48367'><li class="itemize_item"><span style='font-family:monospace;'>main</span> are explicitly specified as the entry point by specifying <span style='font-family:monospace;'>ENTRY(main)</span>.</li>
<li class="itemize_item">.<span style='font-family:monospace;'>text</span> is explicitly specified with <span style='font-family:monospace;'>0x500</span> as its <em>virtual memory address</em> since we load the operating system image at <span style='font-family:monospace;'>0x500</span>.</li>
</ul>
<div class="standard" id='magicparlabel-48369'>After putting the script, we compile with <span style='font-family:monospace;'>make</span> and it should work smoothly:</div>



<div class="standard" id='magicparlabel-48375'><span style='font-family:monospace;'>$ make clean; make</span></div>

<div class="standard" id='magicparlabel-48376'><span style='font-family:monospace;'>$ readelf -l  build/os/os </span></div>





<div class="lyx_code" id='magicparlabel-48387'><div class="lyx_code_item">Elf file type is EXEC (Executable file)</div>
<div class="lyx_code_item">Entry point 0x500</div>
<div class="lyx_code_item">There are 2 program headers, starting at offset 52</div>
<div class="lyx_code_item">Program Headers:</div>
<div class="lyx_code_item">  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align</div>
<div class="lyx_code_item">  PHDR           0x000000 0x00000000 0x00000000 0x00074 0x00074 R   0x4</div>
<div class="lyx_code_item">  LOAD           0x000500 0x00000500 0x00000500 0x00040 0x00040 R E 0x1000</div>
<div class="lyx_code_item"> Section to Segment mapping:</div>
<div class="lyx_code_item">  Segment Sections...</div>
<div class="lyx_code_item">   00     </div>
<div class="lyx_code_item">   01     .text</div>
</div>


<div class="standard" id='magicparlabel-48403'>All looks good, until we run it. We begin by starting the QEMU virtual machine:</div>



<div class="standard" id='magicparlabel-48409'><span style='font-family:monospace;'>$ make qemu</span></div>



<div class="standard" id='magicparlabel-48415'>Then, start <span style='font-family:monospace;'>gdb</span> and load the debug info (which is also in the same binary file) and set a breakpoint at <span style='font-family:monospace;'>main</span>:</div>



<div class="standard" id='magicparlabel-48421'><span style='font-family:monospace;'>(gdb) symbol-file build/os/os</span></div>

<div class="standard" id='magicparlabel-48422'><span style='font-family:monospace;'>Reading symbols from build/os/os...done.</span></div>

<div class="standard" id='magicparlabel-48423'><span style='font-family:monospace;'>(gdb) b main</span></div>

<div class="standard" id='magicparlabel-48424'><span style='font-family:monospace;'>Breakpoint 2 at 0x500</span></div>



<div class="standard" id='magicparlabel-48430'>Then we start the program:</div>



<div class="standard" id='magicparlabel-48436'><span style='font-family:monospace;'>(gdb) symbol-file build/os/os</span></div>

<div class="standard" id='magicparlabel-48437'><span style='font-family:monospace;'>Reading symbols from build/os/os...done.</span></div>

<div class="standard" id='magicparlabel-48438'><span style='font-family:monospace;'>(gdb) b main</span></div>

<div class="standard" id='magicparlabel-48439'><span style='font-family:monospace;'>Breakpoint 2 at 0x500</span></div>



<div class="standard" id='magicparlabel-48445'>Keep the programming running until it stops at <span style='font-family:monospace;'>main</span>:</div>



<div class="standard" id='magicparlabel-48451'><span style='font-family:monospace;'>(gdb) c</span></div>

<div class="standard" id='magicparlabel-48452'><span style='font-family:monospace;'>Continuing.</span></div>

<div class="standard" id='magicparlabel-48453'><span style='font-family:monospace;'>[ 0:7c00] </span></div>

<div class="standard" id='magicparlabel-48454'><span style='font-family:monospace;'>Breakpoint 1, 0x00007c00 in ?? ()</span></div>

<div class="standard" id='magicparlabel-48455'><span style='font-family:monospace;'>(gdb) c</span></div>

<div class="standard" id='magicparlabel-48456'><span style='font-family:monospace;'>Continuing.</span></div>

<div class="standard" id='magicparlabel-48457'><span style='font-family:monospace;'>[ 0: 500] </span></div>

<div class="standard" id='magicparlabel-48458'><span style='font-family:monospace;'>Breakpoint 2, main () at main.c:1</span></div>



<div class="standard" id='magicparlabel-48464'>At this point, we switch the layout to the C source code instead of the registers:</div>



<div class="standard" id='magicparlabel-48470'><span style='font-family:monospace;'>(gdb) layout split</span></div>



<div class="standard" id='magicparlabel-48476'><span style='font-family:monospace;'>layout split</span> creates a layout that consists of 3 smaller windows: </div>

<ul class="itemize" id='magicparlabel-48477'><li class="itemize_item">Source window at the top.</li>
<li class="itemize_item">Assembly window in the middle.</li>
<li class="itemize_item">Command window at the bottom.</li>
</ul>
<div class="standard" id='magicparlabel-48480'>After the command, the layout should look like this:</div>



<div class="lyx_code" id='magicparlabel-48486'><div class="lyx_code_item">   ┌──main.c───────────────────────────────────────────────────────┐</div>
<div class="lyx_code_item">B+&gt;│1       void main(){}                                          │</div>
<div class="lyx_code_item">   │2                                                              │</div>
<div class="lyx_code_item">   │3                                                              │</div>
<div class="lyx_code_item">   │4                                                              │</div>
<div class="lyx_code_item">   │5                                                              │</div>
<div class="lyx_code_item">   │6                                                              │</div>
<div class="lyx_code_item">   │7                                                              │</div>
<div class="lyx_code_item">   │8                                                              │</div>
<div class="lyx_code_item">   │9                                                              │</div>
<div class="lyx_code_item">   │10                                                             │</div>
<div class="lyx_code_item">   │11                                                             │</div>
<div class="lyx_code_item">   │12                                                             │</div>
<div class="lyx_code_item">   │13                                                             │</div>
<div class="lyx_code_item">   │14                                                             │</div>
<div class="lyx_code_item">   │15                                                             │</div>
<div class="lyx_code_item">   │16                                                             │</div>
<div class="lyx_code_item">   └───────────────────────────────────────────────────────────────┘</div>
<div class="lyx_code_item">B+&gt;│0x500 &lt;main&gt;    jg     0x547                                   │</div>
<div class="lyx_code_item">   │0x502 &lt;main+2&gt;  dec    sp                                      │</div>
<div class="lyx_code_item">   │0x503 &lt;main+3&gt;  inc    si                                      │</div>
<div class="lyx_code_item">   │0x504 &lt;main+4&gt;  add    WORD PTR [bx+di],ax                     │</div>
<div class="lyx_code_item">   │0x506           add    WORD PTR [bx+si],ax                     │</div>
<div class="lyx_code_item">   │0x508           add    BYTE PTR [bx+si],al                     │</div>
<div class="lyx_code_item">   │0x50a           add    BYTE PTR [bx+si],al                     │</div>
<div class="lyx_code_item">   │0x50c           add    BYTE PTR [bx+si],al                     │</div>
<div class="lyx_code_item">   │0x50e           add    BYTE PTR [bx+si],al                     │</div>
<div class="lyx_code_item">   │0x510           add    al,BYTE PTR [bx+si]                     │</div>
<div class="lyx_code_item">   │0x512           add    ax,WORD PTR [bx+si]                     │</div>
<div class="lyx_code_item">   │0x514           add    WORD PTR [bx+si],ax                     │</div>
<div class="lyx_code_item">   │0x516           add    BYTE PTR [bx+si],al                     │</div>
<div class="lyx_code_item">   │0x518           add    BYTE PTR [di],al                        │</div>
<div class="lyx_code_item">   │0x51a           add    BYTE PTR [bx+si],al                     │</div>
<div class="lyx_code_item">   │0x51c           xor    al,0x0                                  │</div>
<div class="lyx_code_item">   │0x51e           add    BYTE PTR [bx+si],al                     │</div>
<div class="lyx_code_item">   └───────────────────────────────────────────────────────────────┘</div>
<div class="lyx_code_item">remote Thread 1 In: main                            L1    PC: 0x500 </div>
<div class="lyx_code_item">[f000:fff0] 0x0000fff0 in ?? ()</div>
<div class="lyx_code_item">Breakpoint 1 at 0x7c00</div>
<div class="lyx_code_item">(gdb) symbol-file build/os/os</div>
<div class="lyx_code_item">Reading symbols from build/os/os...done.</div>
<div class="lyx_code_item">(gdb) b main</div>
<div class="lyx_code_item">Breakpoint 2 at 0x500: file main.c, line 1.</div>
<div class="lyx_code_item">(gdb) c</div>
<div class="lyx_code_item">Continuing.</div>
<div class="lyx_code_item">[   0:7c00] </div>
<div class="lyx_code_item">Breakpoint 1, 0x00007c00 in ?? ()</div>
<div class="lyx_code_item">(gdb) c</div>
<div class="lyx_code_item">Continuing.</div>
<div class="lyx_code_item">[   0: 500] </div>
<div class="lyx_code_item">Breakpoint 2, main () at main.c:1</div>
<div class="lyx_code_item">(gdb) layout split</div>
<div class="lyx_code_item">(gdb) </div>
</div>


<div class="standard" id='magicparlabel-48544'>Something wrong is going on here. It is not the generated assembly code for function call as it is known in section <a href="#subsec_Function_Call_and">I</a>. It is definitely wrong, verified with <span style='font-family:monospace;'>objdump</span>:</div>



<div class="standard" id='magicparlabel-48550'><span style='font-family:monospace;'>$ objdump -D build/os/os | less</span></div>





<div class="lyx_code" id='magicparlabel-48561'><div class="lyx_code_item">/home/tuhdo/workspace/os/build/os/os:     file format elf32-i386</div>
<div class="lyx_code_item">Disassembly of section .text:</div>
<div class="lyx_code_item">00000500 &lt;main&gt;:</div>
<div class="lyx_code_item"> 500:   55                      push   %ebp</div>
<div class="lyx_code_item"> 501:   89 e5                   mov    %esp,%ebp</div>
<div class="lyx_code_item"> 503:   90                      nop</div>
<div class="lyx_code_item"> 504:   5d                      pop    %ebp</div>
<div class="lyx_code_item"> 505:   c3                      ret</div>
<div class="lyx_code_item">.... remaining output omitted ....</div>
</div>


<div class="standard" id='magicparlabel-48575'>The assembly code of <span style='font-family:monospace;'>main</span> is completely different. This is why understanding assembly code and its relation to high-level languages are important. Without the knowledge, we would have used <span style='font-family:monospace;'>gdb</span> as a simple source-level debugger without bother looking at the assembly code from the split layout. As a consequence, the true cause of the non-working code could never been discovered.</div>
<div class="subsection" id='magicparlabel-48576'>Debugging the memory layout</div>
<div class="standard" id='magicparlabel-48577'>What is the reason for the incorrect Assembly code in <span style='font-family:monospace;'>main</span> displayed by <span style='font-family:monospace;'>gdb</span>? There can only be one cause: the bootloader jumped to the wrong addresses. But why was the address wrong? We made the <span style='font-family:monospace;'>.text</span> section at address <span style='font-family:monospace;'>0x500</span>, in which <span style='font-family:monospace;'>main</span> code is in the first byte for executing, and instructed the bootloader to retrieve the address at the offset <span style='font-family:monospace;'>0x18</span>, then jump to the entry address.</div>
<div class='float-marginfigure'><div class="plain_layout" id='magicparlabel-48581'><span class='float-caption-Standard float-caption float-caption-standard'>MarginFigure 14:  Memory state after loading 2<sup class="script_superscript">nd</sup> sector.</span><a id="mem_state_bootloader" />
</div>

<div class="plain_layout" id='magicparlabel-48590'><img src='34_img_08_mem_after_load_os.png' alt='image: 34_img_08_mem_after_load_os.png' />
</div>
</div>


<div class="standard" id='magicparlabel-48591'>Then, it might be possible for the bootloader to load the operating system address at the wrong address. But then, we explicitly set the load address to <span style='font-family:monospace;'>50h:00</span>, which is <span style='font-family:monospace;'>0x500</span>, and so the correct address was used. After the bootloader loas the 2<sup class="script_superscript">nd</sup> sector, the in-memory state should look like the figure <a href="#mem_state_bootloader">48</a>:</div>

<div class="standard" id='magicparlabel-48596'>Here is the problem: <span style='font-family:monospace;'>0x500</span> is the start of the ELF header. The bootloader actually loads the 2<sup class="script_superscript">nd</sup> sector, which stores the executable as a whole, to <span style='font-family:monospace;'>0x500</span>. Clearly, .<span style='font-family:monospace;'>text</span> section, where <span style='font-family:monospace;'>main</span> resides, is far from <span style='font-family:monospace;'>0x500</span>. Since the in-memory entry address of the executable binary is <span style='font-family:monospace;'>0x500</span>, <span style='font-family:monospace;'>.text</span> should be at <span style='font-family:monospace;'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mstyle mathvariant='monospace'>
   <mrow><mn>0</mn><mi>x</mi><mn>500</mn><mo>+</mo><mn>0</mn><mi>x</mi><mn>500</mn><mo>=</mo><mn>0</mn><mi>x</mi><mi>a</mi><mn>00</mn>
   </mrow>
  </mstyle>
 </mrow></math></span>. However, the entry address recorded in the ELF header remains <span style='font-family:monospace;'>0x500</span> and as a result, the bootloader jumped there instead of <span style='font-family:monospace;'>0xa00</span>. This is one of the issues that must be fixed.</div>

<div class="standard" id='magicparlabel-48601'>The other issue is the mapping between debug info and the memory address. Because the debug info is compiled with the assumed offset <span style='font-family:monospace;'>0x500</span> that is the start of <span style='font-family:monospace;'>.text</span> section, but due to actual loading, the offset is pushed another <span style='font-family:monospace;'>0x500</span> bytes, making the address actually is at <span style='font-family:monospace;'>0xa00</span>. This memory mismatch renders the debug info useless.</div>


<div class='float-figure'><div class="plain_layout" id='magicparlabel-48606'><span class='float-caption-Standard float-caption float-caption-standard'>Figure 0.23:  Wrong symbol-memory mappings in debug info.</span></div>

<div class="plain_layout" id='magicparlabel-48611'><img src='35_img_08_debug_info_bad_position.png' alt='image: 35_img_08_debug_info_bad_position.png' />
</div>
</div>


<div class="standard" id='magicparlabel-48612'>In summary, we have 2 problems to overcome:</div>

<ul class="itemize" id='magicparlabel-48613'><li class="itemize_item">Fix the entry address to account for the extra offset when loading into memory.</li>
<li class="itemize_item">Fix the debug info to account for the extra offset when loading into memory.</li>
</ul>
<div class="standard" id='magicparlabel-48615'>First, we need to know the actual layout of the compiled executable binary:l</div>



<div class="standard" id='magicparlabel-48621'><span style='font-family:monospace;'>$ readelf -l build/os/os</span></div>





<div class="lyx_code" id='magicparlabel-48632'><div class="lyx_code_item">Elf file type is EXEC (Executable file)</div>
<div class="lyx_code_item">Entry point 0x500</div>
<div class="lyx_code_item">There are 2 program headers, starting at offset 52</div>
<div class="lyx_code_item">Program Headers:</div>
<div class="lyx_code_item">  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align</div>
<div class="lyx_code_item">  PHDR           0x000000 0x00000000 0x00000000 0x00074 0x00074 R   0x4</div>
<div class="lyx_code_item">  LOAD           0x000500 0x00000500 0x00000500 0x00040 0x00040 R E 0x1000</div>
<div class="lyx_code_item"> Section to Segment mapping:</div>
<div class="lyx_code_item">  Segment Sections...</div>
<div class="lyx_code_item">   00     </div>
<div class="lyx_code_item">   01     .text</div>
</div>


<div class="standard" id='magicparlabel-48648'>Notice the <span style='font-family:monospace;'>Offset</span> and the <span style='font-family:monospace;'>VirtAddress</span> fields: both have the same value. This is problematic, as the entry address and the memory addresses in the debug info depend on <span style='font-family:monospace;'>VirtAddr</span> field, but the <span style='font-family:monospace;'>Offset</span> having the same value destroys the validity of <span style='font-family:monospace;'>VirtAddr</span><div class="foot"><span class="foot_label">49</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-48652'>The offset is the distance in bytes between the beginning of the file, the address 0, to the beginning address of a segment or a section.</div>
</div></div> because it means that the real in-memory address will always be greater than the <span style='font-family:monospace;'>VirtAddr</span>. </div>

<div class="standard" id='magicparlabel-48653'>If we try to adjust the virtual memory address of the <span style='font-family:monospace;'>.text</span> section in the linker script <span style='font-family:monospace;'>os.lds</span>, whatever value we set also sets the <span style='font-family:monospace;'>Offset</span> to the same value, until we set it to some value equal or greater than <span style='font-family:monospace;'>0x1074</span>:</div>



<div class="lyx_code" id='magicparlabel-48659'><div class="lyx_code_item">Elf file type is EXEC (Executable file)</div>
<div class="lyx_code_item">Entry point 0x1074</div>
<div class="lyx_code_item">There are 2 program headers, starting at offset 52</div>
<div class="lyx_code_item">Program Headers:</div>
<div class="lyx_code_item">  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align</div>
<div class="lyx_code_item">  PHDR           0x000000 0x00000000 0x00000000 0x00074 0x00074 R   0x4</div>
<div class="lyx_code_item">  LOAD           0x000074 0x00001074 0x00001074 0x00006 0x00006 R E 0x1000</div>
<div class="lyx_code_item"> Section to Segment mapping:</div>
<div class="lyx_code_item">  Segment Sections...</div>
<div class="lyx_code_item">   00     </div>
<div class="lyx_code_item">   01     .text </div>
</div>


<div class="standard" id='magicparlabel-48675'>If we adjust the virtual address to <span style='font-family:monospace;'>0x1073</span>, both the <span style='font-family:monospace;'>Offset</span> and <span style='font-family:monospace;'>VirtAddr</span> still share the same value:</div>



<div class="lyx_code" id='magicparlabel-48681'><div class="lyx_code_item">Elf file type is EXEC (Executable file)</div>
<div class="lyx_code_item">Entry point 0x1073</div>
<div class="lyx_code_item">There are 2 program headers, starting at offset 52</div>
<div class="lyx_code_item">Program Headers:</div>
<div class="lyx_code_item">  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align</div>
<div class="lyx_code_item">  PHDR           0x000000 0x00000000 0x00000000 0x00074 0x00074 R   0x4</div>
<div class="lyx_code_item">  LOAD           0x001073 0x00001073 0x00001073 0x00006 0x00006 R E 0x1000</div>
<div class="lyx_code_item"> Section to Segment mapping:</div>
<div class="lyx_code_item">  Segment Sections...</div>
<div class="lyx_code_item">   00     </div>
<div class="lyx_code_item">   01     .text </div>
</div>


<div class="standard" id='magicparlabel-48697'>The key to answer such phenonemon is in the <span style='font-family:monospace;'>Align</span> field. The value <span style='font-family:monospace;'>0x1000</span> indicates that the offset address of the segment should be divisible by <span style='font-family:monospace;'>0x1000</span>, or if the distance between segment is divisible by <span style='font-family:monospace;'>0x1000</span>, the linker removes such distance to save the binary size. We can do some experiments to verify this claim<div class="foot"><span class="foot_label">50</span><div class="foot_inner"><div class="plain_layout" id='magicparlabel-48701'>All the outputs are produced by the command:</div>

<div class="plain_layout" id='magicparlabel-48702'><span style='font-family:monospace;'>$ readelf -l build/os/os</span></div>
</div></div>:</div>

<ul class="itemize" id='magicparlabel-48703'><li class="itemize_item">By setting the virtual address of <span style='font-family:monospace;'>.text</span> to <span style='font-family:monospace;'>0x0</span> to <span style='font-family:monospace;'>0x73</span> (in <span style='font-family:monospace;'>os.lds</span>), the offset starts from <span style='font-family:monospace;'>0x1000</span> to <span style='font-family:monospace;'>0x1073</span>, accordingly. For example, by setting it to <span style='font-family:monospace;'>0x0</span>:
<br />




<div class="lyx_code" id='magicparlabel-48709'><div class="lyx_code_item">Elf file type is EXEC (Executable file)</div>
<div class="lyx_code_item">Entry point 0x0</div>
<div class="lyx_code_item">There are 2 program headers, starting at offset 52</div>
<div class="lyx_code_item">Program Headers:</div>
<div class="lyx_code_item">  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align</div>
<div class="lyx_code_item">  PHDR           0x000000 0x00000000 0x00000000 0x00074 0x00074 R   0x4</div>
<div class="lyx_code_item">  LOAD           0x001000 0x00000000 0x00000000 0x00006 0x00006 R E 0x1000</div>
<div class="lyx_code_item"> Section to Segment mapping:</div>
<div class="lyx_code_item">  Segment Sections...</div>
<div class="lyx_code_item">   00     </div>
<div class="lyx_code_item">   01     .text </div>
</div>


<div class="standard" id='magicparlabel-48725'>By default, if we do not specify any virtual address, the offset stays at <span style='font-family:monospace;'>0x1000</span> because <span style='font-family:monospace;'>0x1000</span> is the perfect offset to satisfy the alignment constraint. Any addition from <span style='font-family:monospace;'>0x1</span> to <span style='font-family:monospace;'>0x73</span> makes the segment misaligned, but the linker keeps it anyway because it is told so.</div>
</li><li class="itemize_item">By setting the virtual address of <span style='font-family:monospace;'>.text</span> to <span style='font-family:monospace;'>0x74</span> (in <span style='font-family:monospace;'>os.lds</span>):
<br />




<div class="lyx_code" id='magicparlabel-48732'><div class="lyx_code_item">Elf file type is EXEC (Executable file)</div>
<div class="lyx_code_item">Entry point 0x74</div>
<div class="lyx_code_item">There are 2 program headers, starting at offset 52</div>
<div class="lyx_code_item">Program Headers:</div>
<div class="lyx_code_item">  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align</div>
<div class="lyx_code_item">  PHDR           0x000000 0x00000000 0x00000000 0x00074 0x00074 R   0x4</div>
<div class="lyx_code_item">  LOAD           0x000074 0x00000074 0x00000074 0x00006 0x00006 R E 0x1000</div>
<div class="lyx_code_item"> Section to Segment mapping:</div>
<div class="lyx_code_item">  Segment Sections...</div>
<div class="lyx_code_item">   00     </div>
<div class="lyx_code_item">   01     .text </div>
</div>


<div class="standard" id='magicparlabel-48748'><span style='font-family:monospace;'>PHDR</span> is <span style='font-family:monospace;'>0x74</span> bytes in size, so if <span style='font-family:monospace;'>LOAD</span> starts at <span style='font-family:monospace;'>0x1074</span>, the distance between the <span style='font-family:monospace;'>PHDR</span> segment and <span style='font-family:monospace;'>LOAD</span> segment is <span style='font-family:monospace;'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mstyle mathvariant='monospace'>
   <mrow><mn>0</mn><mi>x</mi><mn>1074</mn><mo>-</mo><mn>0</mn><mi>x</mi><mn>74</mn><mo>=</mo><mn>0</mn><mi>x</mi><mn>1000</mn>
   </mrow>
  </mstyle>
 </mrow></math></span> bytes. To save space, it removes that extra <span style='font-family:monospace;'>0x1000</span> bytes.</div>
</li><li class="itemize_item">By setting the virtual address of <span style='font-family:monospace;'>.text</span> to any value between <span style='font-family:monospace;'>0x75</span> and <span style='font-family:monospace;'>0x1073</span> (in <span style='font-family:monospace;'>os.lds</span>), the offset takes the exact values specified, as can be seen in the case of setting to <span style='font-family:monospace;'>0x1073</span> above.</li>
<li class="itemize_item">By setting the virtual address of <span style='font-family:monospace;'>.text</span> to any value equal or greater than <span style='font-family:monospace;'>0x1074</span>: it starts all over again at <span style='font-family:monospace;'>0x74</span>, where the distance is equal to <span style='font-family:monospace;'>0x1000</span> bytes.</li>
</ul>
<div class="standard" id='magicparlabel-48751'>Now we get a hint how to control the values of <span style='font-family:monospace;'>Offset</span> and <span style='font-family:monospace;'>VirtAddr</span> to produce a desired binary layout. What we need is to change the <span style='font-family:monospace;'>Align</span> field to a value with smaller value for finer grain control. It might work out with a binary layout like this:</div>



<div class="lyx_code" id='magicparlabel-48757'><div class="lyx_code_item">Elf file type is EXEC (Executable file)</div>
<div class="lyx_code_item">Entry point 0x600</div>
<div class="lyx_code_item">There are 2 program headers, starting at offset 52</div>
<div class="lyx_code_item">Program Headers:</div>
<div class="lyx_code_item">  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align</div>
<div class="lyx_code_item">  PHDR           0x000000 0x00000000 0x00000000 0x00074 0x00074 R   0x4</div>
<div class="lyx_code_item">  LOAD           0x000100 0x00000600 0x00000600 0x00006 0x00006 R E 0x100</div>
<div class="lyx_code_item"> Section to Segment mapping:</div>
<div class="lyx_code_item">  Segment Sections...</div>
<div class="lyx_code_item">   00     </div>
<div class="lyx_code_item">   01     .text </div>
<div class="lyx_code_item"></div>
</div>


<div class="standard" id='magicparlabel-48774'>The binary will look like figure <a href="#fig_good_bin_layout">50</a> in memory:</div>




<div class='float-figure'><div class="plain_layout" id='magicparlabel-48780'><span class='float-caption-Standard float-caption float-caption-standard'>Figure 0.24:  A good binary layout.</span><a id="fig_good_bin_layout" />
</div>

<div class="plain_layout" id='magicparlabel-48785'><img src='36_img_08_binary_layout_good.png' alt='image: 36_img_08_binary_layout_good.png' />
</div>
</div>


<div class="standard" id='magicparlabel-48786'>If we set the <span style='font-family:monospace;'>Offset</span> field to <span style='font-family:monospace;'>0x100</span> from the beginning of the file and the <span style='font-family:monospace;'>VirtAddr</span> to <span style='font-family:monospace;'>0x600</span>, when loading in memory, the actual memory of .text is <math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mstyle mathvariant='monospace'>
   <mrow><mn>0</mn><mi>x</mi><mn>500</mn><mo>+</mo><mn>0</mn><mi>x</mi><mn>100</mn><mo>=</mo><mn>0</mn><mi>x</mi><mn>600</mn>
   </mrow>
  </mstyle>
 </mrow></math>; <span style='font-family:monospace;'>0x500</span> is the memory location where the bootloader loads into the physical memory and <span style='font-family:monospace;'>0x100</span> is the offset from the end of ELF header to <span style='font-family:monospace;'>.text</span>. The entry address and the debug info will then take the value <span style='font-family:monospace;'>0x600 </span>from the <span style='font-family:monospace;'>VirtAddr</span> field above, which totally matches the actual physical layout. We can do it by changing <span style='font-family:monospace;'>os.lds</span> as follow:</div>


<div class='float-listings'><pre class ='listings bash'>ENTRY(main);

PHDRS
{
  headers PT_PHDR FILEHDR PHDRS;
  code PT_LOAD;
}

SECTIONS
{
  .text 0x600: ALIGN(0x100) { *(.text)  } :code
  .data :  { *(.data)  }
  .bss :  { *(.bss) }
  /DISCARD/ : { *(.eh_frame) }
}</pre></div>


<div class="standard" id='magicparlabel-48806'>The <span style='font-family:monospace;'>ALIGN</span> keyword, as it implies, tells the linker to align a section, thus the segment containing it. However, to make the <span style='font-family:monospace;'>ALIGN</span> keyword has any effect, automatic alignment must be disabled. According to <span style='font-family:monospace;'>man ld</span>:</div>



<div class="lyx_code" id='magicparlabel-48812'><div class="lyx_code_item">-n</div>
<div class="lyx_code_item">--nmagic</div>
<div class="lyx_code_item">    Turn off page alignment of sections, and disable linking against shared    </div>
<div class="lyx_code_item">    libraries.  If the output format supports Unix style magic numbers, mark the </div>
<div class="lyx_code_item">    output as "NMAGIC"</div>
</div>


<div class="standard" id='magicparlabel-48822'>That is, by default, each section is aligned by an operating system page, which is <span style='font-family:monospace;'>4096</span>, or <span style='font-family:monospace;'>0x1000</span> bytes in size. The <span style='font-family:monospace;'>-n</span> or <span style='font-family:monospace;'>-nmagic</span> option disables this behavior, which is needed. We amend the <span style='font-family:monospace;'>ld</span> command used in <span style='font-family:monospace;'>os/Makefile</span>:
<br />

</div>


<div class='float-listings'><pre class ='listings [gnu]make'>..... above content omitted ....
$(OS): $(OS_OBJS)
	ld -m elf_i386 -nmagic -Tos.lds $(OS_OBJS) -o $@</pre></div>


<div class="standard" id='magicparlabel-48830'>Finally, we also need to update the top-level Makefile to write more than one sector into the disk image for the operating system binary, as its size exceeds one sector:</div>



<div class="standard" id='magicparlabel-48836'><span style='font-family:monospace;'>$ ls -l build/os/os</span></div>

<div class="standard" id='magicparlabel-48837'><span style='font-family:monospace;'>-rwxrwxr-x 1 tuhdo tuhdo 9060 Feb 13 21:37 build/os/os</span></div>



<div class="standard" id='magicparlabel-48843'>We update the rule so that the sectors are automatically calculated:
<br />

</div>


<div class='float-listings'><pre class ='listings [gnu]make'>..... above content omitted ....
bootdisk:  bootloader os
	dd if=/dev/zero of=$(DISK_IMG) bs=512 count=2880
	dd conv=notrunc if=$(BOOTLOADER) of=$(DISK_IMG) bs=512 count=1 seek=0
	dd conv=notrunc if=$(OS) of=$(DISK_IMG) bs=512 count=$$(($(shell stat --printf="%s" $(OS))/512)) seek=1</pre></div>


<div class="standard" id='magicparlabel-48853'>After updating the everything, recompiling the executable binary and we get the desired offset and virtual memory at <span style='font-family:monospace;'>0x100</span> and <span style='font-family:monospace;'>0x600</span>, respectively:</div>



<div class="lyx_code" id='magicparlabel-48859'><div class="lyx_code_item">Elf file type is EXEC (Executable file)</div>
<div class="lyx_code_item">Entry point 0x600</div>
<div class="lyx_code_item">There are 2 program headers, starting at offset 52</div>
<div class="lyx_code_item">Program Headers:</div>
<div class="lyx_code_item">  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align</div>
<div class="lyx_code_item">  PHDR           0x000000 0x00000000 0x00000000 0x00074 0x00074 R   0x4</div>
<div class="lyx_code_item">  LOAD           0x000100 0x00000600 0x00000600 0x00006 0x00006 R E 0x100</div>
<div class="lyx_code_item"> Section to Segment mapping:</div>
<div class="lyx_code_item">  Segment Sections...</div>
<div class="lyx_code_item">   00     </div>
<div class="lyx_code_item">   01     .text </div>
</div>

<div class="subsection" id='magicparlabel-48875'>Testing the new binary</div>
<div class="standard" id='magicparlabel-48876'>First, we start the QEMU machine:</div>



<div class="standard" id='magicparlabel-48882'><span style='font-family:monospace;'>$ make qemu</span></div>



<div class="standard" id='magicparlabel-48888'>In another terminal, we start <span style='font-family:monospace;'>gdb</span>, loading the debug info and set a breakpoint at <span style='font-family:monospace;'>main</span>:</div>



<div class="standard" id='magicparlabel-48894'><span style='font-family:monospace;'>$ gdb</span></div>



<div class="standard" id='magicparlabel-48900'>The following output should be produced:</div>



<div class="lyx_code" id='magicparlabel-48906'><div class="lyx_code_item">---Type &lt;return&gt; to continue, or q &lt;return&gt; to quit---</div>
<div class="lyx_code_item">[f000:fff0] 0x0000fff0 in ?? ()</div>
<div class="lyx_code_item">Breakpoint 1 at 0x7c00</div>
<div class="lyx_code_item">Breakpoint 2 at 0x600: file main.c, line 1.</div>
<div class="lyx_code_item"></div>
</div>


<div class="standard" id='magicparlabel-48916'>Then, let <span style='font-family:monospace;'>gdb</span> runs until it hits the <span style='font-family:monospace;'>main</span> function, then we change to the split layout between source and assembly:</div>



<div class="standard" id='magicparlabel-48922'><span style='font-family:monospace;'>(gdb) layout split</span></div>



<div class="standard" id='magicparlabel-48928'>The final terminal output should look like this:</div>



<div class="lyx_code" id='magicparlabel-48934'><div class="lyx_code_item">   ┌──main.c───────────────────────────────────────────────────────┐</div>
<div class="lyx_code_item">B+&gt;│1       void main(){}                                          │</div>
<div class="lyx_code_item">   │2                                                              │</div>
<div class="lyx_code_item">   │3                                                              │</div>
<div class="lyx_code_item">   │4                                                              │</div>
<div class="lyx_code_item">   │5                                                              │</div>
<div class="lyx_code_item">   │6                                                              │</div>
<div class="lyx_code_item">   │7                                                              │</div>
<div class="lyx_code_item">   │8                                                              │</div>
<div class="lyx_code_item">   │9                                                              │</div>
<div class="lyx_code_item">   │10                                                             │</div>
<div class="lyx_code_item">   │11                                                             │</div>
<div class="lyx_code_item">   │12                                                             │</div>
<div class="lyx_code_item">   │13                                                             │</div>
<div class="lyx_code_item">   │14                                                             │</div>
<div class="lyx_code_item">   │15                                                             │</div>
<div class="lyx_code_item">   │16                                                             │</div>
<div class="lyx_code_item">   └───────────────────────────────────────────────────────────────┘</div>
<div class="lyx_code_item">B+&gt;│0x600 &lt;main&gt;    push   bp                                      │</div>
<div class="lyx_code_item">   │0x601 &lt;main+1&gt;  mov    bp,sp                                   │</div>
<div class="lyx_code_item">   │0x603 &lt;main+3&gt;  nop                                            │</div>
<div class="lyx_code_item">   │0x604 &lt;main+4&gt;  pop    bp                                      │</div>
<div class="lyx_code_item">   │0x605 &lt;main+5&gt;  ret                                            │</div>
<div class="lyx_code_item">   │0x606           aaa                                            │</div>
<div class="lyx_code_item">   │0x607           add    BYTE PTR [bx+si],al                     │</div>
<div class="lyx_code_item">   │0x609           add    BYTE PTR [si],al                        │</div>
<div class="lyx_code_item">   │0x60b           add    BYTE PTR [bx+si],al                     │</div>
<div class="lyx_code_item">   │0x60d           add    BYTE PTR [bx+si],al                     │</div>
<div class="lyx_code_item">   │0x60f           add    BYTE PTR [si],al                        │</div>
<div class="lyx_code_item">   │0x611           add    ax,bp                                   │</div>
<div class="lyx_code_item">   │0x613           push   ss                                      │</div>
<div class="lyx_code_item">   │0x614           add    BYTE PTR [bx+si],al                     │</div>
<div class="lyx_code_item">   │0x616           or     al,0x67                                 │</div>
<div class="lyx_code_item">   │0x618           adc    al,BYTE PTR [bx+si]                     │</div>
<div class="lyx_code_item">   │0x61a           add    BYTE PTR [bx+si+0x2],al                 │</div>
<div class="lyx_code_item">   └───────────────────────────────────────────────────────────────┘</div>
<div class="lyx_code_item">remote Thread 1 In: main                            L1    PC: 0x600 </div>
<div class="lyx_code_item">(gdb) c</div>
<div class="lyx_code_item">Continuing.</div>
<div class="lyx_code_item">[   0:7c00] </div>
<div class="lyx_code_item">Breakpoint 1, 0x00007c00 in ?? ()</div>
<div class="lyx_code_item">(gdb) c</div>
<div class="lyx_code_item">Continuing.</div>
<div class="lyx_code_item">[   0: 600] </div>
<div class="lyx_code_item">Breakpoint 2, main () at main.c:1</div>
<div class="lyx_code_item">(gdb) layout split</div>
</div>


<div class="standard" id='magicparlabel-48985'>Now, the displayed assembly is the same as in <span style='font-family:monospace;'>objdump</span>, except the registers are 16-bit ones. This is normal, as <span style='font-family:monospace;'>gdb</span> is operating in 16-bit mode, while <span style='font-family:monospace;'>objdump</span> displays code in 32-bit mode. To make sure, we verify the raw opcode by using <span style='font-family:monospace;'>x</span> command:</div>



<div class="standard" id='magicparlabel-48991'><span style='font-family:monospace;'>(gdb) x/16xb 0x600</span></div>





<div class="lyx_code" id='magicparlabel-49002'><div class="lyx_code_item">0x600 &lt;main&gt;:   0x55    0x89    0xe5    0x90    0x5d    0xc3    0x37</div>
<div class="lyx_code_item">        0x00</div>
<div class="lyx_code_item">0x608:  0x00    0x00    0x04    0x00    0x00    0x00    0x00    0x00</div>
</div>


<div class="standard" id='magicparlabel-49010'>From the assembly window, <span style='font-family:monospace;'>main</span> stops at the address <span style='font-family:monospace;'>0x605</span>. As such, the corresponding bytes from <span style='font-family:monospace;'>0x600</span> to <span style='font-family:monospace;'>0x605</span> are highlighted in red from the output of the command <span style='font-family:monospace;'>x/16xb 0x600</span>. Then, the raw opcode from the <span style='font-family:monospace;'>objdump</span> output:</div>



<div class="standard" id='magicparlabel-49016'><span style='font-family:monospace;'>$ objdump -z -M intel -S -D build/os/os | less</span></div>





<div class="lyx_code" id='magicparlabel-49027'><div class="lyx_code_item">build/os/os:     file format elf32-i386</div>
<div class="lyx_code_item">Disassembly of section .text:</div>
<div class="lyx_code_item">00000600 &lt;main&gt;:</div>
<div class="lyx_code_item">void main(){}</div>
<div class="lyx_code_item"> 600:   55                      push   ebp</div>
<div class="lyx_code_item"> 601:   89 e5                   mov    ebp,esp</div>
<div class="lyx_code_item"> 603:   90                      nop</div>
<div class="lyx_code_item"> 604:   5d                      pop    ebp</div>
<div class="lyx_code_item"> 605:   c3                      ret    </div>
<div class="lyx_code_item">Disassembly of section .debug_info:</div>
<div class="lyx_code_item">...... output omitted ......</div>
</div>


<div class="standard" id='magicparlabel-49043'>Both raw opcode displayed by the two programs are the same. In this case, it proved that <span style='font-family:monospace;'>gdb</span> correctly jumped to the address in <span style='font-family:monospace;'>main</span> for a proper debugging. This is an extremely important milestone. Being able to debug in bare metal will help tremendously in writing an operating system, as a debugger allows a programmer to inspect the internal state of a running machine at each step to verify his code, step by step, to gradually build up a solid understanding. Some professional programmers do not like debuggers, but it is because they understand their domain deep enough to not need to rely on a debugger to verify their code. When encountering new domains, a debugger is indispensable learning tool because of its verifiability.</div>

<div class="standard" id='magicparlabel-49044'>However, even with the aid of debugger, writing an operating system is still not a walk in the park. The debugger may give the access to the machine at one point in time, but it does not give the cause. To find out the root cause, is up to the ability of a programmer. Later in the book, we will learn how to use other debugging techniques, such as using QEMU logging facility to debug CPU exceptions.</div>
<h1 class="part" id='magicparlabel-49045'><span class="part_label">Part III</span> Kernel Programming</h1>
<div class="chapter" id='magicparlabel-49046'>x86 Descriptors</div>
<div class="section" id='magicparlabel-49047'>Basic operating system concepts</div>
<div class="standard" id='magicparlabel-49048'>The first and foremost, OS manages hardware resources. It's easy to see the core features of an OS based on Von Neumann diagram:</div>

<dl class='description' id='magicparlabel-49049'><dt class="description_label">CPU&nbsp;management:</dt>
<dd class="description_item"> allows programs to share CPU for multitasking. </dd>
<dt class="description_label">Memory&nbsp;management:</dt>
<dd class="description_item"> allocates enough storage for programs to run. </dd>
<dt class="description_label">Devices&nbsp;management:</dt>
<dd class="description_item"> detects and communicates with different devices</dd>
</dl>
<div class="standard" id='magicparlabel-49052'>Any OS should be good at the above fundamentals tasks. </div>

<div class="standard" id='magicparlabel-49053'>Another important feature of an OS is to provide an software interface layer, that hides away hardware interfaces, to interface with applications that run on top of that OS. The benefits of such a layer:</div>

<ul class="itemize" id='magicparlabel-49054'><li class="itemize_item">reusability: that is, the same software API can be reused across programs, thus simplifying software development process</li>
<li class="itemize_item">separation of concerns: bugs appear either in application programs, or in the OS; a programmer needs to isolate where the bugs are.</li>
<li class="itemize_item">simplify software development process: provides an easier to use software interface layer with a uniform access to hardware resources across devices, instead of directly using the hardware interface of a particular device.</li>
</ul>
<div class="subsection" id='magicparlabel-49057'>Hardware Abstraction Layer</div>
<div class="standard" id='magicparlabel-49058'>There are so many hardware devices out there, so it's best to leave the hardware engineers how the devices talk to an OS. To achieve this goal, the OS only provides a set of agreed software interfaces between itself and the device driver writers and is called <em>Hardware Abstraction</em> <em>Layer</em>.</div>

<div class="standard" id='magicparlabel-49059'>In C, this software interface is implemented through a structure function pointers. </div>

<div class="standard" id='magicparlabel-49060'>[illustrate with Linux example]</div>
<div class="subsection" id='magicparlabel-49061'>System programming interface </div>
<div class="standard" id='magicparlabel-49062'><em>System programming interfaces</em> are standard interfaces that an OS provides application programs to use its services. For example, if a program wishes to read a file on disk, then it must call a function like <em>open()</em> and let the OS handle the details of talking to the hard disk for retrieving the file.</div>
<div class="subsection" id='magicparlabel-49063'>The need for an Operating System </div>
<div class="standard" id='magicparlabel-49064'>In a way, OS is an overhead, but a necessary one, for a user to tell a computer what to do. When resources in a computer system (CPU, GPU, memory, hard drive...) became big and more complicated, it's tedious to manually manage all the resources.</div>

<div class="standard" id='magicparlabel-49065'>Imagine we have to manually load programs on a computer with 3&thinsp;GB of RAM. We would have to load programs at various fix addresses, and for each program a size must be manually calculated to avoid wasting memory resource, and enough for programs to not overriding each other.</div>

<div class="standard" id='magicparlabel-49066'>Or, when we want to give computer input through the keyboard, without an OS, an application also has to carry code to facilitate the communication with keyboard hardware; each application then handles such keyboard communication on its own. Why should there be such duplications across applications for such standard feature? If you write an accounting software, why should a programmer concern writing a keyboard driver, totally irrelevant to the problem domain?</div>

<div class="standard" id='magicparlabel-49067'>That's why a crucial job of an OS is to hide the complexity of hardware devices, so a program is freed from the burden of maintaining its own code for hardware communication by having a standardized set of interfaces and thus, reduce potential bugs along with faster development time.</div>

<div class="standard" id='magicparlabel-49068'>To write an OS effectively, a programmer need to understand well the underlying computer architecture that programmer are writing an OS for. The first reason is, many OS concepts are supported by the architecture e.g. the concepts of virtual memory are well supported by x86 architecture. If the underlying computer architecture is not well-understood, OS developers are doomed to reinvent it in your OS, and such software-implemented solutions run slower than the hardware version.</div>
<div class="section" id='magicparlabel-49069'>Drivers</div>
<div class="standard" id='magicparlabel-49070'>Drivers are programs that enable an OS to communicate and use features of hardware devices. For example, a keyboard driver enables an OS to get input from keyboard; or a network driver allows a network card to send and receive data packets to and from the Internet.</div>

<div class="standard" id='magicparlabel-49071'>If you only write application programs, you may wonder how can software control hardware devices? As mentioned in Chapter 2, through the hardware-software interface: by writing to a device's registers or to write to ports of a device, through the use of CPU's instructions. </div>
<div class="section" id='magicparlabel-49072'>Userspace and kernel space</div>
<div class="standard" id='magicparlabel-49073'><em>Kernel space</em> refers to the working environment of an OS that only the kernel can access. Kernel space includes the direct communication with hardware, or manipulate privileged memory regions (such as kernel code and data).</div>

<div class="standard" id='magicparlabel-49074'>In contrast, <em>userspace</em> refers to less privileged processes that run above the OS, and is supervised by the OS. To access the kernel facility, user program must go through the standardized system programming interfaces provided by the OS.</div>
<div class="section" id='magicparlabel-49075'>Memory Segment</div>
<div class="section" id='magicparlabel-49076'>Segment Descriptor</div>
<div class="section" id='magicparlabel-49077'>Types of Segment Descriptors</div>
<div class="subsection" id='magicparlabel-49078'>Code and Data descriptors</div>
<div class="subsection" id='magicparlabel-49079'>Task Descriptor</div>
<div class="subsection" id='magicparlabel-49080'>Interrupt Descriptor</div>
<div class="section" id='magicparlabel-49081'>Descriptor Scope</div>
<div class="subsection" id='magicparlabel-49082'>Global Descriptor</div>
<div class="subsection" id='magicparlabel-49083'>Local Descriptor</div>
<div class="section" id='magicparlabel-49084'>Segment Selector</div>
<div class="section" id='magicparlabel-49085'>Enhancement: Bootloader with descriptors</div>
<div class="chapter" id='magicparlabel-49086'>Process</div>
<div class="section" id='magicparlabel-49087'>Concepts</div>
<div class="section" id='magicparlabel-49088'>Process</div>
<div class="subsection" id='magicparlabel-49089'>Task</div>
<div class="standard" id='magicparlabel-49090'>A <em>task</em> is a unit of work that an OS needs to do, similar to how human have tasks to do daily. From a user point of view, a task for a computer to do can be web browsing, document editing, gaming, sending and receiving emails, etc. Since a CPU can only execute sequentially, one instruction after another (fetching from main memory), there must be some way to do many meaningful tasks at once. For that reason, the computer must share the resources e.g. registers, stack, memory, etc, between tasks, since we have many tasks but single and limited resources.</div>
<div class="subsection" id='magicparlabel-49091'>Process</div>
<div class="standard" id='magicparlabel-49092'><em>Process</em> is a data structure that keeps track of the execution state of a task. Task is a general concept, and process is the implementation of a task. In a general-purpose OS, a task is usually a program. For example, when you run Firefox, a process structure is created to keep track of where the stack and the heap allocated for firefox are, where Firefox's code area is and which instruction EIP is holding to execute next, etc. The typical process structure looks like this:</div>

<div class="standard" id='magicparlabel-49093'>[insert process image]</div>

<div class="standard" id='magicparlabel-49094'>Process is a virtual computer, but much more primitive than the virtual machine in virtualization software like Virtual Box, and that's a good thing. Imagine having to run a full-fledged virtual machine for every task; how wasteful of machine resources that would be.. In the view of a running process, its code executes as if it runs directly on hardware. Each process has its own set of register values, which are kept tracked by the OS, and its own contiguous virtual memory space (which is discontiguous in actual physical memory). The code in a process is given virtual memory addresses to read and write from.</div>

<div class="standard" id='magicparlabel-49095'>[ illustrate: - a process looks like a mini Von Neumann - with contiguous memory, each with a color; each cell of a process mapped to distant memory cell in physical memory ]</div>

<div class="standard" id='magicparlabel-49096'>A process can run so much until the OS tells it to temporary stop for other tasks to use the hardware resources. The suspended process can then wait until further notice from the OS. This whole switching process is so fast that a computer user think his computer actually runs tasks in parallel. The program that does the switching between tasks is called a *scheduler*.</div>
<div class="subsection" id='magicparlabel-49097'>Scheduler</div>
<div class="standard" id='magicparlabel-49098'>An OS needs to perform a wide range of different functionalities, e.g. web browsing, document editing, gaming, etc. A <em>scheduler</em> decides which tasks got to run before the others and, for how long, in an efficient manner. Scheduler enables your computer to become a <em>time sharing system</em>, because tasks share CPU execution time and no one process can monopolize the CPU (in practice, it still happens regularly). Without a scheduler, only a single task can be performed at a time.</div>
<div class="subsection" id='magicparlabel-49099'>Context switch</div>
<div class="standard" id='magicparlabel-49100'>When a process is prepared to be switched out for another process to take its place, certain hardware resources i.e. current open files, current register values, etc. must be backed up to later resume that process's execution.</div>
<div class="subsection" id='magicparlabel-49101'>Priority</div>
<div class="standard" id='magicparlabel-49102'><em>Priority</em> is an important metric for OS to decide which task is scheduled to run before the others to allocate appropriate CPU execution time for each task.</div>
<div class="subsection" id='magicparlabel-49103'>Preemptive vs Non-preemptive</div>
<div class="standard" id='magicparlabel-49104'>A <em>preemptive</em> OS can interrupt an executing process and switch to another process.</div>

<div class="standard" id='magicparlabel-49105'>A <em>non-preemtive</em> OS, a task runs until its completion.</div>
<div class="subsection" id='magicparlabel-49106'>Process states</div>
<div class="standard" id='magicparlabel-49107'><em>State</em> is a particular condition of a process, triggered by an action from the scheduler. A process goes through various states during its life cycle. A process typically has these states:</div>

<dl class='description' id='magicparlabel-49108'><dt class="description_label">Run</dt>
<dd class="description_item"> indicating CPU is executing code in this process.</dd>
<dt class="description_label">Sleep</dt>
<dd class="description_item"> (or Suspended): indicating CPU is executing some process else.</dd>
<dt class="description_label">Destroyed:</dt>
<dd class="description_item"> process is done and waiting to be destroyed completely.</dd>
</dl>
<div class="subsection" id='magicparlabel-49111'>procfs</div>
<div class="section" id='magicparlabel-49112'>Threads</div>
<div class="standard" id='magicparlabel-49113'><em>Threads</em> are units of work inside a process that shares the execution environment. A process creates a whole new execution environment with code of its own:</div>

<div class="standard" id='magicparlabel-49114'>[illustration between process and thread, with each process is a big rectangle box and threads nested boxes point to different code region]</div>

<div class="standard" id='magicparlabel-49115'>Instead of creating a completely new process structure in memory, OS simply let the thread uses some of the resources of the parent process that created it. A thread has its own registers, program counter, stack pointer, and its own call stack. Everything else is shared between the threads, such as an address space, heap, static data, and code segments, and file descriptors. Because thread simply reuses existing resources and involve no context switching, it is much faster to create and switch between processes.</div>

<div class="standard" id='magicparlabel-49116'>However, note that the above scheme is just an implementation of thread concept. You can completely treat thread the same as process (hence you can call all processes threads and vice versa). Or you can just back up some resources, whlie leaving some resources shared. It's up to the OS designer to distinguish between threads and processes. Threads are usually implemented as a component of a process.</div>

<div class="standard" id='magicparlabel-49117'>On Linux, a thread is simply a process that shares resources with its parent process; for that reason, a Linux thread is also called *light-weight process*. Or put it another way, a thread in Linux is merely an implementation of a single-threaded process that execute its main program code. A multi-threaded program in Linux is just a process with shared with its single-threaded children processes, each points to different code region of its parent process.</div>

<div class="standard" id='magicparlabel-49118'>[TODO: turn the above table into a diagram]</div>

<div class="standard" id='magicparlabel-49119'>On Windows, threads and processes are two separated entities, so the above description for Linux does not apply. However, the general idea: a thread shares the execution environment, holds.</div>
<div class="section" id='magicparlabel-49120'>Task: x86 concept of a process</div>
<div class="section" id='magicparlabel-49121'>Task Data Structure</div>
<div class="subsection" id='magicparlabel-49122'>Task State Segment</div>
<div class="subsection" id='magicparlabel-49123'>Task Descriptor</div>
<div class="section" id='magicparlabel-49124'>Process Implementation</div>
<div class="subsection" id='magicparlabel-49125'>Requirements</div>
<div class="subsection" id='magicparlabel-49126'>Major Plan</div>
<div class="subsection" id='magicparlabel-49127'>Stage 1: Switch to a task from bootloader</div>
<div class="subsection" id='magicparlabel-49128'>Stage 2: Switch to a task with one function from kernel</div>
<div class="subsection" id='magicparlabel-49129'>Stage 3: Switch to a task with many functions from kernel</div>
<div class="standard" id='magicparlabel-49130'>To implement the concept of a process, a kernel needs to be able to save and restore its machine states for different tasks. </div>

<dl class='description' id='magicparlabel-49131'><dt class="description_label">Description
<br />

</dt>
<dd class="description_item">
<div class="standard" id='magicparlabel-49132'>[Describe task switching mechanism involving LDT and GDT]</div>

<div class="standard" id='magicparlabel-49133'>qasdfasdf asd</div>
</dd><dt class="description_label">Constraints</dt>
<dd class="description_item"></dd>
<dt class="description_label">Design</dt>
<dd class="description_item"></dd>
<dt class="description_label">Implementation&nbsp;plan</dt>
<dd class="description_item"></dd>
</dl>
<div class="section" id='magicparlabel-49137'>Milestone: Code Refactor</div>
<div class="chapter" id='magicparlabel-49138'>Interrupt</div>
<div class="chapter" id='magicparlabel-49139'>Memory management</div>
<div class="subsection" id='magicparlabel-49140'>Address Space</div>
<div class="standard" id='magicparlabel-49141'><em>Address space</em> is the set of all addressable memory locations. There are 2 types of address spaces in physical memory address:</div>

<ul class="itemize" id='magicparlabel-49142'><li class="itemize_item">One for memory: </li>
<li class="itemize_item">One for I/O:</li>
</ul>
<div class="standard" id='magicparlabel-49144'>Each process has its own address space to do whatever it wants, as long as the physical memory is not exhausted. This address space is called <em>virtual memory</em>.</div>
<div class="subsection" id='magicparlabel-49145'>Virtual Memory</div>
<div class="standard" id='magicparlabel-49146'>Physical memory is a contagious memory locations that has a simple mapping between a physical memory address and its corresponding location in memory, decoded by memory controller. On the other hand, *virtual memory* does not have direct mapping between a memory address and the corresponding physical memory location, even though it appears contagious from the view of an userspace program. Instead, virtual memory address is translated by OS into an actual physical memory address. For that reason, even addresses appear next to each other in virtual memory space, they are scattered through out the physical memory.</div>

<div class="standard" id='magicparlabel-49147'>Why virtual memory is needed? Because virtual memory reduces the complexity of programming, by giving each program an illusion that it has its own separate "physical" memory to work with. Without virtual memory, programs must know and agree with each other their own memory regions to not accidentally destroy each other.</div>

<div class="standard" id='magicparlabel-49148'>[illustration a world without virtual memory]</div>

<div class="standard" id='magicparlabel-49149'>Virtual memory also enables a more secured OS, as application programs cannot manipulate main memory directly, so malicious programs won't cause havocs by destroying main memory and possibly hardware devices, by gaining access to hardware I/O ports.</div>

<div class="standard" id='magicparlabel-49150'>Another benefit is that virtual memory can extend beyond physical memory, by storing its data to hard disk. By swapping some of unused memory (i.e. inactive memory of a sleeping process), the system gains some free memory to continue running, so no data is destroyed. Otherwise, the OS is forced to kill a random user process to free up some memory, and you may lose unsaved work that belongs to the killed process. However, this process can significantly slow down the whole system because of Von Neumann bottleneck. In the old days, when memory was scarce, it was useful.</div>
<div class="chapter" id='magicparlabel-49151'>File System</div>
<div class="standard" id='magicparlabel-49152'><em>File system</em> is a mechanism on how raw bytes in a storage device can be meaningfully managed. That is, a group of bytes at specific locations in a storage device can be allocated for a purpose e.g. storing raw ASCII document, and later the exact chunks of bytes can be retrieved correctly. File system manages many such groups of bytes. It's helpful to think a file system as a database that maps between high level information and specific locations in a hard disk, similar to how business information is mapped to a specific row in a table. The high level information that is relevant to a file system is organized as *files* and *directories*.</div>

<div class="standard" id='magicparlabel-49153'>[illustration between a file system and a database table to see how they are similar]</div>

<div class="standard" id='magicparlabel-49154'><em>File</em> is an entity that includes two components: metadata and the actual raw data. <em>Metadata</em> is the information describes the properties of the raw data associated with the file; raw data are real content of a file. <em>Directory</em> is a file that holds a group of files and also child directories. Together, they create a file hierarchy system as commonly seen in Windows or Linux.</div>
<div class="subsection" id='magicparlabel-49155'>Example: Ex2 filesystem</div>



<div class='index chapter'><div class="chapter">Index</div><ul class='main'><li class='main'>Abstraction: <a href='#magicparlabel-30246'>1</a></li>
<li class='main'>Application-Specific Integrated Circuit: <a href='#magicparlabel-30533'>1</a></li>
<li class='main'>ASIC: <a href='#magicparlabel-30537'>1</a></li>
<li class='main'>assembler: <a href='#magicparlabel-30170'>1</a></li>
<li class='main'>backtrace: <a href='#magicparlabel-44375'>1</a></li>
<li class='main'>bit field: <a href='#magicparlabel-37678'>1</a></li>
<li class='main'>Bus: <a href='#magicparlabel-30598'>1</a>, <a href='#magicparlabel-30692'>2</a></li>
<li class='main'>bus width: <a href='#magicparlabel-30700'>1</a></li>
<li class='main'>capacitor: <a href='#magicparlabel-30687'>1</a></li>
<li class='main'>Central Processing Unit: <a href='#magicparlabel-30618'>1</a></li>
<li class='main'>chip: <a href='#magicparlabel-29489'>1</a></li>
<li class='main'>chipset: <a href='#magicparlabel-30712'>1</a></li>
<li class='main'>&lt;em&gt;CMOS&lt;/em&gt;: <a href='#magicparlabel-29451'>1</a></li>
<li class='main'>&lt;em&gt;compiler&lt;/em&gt;: <a href='#magicparlabel-30222'>1</a></li>
<li class='main'>computer: <a href='#magicparlabel-30311'>1</a></li>
<li class='main'>Computer organization: <a href='#magicparlabel-30568'>1</a></li>
<li class='main'>CPU: <a href='#magicparlabel-30588'>1</a>, <a href='#magicparlabel-30614'>2</a></li>
<li class='main'>debugger: <a href='#magicparlabel-42815'>1</a></li>
<li class='main'>&lt;em&gt;Debugging Information Entry&lt;/em&gt;: <a href='#magicparlabel-44940'>1</a></li>
<li class='main'>desktop computer: <a href='#magicparlabel-30343'>1</a></li>
<li class='main'>domain expert: <a href='#magicparlabel-29260'>1</a></li>
<li class='main'>ELF header: <a href='#magicparlabel-39740'>1</a></li>
<li class='main'>embedded computer: <a href='#magicparlabel-30414'>1</a></li>
<li class='main'>embedded programming: <a href='#magicparlabel-30473'>1</a></li>
<li class='main'>executable binary: <a href='#magicparlabel-39725'>1</a></li>
<li class='main'>execution environment: <a href='#magicparlabel-30745'>1</a></li>
<li class='main'>fetch – decode – execute: <a href='#magicparlabel-30197'>1</a>, <a href='#magicparlabel-30608'>2</a></li>
<li class='main'>Field Gate Programmable Array: <a href='#magicparlabel-30498'>1</a></li>
<li class='main'>FPGA: <a href='#magicparlabel-30502'>1</a></li>
<li class='main'>freestanding environment: <a href='#magicparlabel-48086'>1</a></li>
<li class='main'>function attribute: <a href='#magicparlabel-41207'>1</a></li>
<li class='main'>functionally complete: <a href='#magicparlabel-29428'>1</a></li>
<li class='main'>Hardware Description Language: <a href='#magicparlabel-30521'>1</a></li>
<li class='main'>hosted environment: <a href='#magicparlabel-48076'>1</a></li>
<li class='main'>I/O Devices: <a href='#magicparlabel-30603'>1</a></li>
<li class='main'>instruction set: <a href='#magicparlabel-30549'>1</a></li>
<li class='main'>Instruction Set Architecture: <a href='#magicparlabel-30554'>1</a></li>
<li class='main'>ISA: <a href='#magicparlabel-30558'>1</a></li>
<li class='main'>linker: <a href='#magicparlabel-46970'>1</a></li>
<li class='main'>linker script: <a href='#magicparlabel-46975'>1</a></li>
<li class='main'>load memory address: <a href='#magicparlabel-47853'>1</a></li>
<li class='main'>logic gate: <a href='#magicparlabel-29400'>1</a></li>
<li class='main'>Machine language: <a href='#magicparlabel-29562'>1</a></li>
<li class='main'>Memory: <a href='#magicparlabel-30593'>1</a>, <a href='#magicparlabel-30653'>2</a></li>
<li class='main'>memory controller: <a href='#magicparlabel-30658'>1</a></li>
<li class='main'>Memory Controller Hub: <a href='#magicparlabel-30666'>1</a></li>
<li class='main'>Microcontroller: <a href='#magicparlabel-30441'>1</a></li>
<li class='main'>mobile computer: <a href='#magicparlabel-30359'>1</a></li>
<li class='main'>MOSFET: <a href='#magicparlabel-29393'>1</a></li>
<li class='main'>motherboard: <a href='#magicparlabel-30716'>1</a></li>
<li class='main'>netlist: <a href='#magicparlabel-30525'>1</a></li>
<li class='main'>objdump: <a href='#magicparlabel-30790'>1</a></li>
<li class='main'>object file: <a href='#magicparlabel-39717'>1</a></li>
<li class='main'>offset: <a href='#magicparlabel-40629'>1</a>, <a href='#magicparlabel-46613'>2</a></li>
<li class='main'>padding bytes: <a href='#magicparlabel-37595'>1</a></li>
<li class='main'>PCB: <a href='#magicparlabel-30461'>1</a></li>
<li class='main'>persistent storage device: <a href='#magicparlabel-45687'>1</a></li>
<li class='main'>Port: <a href='#magicparlabel-30639'>1</a></li>
<li class='main'>Printed Circuit Board: <a href='#magicparlabel-30465'>1</a>, <a href='#magicparlabel-30469'>2</a></li>
<li class='main'>problem domain: <a href='#magicparlabel-29232'>1</a>, <a href='#magicparlabel-29241'>2</a></li>
<li class='main'>program header: <a href='#magicparlabel-42378'>1</a></li>
<li class='main'>Program header table: <a href='#magicparlabel-39749'>1</a></li>
<li class='main'>program header table: <a href='#magicparlabel-42373'>1</a></li>
<li class='main'>program segment: <a href='#magicparlabel-42383'>1</a></li>
<li class='main'>Registers: <a href='#magicparlabel-30629'>1</a></li>
<li class='main'>Relocation: <a href='#magicparlabel-46516'>1</a></li>
<li class='main'>requirements: <a href='#magicparlabel-29249'>1</a></li>
<li class='main'>section: <a href='#magicparlabel-30818'>1</a>, <a href='#magicparlabel-39781'>2</a></li>
<li class='main'>Section header table: <a href='#magicparlabel-39758'>1</a></li>
<li class='main'>sector: <a href='#magicparlabel-45695'>1</a></li>
<li class='main'>segment: <a href='#magicparlabel-39776'>1</a></li>
<li class='main'>Segments and section: <a href='#magicparlabel-39767'>1</a></li>
<li class='main'>server: <a href='#magicparlabel-30319'>1</a></li>
<li class='main'>Software requirement document: <a href='#magicparlabel-29296'>1</a></li>
<li class='main'>Software specification: <a href='#magicparlabel-29319'>1</a></li>
<li class='main'>storage device: <a href='#magicparlabel-30174'>1</a></li>
<li class='main'>system-on-chip: <a href='#magicparlabel-30446'>1</a></li>
<li class='main'>track: <a href='#magicparlabel-45699'>1</a></li>
<li class='main'>transistor: <a href='#magicparlabel-29369'>1</a></li>
<li class='main'>virtual memory address: <a href='#magicparlabel-47089'>1</a>, <a href='#magicparlabel-47848'>2</a></li></ul>
</div>

<h1 class="chapter_" id='magicparlabel-49163'>Bibliography<!-- Output Error: Closing tag `h1' when other tags are pending. Discarded pending tags:
&lt;em&gt;
 -->
</h1>
<div class="standard" id='magicparlabel-49168'><h2 class='bibtex'>References</h2><div class='bibtex'><div class='bibtexentry' id='LyXCite-Hardy'><span class='bibtexlabel'>Hardy 2005</span><span class='bibtexinfo'><span class="bib-fullnames:author">Hardy, G. H.</span>, "<span class="bib-title">A Mathematician's Apology</span>", <span class="bib-publisher">University of Alberta Mathematical Sciences Society</span> (<span class="bib-year">2005</span>), <span class="bib-pages">13</span>.</span></div>
<div class='bibtexentry' id='LyXCite-intel_opt_manual'><span class='bibtexlabel'>Intel 2016</span><span class='bibtexinfo'><span class="bib-fullnames:author">Intel</span>, <i><span class="bib-title">IntelÂ® 64 and IA-32 Architectures Optimization Reference Manual</span></i> (<span class="bib-publisher">Intel</span>, <span class="bib-year">2016</span>).</span></div>
<div class='bibtexentry' id='LyXCite-Kovitz_psr'><span class='bibtexlabel'>Kovitz 1999</span><span class='bibtexinfo'><span class="bib-fullnames:author">Kovitz, Benjamin L.</span>, "<span class="bib-title">Practical Software Requirements</span>", <span class="bib-publisher">Manning</span> (<span class="bib-year">1999</span>), <span class="bib-pages">53</span>.</span></div>
<div class='bibtexentry' id='LyXCite-Peirce'><span class='bibtexlabel'>Peirce 1933</span><span class='bibtexinfo'><span class="bib-fullnames:author">Peirce, Charles Sanders</span>, "<span class="bib-title">Collected Papers v. 4</span>" (<span class="bib-year">1933</span>).</span></div>
<div class='bibtexentry' id='LyXCite-John_digital'><span class='bibtexlabel'>Wakerly 1999</span><span class='bibtexinfo'><span class="bib-fullnames:author">Wakerly, John F.</span>, "<span class="bib-title">Digital Design: Principles and Practices</span>", <span class="bib-publisher">Prentice Hall</span> (<span class="bib-year">1999</span>), <span class="bib-pages">86</span>.</span></div>
</div></div>
</body>
</html>
